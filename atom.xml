<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luuman&#39;s Blog</title>
  <subtitle>因为有了危机感，所以会义无反顾。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luuman.github.io/"/>
  <updated>2018-03-13T03:04:35.000Z</updated>
  <id>http://luuman.github.io/</id>
  
  <author>
    <name>世平阜康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript RegExpObjects 正则表达式</title>
    <link href="http://luuman.github.io/2018/02/27/Induce/JavaScript/Base/1.10-RegExpObjects/"/>
    <id>http://luuman.github.io/2018/02/27/Induce/JavaScript/Base/1.10-RegExpObjects/</id>
    <published>2018-02-27T10:29:00.000Z</published>
    <updated>2018-03-13T03:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个个音符杂乱无章的组合在一起，弹奏出的或许就是噪音，同样的音符经过作曲家的手，就可以谱出非常动听的乐曲，一个演奏者同样可以照着乐谱奏出动听的乐曲，但他/她或许不知道该如何去改变音符的组合，使得乐曲更动听。<br>作为正则的使用者也一样，不懂正则引擎原理的情况下，同样可以写出满足需求的正则，但是不知道原理，却很难写出高效且没有隐患的正则。所以对于经常使用正则，或是有兴趣深入学习正则的人，还是有必要了解一下正则引擎的匹配原理的。<br><a id="more"></a></p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>正则表达式（regular expression）是一个描述字符模式的对象，使用正则表达式可以进行强大的模式匹配和文本检索与替换功能。</p>
<p>JavaScript 的正则表达式语法是 Perl5 的正则表达式语法的大型子集，所以对于有 Perl 编程经验的程序员来说，学习 JavaScript 中的正则表达式是小菜一碟。</p>
<p>正则表达式是描述字符模式的对象，用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。<br>JavaScript中的正则表达式用RegExp对象表示，可以使用RegExp()构造函数来创建RegExp对象，不过RegExp对象更多是通过字面量的语法来创建。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 不推荐写法 --&gt;</span></div><div class="line"><span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern模式,modifiers修饰符)</div><div class="line"></div><div class="line">&lt;!-- <span class="comment">// 匹配所有的a或A --&gt;</span></div><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>,<span class="string">"gi"</span>)</div></pre></td></tr></table></figure>
<p>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。</p>
<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 推荐写法 --&gt;</span></div><div class="line"><span class="keyword">var</span> patt = <span class="regexp">/pattern/m</span>odifiers</div><div class="line"></div><div class="line">&lt;!-- <span class="comment">// 匹配所有的a或A --&gt;</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/gi</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w+"</span>)</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+/</span></div></pre></td></tr></table></figure>
<h2 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h2><p>在ECMAScript5中这种情况有所改变，相同正则表达式字面量的每次计算都会<code>创建新的实例对象</code>，目前很多现代浏览器也对此做了纠正。<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml">function getRE()</span><span class="template-variable">&#123;</span></div><div class="line">	var re = /[a-z]/</div><div class="line">	re.foo = 'bar'</div><div class="line">	return re</div><div class="line">&#125;<span class="xml"></span></div><div class="line">var reg = getRE()</div><div class="line">re2 = getRE()</div><div class="line">console.log(reg === re2)</div><div class="line">reg.foo = 'baz'</div><div class="line">console.log(re2.foo)</div><div class="line"></div><div class="line">ECMAScript3同一对象</div><div class="line"><span class="comment">&lt;!-- // true --&gt;</span></div><div class="line"><span class="comment">&lt;!-- // "baz" --&gt;</span></div><div class="line"></div><div class="line">ECMAScript5不同对象</div><div class="line"><span class="comment">&lt;!-- // false --&gt;</span></div><div class="line"><span class="comment">&lt;!-- // "bar" --&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="模式修饰词"><a href="#模式修饰词" class="headerlink" title="模式修饰词"></a>模式修饰词</h2><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>执行对大小写不敏感的匹配</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配模式（查找所有匹配而非在找到第一个匹配后停止）</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配模式</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'HwwwwLwello orllld lLll!'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["l", index: 8, input: "HwwwwLwello orllld lLll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l/i</span>))</div><div class="line">&lt;!-- <span class="comment">// ["L", index: 5, input: "HwwwwLwello orllld lLll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["l", "l", "l", "l", "l", "l", "l", "l"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'Hwwwwl\nwello orllld lLll!'</span></div><div class="line"><span class="built_in">console</span>.log(str)</div><div class="line">&lt;!-- <span class="comment">// Hwwwwl --&gt;</span></div><div class="line">&lt;!-- <span class="comment">// wello orllld lLll! --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l$/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l$/m</span>))</div><div class="line">&lt;!-- <span class="comment">// ["l", index: 5, input: "Hwwwwl↵wello orllld lLll!"] --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>与其他语言中的正则表达式类似，模式中使用的所有元字符都必须转义。正则表达式中的元字符包括：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( [ &#123; \ ^ $ | ) ? * + . ] &#125;</div></pre></td></tr></table></figure>
<p>这些元字符在正则表达式中都有一或多种特殊用途，因此如果想要匹配字符串中包含的这些字符，就必须对它们进行转义。<br>下面给出几个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/[bc]at/i</span></div><div class="line">&lt;!-- <span class="comment">// 匹配第一个"bat"或"cat"，不区分大小写 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/\[bc\]at/i</span></div><div class="line">&lt;!-- <span class="comment">// 匹配第一个" [bc]at"，不区分大小写 --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="直接量字符"><a href="#直接量字符" class="headerlink" title="直接量字符"></a>直接量字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>字母数字</td>
<td>自身</td>
</tr>
<tr>
<td>\0</td>
<td>查找 NUL 字符（\u0000）</td>
</tr>
<tr>
<td>\t</td>
<td>查找制表符（\u0009）</td>
</tr>
<tr>
<td>\v</td>
<td>查找垂直制表符（\u000A）</td>
</tr>
<tr>
<td>\n</td>
<td>查找换行符（\u000B）</td>
</tr>
<tr>
<td>\f</td>
<td>查找换页符（\u000C）</td>
</tr>
<tr>
<td>\r</td>
<td>查找回车符（\u000D）</td>
</tr>
<tr>
<td>\xdd</td>
<td>查找以十六进制数 dd 规定的字符（\x0A =&gt; \n）</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>查找以十六进制数 xxxx 规定的 Unicode 字符（\u0009 =&gt; \t）</td>
</tr>
<tr>
<td>\cX</td>
<td>控制字符^X （\cJ =&gt; \n）</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'null \t \n \f \r '</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\n/</span>))</div><div class="line"><span class="comment">// ["↵", index: 7, input: "null 	 ↵   "]</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\f/</span>))</div><div class="line"><span class="comment">// ["", index: 9, input: "null 	 ↵   "]</span></div><div class="line"><span class="keyword">var</span> str=<span class="string">'null'</span></div><div class="line"><span class="built_in">console</span>.log(str.test(<span class="regexp">/\0/</span>))</div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>查找单个字符，除了换行和行结束符</td>
</tr>
<tr>
<td>\w</td>
<td>(word)查找单词字符：[a-zA-Z_0-9]（单词字符包括：a-z、A-Z、0-9，以及下划线）</td>
</tr>
<tr>
<td>\W</td>
<td>查找非单词字符：[^a-zA-Z_0-9]（单词字符包括：a-z、A-Z、0-9，以及下划线）</td>
</tr>
<tr>
<td>\s</td>
<td>(white space)查找空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>查找非空白字符</td>
</tr>
<tr>
<td>\d</td>
<td>(digit)查找数字：<a href="1">0-9</a></td>
</tr>
<tr>
<td>\D</td>
<td>查找非数字字符：[^0-9]</td>
</tr>
<tr>
<td><a href="1">0-9</a></td>
<td>查找任何从 0 至 9 的数字</td>
</tr>
<tr>
<td>[a-z]</td>
<td>查找任何从小写 a 到小写 z 的字符</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>查找任何从大写 A 到大写 Z 的字符</td>
</tr>
<tr>
<td>[A-z]</td>
<td>查找任何从大写 A 到小写 z 的字符</td>
</tr>
<tr>
<td>[…]</td>
<td>查找方括号之间的任何字符（没有顺序同级）</td>
</tr>
<tr>
<td>[^…]</td>
<td>查找不在方括号之间的任何字符</td>
</tr>
<tr>
<td>[adgk]</td>
<td>查找给定集合内的任何字符</td>
</tr>
<tr>
<td>[^adgk]</td>
<td>查找给定集合外的任何字符</td>
</tr>
</tbody>
</table>
<p>如果要匹配任意字符怎么办?可以使用 [\d\D]、[\w\W]、[\s\S] 和 [^] 中任何的一个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\w/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["3", "o", "_"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\W/g</span>))</div><div class="line">&lt;!-- <span class="comment">// [" ", " ", "!", ".", "."] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\s/g</span>))</div><div class="line">&lt;!-- <span class="comment">// [" ", " "] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\S/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["3", "o", "!", "_", ".", "."] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["3"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o !_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\b/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", "", "", "", "", ""] --&gt;</span></div><div class="line">注：单词前后</div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o A!_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/[A-Z]/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["A"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'3 o A!_..'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/[A-z]/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["o", "A", "_"] --&gt;</span></div><div class="line">注：此处出现了<span class="string">"_"</span>，a-z、A-Z，以及下划线</div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'12323 orllbld lLll!'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/[abc]/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["b"] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/[ro3]/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["3", "3", "o", "r"] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/[^abc]/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["1", "2", "3", "2", "3", " ", "o", "r", "l", "l", "l", "d", " ", "l", "L", "l", "l", "!"] --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a>重复字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>X{n,m}</td>
<td>匹配包含 n 至 m 个 X 的序列的字符串。</td>
</tr>
<tr>
<td>X{n,}</td>
<td>匹配包含至少 n 个 X 的序列的字符串。</td>
</tr>
<tr>
<td>X{n}</td>
<td>匹配包含 n 个 X 的序列的字符串。</td>
</tr>
<tr>
<td>X?</td>
<td>(有吗?)匹配任何包含零个或一个 X 的字符串 {0,1}</td>
</tr>
<tr>
<td>X+</td>
<td>(加号是追加的意思)匹配任何包含至少一个 X 的字符串 {1,}</td>
</tr>
<tr>
<td>X*</td>
<td>(任意次)匹配任何包含零个或多个 X 的字符串 {0,}</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'Hwwwwlllll orlllld lll!'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;3,5&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["lllll", index: 5, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;2,3&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["lll", index: 5, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line">注：匹配出去l为<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;0,1&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", index: 0, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l?/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", index: 0, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;1,&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["lllll", index: 5, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l+/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["lllll", index: 5, input: "Hwwwwlllll orlllld lll!"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'Hwwwwwello orllld llll!'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;3,5&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["lll", index: 13, input: "Hwwwwwello orllld llll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;1,4&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["ll", index: 7, input: "Hwwwwwello orllld llll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;2&#125;/</span>))</div><div class="line">注：匹配两个l</div><div class="line">&lt;!-- <span class="comment">// ["ll", index: 7, input: "Hwwwwwello orllld llll!"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l&#123;4,&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["llll", index: 18, input: "Hwwwwwello orllld llll!"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'01'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/0?/</span>));</div><div class="line"><span class="xml"><span class="comment">&lt;!-- // ["0", index: 0, input: "01"] --&gt;</span></span></div><div class="line">console.log(str.match(/1?/));</div><div class="line"><span class="comment">&lt;!-- // ["", index: 0, input: "01"] --&gt;</span></div><div class="line">注：尽可能少的匹配&#123;0,1&#125;</div><div class="line"></div><div class="line">console.log(str.match(/0*/));</div><div class="line"><span class="comment">&lt;!-- // ["0", index: 0, input: "01"] --&gt;</span></div><div class="line">console.log(str.match(/1*/));</div><div class="line"><span class="comment">&lt;!-- // ["", index: 0, input: "01"] --&gt;</span></div><div class="line">注：&#123;0,&#125;</div><div class="line"></div><div class="line">console.log(str.match(/1+/));</div><div class="line"><span class="comment">&lt;!-- // ["1", index: 1, input: "01"] --&gt;</span></div><div class="line">注：&#123;1,&#125;</div></pre></td></tr></table></figure>
<h2 id="非贪婪重复"><a href="#非贪婪重复" class="headerlink" title="非贪婪重复"></a>非贪婪重复</h2><p>尽可能少的匹配：??、+?、*?、{1,4}?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'0111'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/00?/</span>))</div><div class="line">&lt;!-- [<span class="string">"0"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01?/</span>))</div><div class="line">&lt;!-- [<span class="string">"01"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/11?/</span>))</div><div class="line">&lt;!-- [<span class="string">"11"</span>, <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01+/</span>))</div><div class="line">&lt;!-- [<span class="string">"0111"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01+?/</span>))</div><div class="line">&lt;!-- [<span class="string">"01"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line">注：&#123;<span class="number">1</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'0111'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/11??/</span>))</div><div class="line">&lt;!-- [<span class="string">"1"</span>, <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01??/</span>))</div><div class="line">&lt;!-- [<span class="string">"0"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"011"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01*/</span>))</div><div class="line">&lt;!-- [<span class="string">"0111"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"0111"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/01*?/</span>))</div><div class="line">&lt;!-- [<span class="string">"0"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"0111"</span>] --&gt;</div><div class="line">注：?? = *? ==》 &#123;<span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'0111'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/1&#123;1,4&#125;?/</span>))</div><div class="line">&lt;!-- [<span class="string">"1"</span>, <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">input</span>: <span class="string">"0111"</span>] --&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(regex));</div><div class="line"><span class="comment">// =&gt; ["12", "12", "34", "12", "34", "12", "34", "56"]</span></div></pre></td></tr></table></figure>
<h2 id="锚字符"><a href="#锚字符" class="headerlink" title="锚字符"></a>锚字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>匹配字符串开头(用正则表达式处理多行时匹配行的开始)</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾(处理多行时匹配行尾)</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界</td>
</tr>
<tr>
<td>(?=p)</td>
<td>零宽正向先行断言，要求接下来的字符都与p匹配，但不能包括匹配p的那些字符 (?=p) =&gt; p</td>
</tr>
<tr>
<td>(?!p)</td>
<td>零宽正向先行断言，要求接下来的字符不与p匹配 (?!p) =&gt; [^p]</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'orllld'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/^o/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["o", index: 0, input: "orllld"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/d$/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["d", index: 5, input: "orllld"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'orllld'</span></div><div class="line">&lt;!-- <span class="number">0o1</span>r2l3l4l5d6 --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?=d)/</span>, <span class="string">','</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", index: 5, input: "orllld"] --&gt;</span></div><div class="line">&lt;!-- <span class="comment">// orlll,d --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'orllld '</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/d$/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l(?=d)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["l", index: 4, input: "orllld "] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l(?!d)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["l", index: 2, input: "orllld "] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScript'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?=Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["JavaScript", "Script", index: 0, input: "JavaScript"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?=Bcript)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?!Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?!Bcript)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["JavaScript", "Bcript", index: 0, input: "JavaScript"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScriptS'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScriptS'</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/Java(?!Script)([A-Z]\w*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $<span class="number">0</span> + <span class="string">','</span> + $<span class="number">1</span> + <span class="string">','</span> + $<span class="number">2</span></div><div class="line">	&#125;))</div><div class="line">&lt;!-- <span class="comment">// JavaScriptS --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaSs'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?!Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["JavaSs", "Ss", index: 0, input: "JavaSs"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/Java(?!Script)([A-Z]\w*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $<span class="number">0</span> + <span class="string">','</span> + $<span class="number">1</span> + <span class="string">','</span> + $<span class="number">2</span></div><div class="line">	&#125;))</div><div class="line">&lt;!-- <span class="comment">// JavaSs,Ss,0 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaType'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/Java(?!Script)([A-Z]\w*)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["JavaType", "Type", index: 0, input: "JavaType"] --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="选择、分组、引用字符"><a href="#选择、分组、引用字符" class="headerlink" title="选择、分组、引用字符"></a>选择、分组、引用字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>(…)</td>
<td>组合，将几个项组合为一个单元，这个单元可通过*、+、?、等符号加以修饰，而且可以记住和这个组合相匹配的字符串以供使用的字符。</td>
</tr>
<tr>
<td>(?:…)</td>
<td>只组合，把项组合到一个单元，但不记住与该组相匹配的字符</td>
</tr>
<tr>
<td>\n</td>
<td>反向引用。比如 \2，表示引用的是第二个括号里的捕获的数据。</td>
</tr>
</tbody>
</table>
<p>red|blue|green     查找任何指定red、blue、green的选项。</p>
<p>用()表示的就是要提取的分组（Group）^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 识别合法的时间 --&gt;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/</span>;</div><div class="line"><span class="built_in">console</span>.log(re.exec(<span class="string">'19:05:30'</span>))</div><div class="line">&lt;!-- <span class="comment">// ["19:05:30", "19", "05", "30", index: 0, input: "19:05:30"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(re.exec(<span class="string">'25:05:30'</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScript'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(re))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;/</span>;</div><div class="line"><span class="xml"><span class="comment">&lt;!-- \1 分组序号1 --&gt;</span></span></div><div class="line">var string1 = "2017-06-12";</div><div class="line">var string2 = "2017/06/12";</div><div class="line">var string3 = "2017.06.12";</div><div class="line">var string4 = "2016-06/12";</div><div class="line">console.log(regex.test(string1)); // true</div><div class="line">console.log(regex.test(string2)); // true</div><div class="line">console.log(regex.test(string3)); // true</div><div class="line">console.log(regex.test(string4)); // false</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScriptS'</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/Java(?:Script)([A-Z]\w*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $<span class="number">0</span> + <span class="string">','</span> + $<span class="number">1</span></div><div class="line">	&#125;))</div><div class="line">&lt;!-- <span class="comment">// JavaScriptS,S,0 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">'JavaScript'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/'a/</span>))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="非捕获性分组"><a href="#非捕获性分组" class="headerlink" title="非捕获性分组"></a>非捕获性分组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">reg = <span class="regexp">/abc&#123;2&#125;/</span></div><div class="line">&lt;!-- <span class="comment">// 将匹配abcc   --&gt;</span></div><div class="line">reg = <span class="regexp">/(abc)&#123;2&#125;/</span></div><div class="line">&lt;!-- <span class="comment">// 将匹配abcabc   --&gt;</span></div><div class="line">&lt;!-- <span class="comment">// 上面的分组都是捕获性分组   --&gt;</span></div><div class="line"></div><div class="line">str = <span class="string">"abcabc ###"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/(abc)&#123;2&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abcabc", "abc", index: 0, input: "abcabc ###"] --&gt;</span></div><div class="line">&lt;!-- <span class="comment">// 非捕获性分组 (?:)   --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/(?:abc)&#123;2&#125;/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abcabc", index: 0, input: "abcabc ###"] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/(?:abc)/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abc", index: 0, input: "abcabc ###"] --&gt;</span></div><div class="line"></div><div class="line">str = <span class="string">"candy"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/^(?:can|candy)$/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["candy", index: 0, input: "candy"] --&gt;</span></div><div class="line"></div><div class="line">str = <span class="string">"can"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/^(?:can|candy)$/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["can", index: 0, input: "can"] --&gt;</span></div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>检索字符串中指定的值。返回找到的值，并确定其位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'Ubuntu 8'</span></div><div class="line">reg = <span class="regexp">/^[a-z]+\s+\d+$/i</span></div><div class="line"><span class="built_in">console</span>.log(reg.exec(date))</div><div class="line">&lt;!-- <span class="comment">// ["Ubuntu 8", index: 0, input: "Ubuntu 8"] --&gt;</span></div><div class="line"></div><div class="line">reg = <span class="regexp">/\d+/</span></div><div class="line"><span class="built_in">console</span>.log(reg.exec(date))</div><div class="line">&lt;!-- <span class="comment">// ["8", index: 7, input: "Ubuntu 8"] --&gt;</span></div><div class="line"></div><div class="line">reg = <span class="regexp">/o/</span></div><div class="line"><span class="built_in">console</span>.log(reg.exec(date))</div><div class="line">&lt;!-- <span class="comment">// null --&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"mom and dad baby"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> matches = pattern.exec(text)</div><div class="line"><span class="built_in">console</span>.log(text.match(pattern))</div><div class="line"><span class="built_in">console</span>.log(matches)</div><div class="line">&lt;!-- <span class="comment">// ["mom and dad", " and dad", undefined, index: 0, input: "mom and dad baby"] --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> text = <span class="string">"mom and dad and baby"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span></div><div class="line"><span class="built_in">console</span>.log(text.match(pattern))</div><div class="line">&lt;!-- <span class="comment">// ["mom and dad and baby"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(text.replace(pattern, <span class="string">'($0) ($1) ($2) ($3)'</span>))</div><div class="line">&lt;!-- <span class="comment">// ($0) ( and dad and baby) ( and baby) ($3) --&gt;</span></div><div class="line">&lt;!-- <span class="keyword">var</span> text = <span class="string">"mom and dad and baby"</span>; --&gt;</div><div class="line"><span class="xml"><span class="comment">&lt;!-- // ($0) ( and dad) () ($3) baby --&gt;</span></span></div><div class="line">console.log(text.replace(pattern, function($0, $1, $2, $3) &#123;</div><div class="line">		return $0 + ',' + $1 + ',' + $2 + ',' + $3</div><div class="line">	&#125;))</div><div class="line"><span class="comment">&lt;!-- // mom and dad and baby, and dad and baby, and baby,0 --&gt;</span></div></pre></td></tr></table></figure>
<p>这个例子中的模式包含两个捕获组。最内部的捕获组匹配 <code>&quot;and baby&quot;</code>，而包含它的捕获组匹配 <code>&quot;and dad&quot;</code> 或者 <code>&quot;and dad and baby&quot;</code>。当把字符串传入 <code>exec()</code> 方法中之后，发现了一个匹配项。因为整个字符串本身与模式匹配，所以返回的数组 <code>matchs</code> 的 <code>index</code> 属性值为 <code>0</code>。数组中的第一项是匹配的整个字符串，第二项包含与第一个捕获组匹配的内容，第三项包含与第二个捕获组匹配的内容。</p>
<p>对于 <code>exec()</code> 方法而言，即使在模式中设置了全局标志 <code>g</code>，它每次也只会返回一个匹配项。在不设置全局标志的情况下，在同一个字符串上多次调用 <code>exec()</code> 将始终返回第一个匹配项的信息。<br>而在设置全局标志的情况下，每次调用 <code>exec()</code> 则都会在字符串中继续查找新匹配项，如下面的例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/.at/</span></div><div class="line"></div><div class="line">&lt;!-- <span class="comment">// 非全局模式，第一次匹配 --&gt;</span></div><div class="line"><span class="keyword">var</span> matches = pattern1.exec(text)</div><div class="line">&lt;!-- [<span class="string">"cat"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"cat, bat, sat, fat"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(matches.index)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>])</div><div class="line">&lt;!-- <span class="comment">// cat --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"></div><div class="line">&lt;!-- <span class="comment">// 非全局模式，第二次匹配 --&gt;</span></div><div class="line">matches = pattern1.exec(text)</div><div class="line"><span class="built_in">console</span>.log(matches.index)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>])</div><div class="line">&lt;!-- <span class="comment">// cat --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/.at/g</span></div><div class="line">&lt;!-- <span class="comment">// 全局模式，第一次匹配 --&gt;</span></div><div class="line"><span class="keyword">var</span> matches = pattern2.exec(text)</div><div class="line"><span class="built_in">console</span>.log(matches.index)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>])</div><div class="line">&lt;!-- <span class="comment">// cat --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"></div><div class="line">&lt;!-- <span class="comment">// 全局模式，第二次匹配 --&gt;</span></div><div class="line">matches = pattern2.exec(text)</div><div class="line"><span class="built_in">console</span>.log(matches.index)</div><div class="line">&lt;!-- <span class="comment">// 5 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>])</div><div class="line">&lt;!-- <span class="comment">// bat --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 8 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/.at/g</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.exec(text))</div><div class="line">&lt;!-- [<span class="string">"cat"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"cat, bat, sat, fat"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(pattern2.exec(text))</div><div class="line">&lt;!-- [<span class="string">"bat"</span>, <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">input</span>: <span class="string">"cat, bat, sat, fat"</span>] --&gt;</div></pre></td></tr></table></figure>
<p>这个例子中的第一个模式 <code>pattern1</code> 不是全局模式，因此每次调用 <code>exec()</code> 返回的都是第一个匹配项 <code>&quot;cat&quot;</code>。而第二个模式 <code>pattern2</code> 是全局模式，因此每次调用 <code>exec()</code> 都会返回字符串中的下一个匹配项，直至搜索到字符串末尾为止。此外，还应该注意模式的 <code>lastIndex</code> 属性的变化情况。在全局匹配模式下，<code>lastIndex</code> 的值在每次调用 <code>exec()</code> 后都会增加，而在非全局模式下则始终保持不变。</p>
<blockquote>
<p>IE 的 JavaScript 实现在 <code>lastIndex</code> 属性上存在偏差，即使在非全局模式下，<code>lastIndex</code> 属性每次也会变化。</p>
</blockquote>
<p>正则表达式的第二个方法是 <code>test()</code>，它接受一个字符串参数。在模式与该参数匹配的情况下返回 <code>true</code>；否则，返回 <code>false</code>。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，<code>test()</code> 方法经常被用在 <code>if</code> 语句中，如下面的例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"000-00-0000"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"The pattern was matched."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，我们使用正则表达式来测试了一个数字序列。如果输入的文本与模式匹配，则显示一条消息。这种用法经常出现在验证用户输入的情况下，因为我们只想知道输入是不是有效，至于它为什么无效就无关紧要了。</p>
<p><code>RegExp</code> 实例继承的 <code>toLocaleString()</code> 和 <code>toString()</code> 方法都会返回正则表达式的字面量，与创建正则表达式的方式无关。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[bc\\]at"</span>, <span class="string">"gi"</span>)</div><div class="line"><span class="built_in">console</span>.log(pattern.toString())</div><div class="line">&lt;!-- <span class="comment">// /\[bc\]at/gi --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern.toLocaleString())</div><div class="line">&lt;!-- <span class="comment">// /\[bc\]at/gi --&gt;</span></div></pre></td></tr></table></figure>
<p>即使上例中的模式是通过调用 <code>RegExp</code> 构造函数创建的，但 <code>toLocaleString()</code> 和 <code>toString()</code> 方法仍然会像它是以字面量形式创建的一样显示其字符串表示。</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>检索字符串中指定的值。返回 true 或 false。可以修改lastIndex从指定位置开始匹配。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'Ubuntu 8'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]+\s+\d+$/i</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'1buntu 8'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]+\s+\d+$/i</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"1431431433"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(regex));</div><div class="line"><span class="xml"><span class="comment">&lt;!-- ["1431431433", "143", "1", "43", "3", index: 0, input: "1431431433"] --&gt;</span></span></div><div class="line">console.log(regex.test(string));</div><div class="line"><span class="comment">&lt;!-- // true --&gt;</span></div><div class="line">console.log(RegExp.$1);</div><div class="line"><span class="comment">&lt;!-- // 143 --&gt;</span></div><div class="line">console.log(RegExp.$2);</div><div class="line"><span class="comment">&lt;!-- // 1 --&gt;</span></div><div class="line">console.log(RegExp.$3);</div><div class="line"><span class="comment">&lt;!-- // 43 --&gt;</span></div><div class="line">console.log(RegExp.$4);</div><div class="line"><span class="comment">&lt;!-- // 3 --&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>可在字符串内检索指定的值，或找到一个正则表达式的匹配，得到第一个位置，没有则返回-1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'Hello world!'</span></div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/l/</span>))</div><div class="line">&lt;!-- <span class="comment">// 2 --&gt;</span></div><div class="line"></div><div class="line">str=<span class="string">'HLelo world!'</span></div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/l/i</span>))</div><div class="line">&lt;!-- <span class="comment">// 1 --&gt;</span></div><div class="line"></div><div class="line">str=<span class="string">'Hello world!'</span></div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/l/gi</span>))</div><div class="line">&lt;!-- <span class="comment">// 2 --&gt;</span></div><div class="line"></div><div class="line">str=<span class="string">'Hello world!'</span></div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/g/i</span>))</div><div class="line">&lt;!-- <span class="comment">// -1 --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>方法用于把一个字符串分割成字符串数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.split(separator,howmany)</div></pre></td></tr></table></figure>
<p>separator: 字符串或正则表达式<br>separator: 该参数可指定返回的数组的最大长度</p>
<p>参数是字符串转换数组后间隔的参照物，但是有一些复杂的转换就比较麻烦了，这时候我们可以使用正则表达式对字符串进行筛选后再组成</p>
<p>注释：</p>
<ol>
<li>如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</li>
<li>String.split() 执行的操作与 Array.join 执行的操作是相反的。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">str =<span class="string">"some some             \tsome\t\f"</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\s+/i</span>))</div><div class="line">&lt;!-- <span class="comment">// ["some", "some", "some", ""] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\s+/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["some", "some", "some", ""] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\s/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["some", "some", "", "", "", "", "", "", "", "", "", "", "", "", "", "some", "", ""] --&gt;</span></div><div class="line"></div><div class="line">a = <span class="string">'a1b2c3d4'</span></div><div class="line"><span class="built_in">console</span>.log(a.split(<span class="regexp">/[a-z]+/g</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", "1", "2", "3", "4"] --&gt;</span></div><div class="line"></div><div class="line">str =<span class="string">".how.show.show"</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>))</div><div class="line">&lt;!-- <span class="comment">// [".", "h", "o", "w", ".", "s", "h", "o", "w", ".", "s", "h", "o", "w"] --&gt;</span></div><div class="line"></div><div class="line">str =<span class="string">".how.show.show"</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\./</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", "how", "show", "show"] --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\./g</span>))</div><div class="line">&lt;!-- <span class="comment">// [".", ".", "."] --&gt;</span></div><div class="line"></div><div class="line">str =<span class="string">".how.sh.show"</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\./</span>, <span class="number">2</span>))</div><div class="line">&lt;!-- <span class="comment">// ["", "how"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\./</span>, <span class="number">3</span>))</div><div class="line">&lt;!-- [<span class="string">""</span>, <span class="string">"how"</span>, <span class="string">"sh"</span>] --&gt;</div></pre></td></tr></table></figure>
<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br>该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stringObject.match(searchvalue)</div><div class="line">stringObject.match(regexp)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">检索字母l：</div><div class="line">index位数</div><div class="line">input字符串</div><div class="line">length长度</div><div class="line"><span class="keyword">var</span> str=<span class="string">'Hello world!'</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'l'</span>))</div><div class="line">&lt;!-- [<span class="string">"l"</span>, <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">input</span>: <span class="string">"Hello world!"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/l/i</span>))</div><div class="line">&lt;!-- [<span class="string">"l"</span>, <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">input</span>: <span class="string">"Hello world!"</span>] --&gt;</div><div class="line"></div><div class="line">正则匹配数字：</div><div class="line"><span class="keyword">var</span> str=<span class="string">"1 plus 2 equal 3"</span></div><div class="line">str.match(<span class="regexp">/\d+/g</span>)</div><div class="line">&lt;!-- <span class="comment">// ['1','2','3'] --&gt;</span></div><div class="line">length长度</div><div class="line"></div><div class="line"><span class="keyword">var</span> str=<span class="string">"1 plus 2 equal 3"</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></div><div class="line">str.match(reg)</div><div class="line">&lt;!-- [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>] --&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">"My name is CJ.Hello everyone!"</span></div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[A-Z]/</span></div><div class="line"><span class="keyword">var</span> arr = str.match(re)</div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line">&lt;!-- [<span class="string">"M"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"My name is CJ.Hello everyone!"</span>] --&gt;</div><div class="line"></div><div class="line">re = <span class="regexp">/[A-Z]/g</span></div><div class="line">arr = str.match(re)</div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line">&lt;!-- [<span class="string">"M"</span>, <span class="string">"C"</span>, <span class="string">"J"</span>, <span class="string">"H"</span>] --&gt;</div><div class="line"></div><div class="line">re = <span class="regexp">/\b[a-z]*\b/gi</span></div><div class="line">str = <span class="string">"on e two three four"</span></div><div class="line">str.match(re)</div><div class="line">&lt;!-- [<span class="string">"on"</span>, <span class="string">""</span>, <span class="string">"e"</span>, <span class="string">""</span>, <span class="string">"two"</span>, <span class="string">""</span>, <span class="string">"three"</span>, <span class="string">""</span>, <span class="string">"four"</span>, <span class="string">""</span>] --&gt;</div></pre></td></tr></table></figure>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并将其替换。值对应match所解读的位置</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>匹配第n个匹配正则表达式中的圆括号子表达式文本</td>
</tr>
<tr>
<td>$&amp;</td>
<td>匹配正则表达式的子串</td>
</tr>
<tr>
<td>$`</td>
<td>匹配子串左边的文本</td>
</tr>
<tr>
<td>$’</td>
<td>匹配子串右边的文本</td>
</tr>
<tr>
<td>$$</td>
<td>匹配美元符号</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">' Ubuntu 8 '</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(^\s+)|(\s+$)/g</span></div><div class="line">&lt;!-- [<span class="string">" "</span>, <span class="string">" "</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">"($')"</span>))</div><div class="line">&lt;!-- (Ubuntu <span class="number">8</span> )Ubuntu <span class="number">8</span>() --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">'($$)'</span>))</div><div class="line">&lt;!-- ($)Ubuntu <span class="number">8</span>($) --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">'($`)'</span>))</div><div class="line">&lt;!-- ()Ubuntu <span class="number">8</span>( Ubuntu <span class="number">8</span>) --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">'($&amp;)'</span>))</div><div class="line">&lt;!-- ( )Ubuntu <span class="number">8</span>( ) --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">'($0)'</span>))</div><div class="line">($<span class="number">0</span>)Ubuntu <span class="number">8</span>($<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">'($0) ($1) ($2)'</span>))</div><div class="line">($<span class="number">0</span>) ( ) ()Ubuntu <span class="number">8</span>($<span class="number">0</span>) () ( )</div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">' Ubuntu 8 '</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(^\s+)|(\s+$)/g</span></div><div class="line"><span class="built_in">console</span>.log(date.match(reg))</div><div class="line">&lt;!-- [<span class="string">" "</span>, <span class="string">" "</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span>, $<span class="number">2</span></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$0'</span> + $<span class="number">0</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$1'</span> + $<span class="number">1</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$2'</span> + $<span class="number">2</span>)</div><div class="line">	<span class="keyword">return</span> <span class="string">','</span></div><div class="line">&#125;))</div><div class="line">&lt;!-- $<span class="number">0</span>  --&gt;</div><div class="line">&lt;!-- $1  --&gt;</div><div class="line">&lt;!-- $2undefined --&gt;</div><div class="line">&lt;!-- $0  --&gt;</div><div class="line">&lt;!-- $1undefined --&gt;</div><div class="line">&lt;!-- $2  --&gt;</div><div class="line">&lt;!-- ,Ubuntu 8, --&gt;</div><div class="line"></div><div class="line">str ="z d l"</div><div class="line">console.log(str.replace('z', 'f'))</div><div class="line">&lt;!-- // f d l --&gt;</div><div class="line">console.log(str.match(/(\w)\s(\w)\s(\w)/))</div><div class="line">&lt;!-- // ["z d l", "z", "d", "l", index: 0, input: "z d l"] --&gt;</div><div class="line">console.log(str.replace(/(\w)\s(\w)\s(\w)/, '$0 $3 $2 $1'))</div><div class="line">&lt;!-- // $0 l d z --&gt;</div><div class="line">console.log(str.replace(/(\w)\s(\w)\s(\w)/, function($0, $1, $2, $3) &#123;</div><div class="line">	return $0 + ',' + $1 + ',' + $2 + ',' + $3</div><div class="line">&#125;))</div><div class="line">&lt;!-- // z d l,z,d,l --&gt;</div><div class="line">&lt;!-- console.log(str.replace(/(\w)\s(\w)\s(\w)/, function($0, $1, $2, $3 ,$&amp; ,$` ,$' ,$$) &#123;</div><div class="line">	return $0 + ',' + $1 + ',' + $2 + ',' + $3 + ',' + $&amp; + ',' + $` + ',' + $' + ',' + $$</div><div class="line">&#125;)); --&gt;</div><div class="line"></div><div class="line">let str = '他今年22岁，她今年20岁，他的爸爸今年45岁，她的爸爸今年44岁，一共有4人'</div><div class="line">let reg = /(\d+)岁/g</div><div class="line">console.log(str.match(reg))</div><div class="line">&lt;!-- ["22岁", "20岁", "45岁", "44岁"] --&gt;</div><div class="line">console.log(str.replace(reg, function($0, $1) &#123;</div><div class="line">	console.log($0 + ',' + $1)</div><div class="line">	let gyear = (new Date()).getYear() - parseInt($0) + 1</div><div class="line">	return $0 + '(' + gyear + '年出生)'</div><div class="line">&#125;))</div><div class="line">&lt;!-- 他今年22岁(96年出生)，她今年20岁(98年出生)，他的爸爸今年45岁(73年出生)，她的爸爸今年44岁(74年出生)，一共有4人 --&gt;</div><div class="line"></div><div class="line">function test($1)&#123;   </div><div class="line">	return '&lt;font color="red"&gt;' + $1 + '&lt;/font&gt;'  </div><div class="line">&#125;</div><div class="line">var s=prompt('请输入在查找的字符','人')</div><div class="line">var reg=new RegExp('('+s+')','g')</div><div class="line">var str='中华人民共和国，中华人民共和国'</div><div class="line">var newstr=str.replace(reg,test)</div><div class="line">document.write(newstr + '&lt;br&gt;')</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">str =<span class="string">'some some             \tsome\t\f'</span></div><div class="line">res = <span class="regexp">/\s+/</span></div><div class="line"><span class="built_in">console</span>.log(str.match(res))</div><div class="line">&lt;!-- <span class="comment">// [" ", index: 4, input: "some some             	some	"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(res,<span class="string">"#"</span>))</div><div class="line">&lt;!-- <span class="comment">// some#some             	some	 --&gt;</span></div><div class="line">res = <span class="regexp">/\s+/g</span></div><div class="line"><span class="built_in">console</span>.log(str.match(res))</div><div class="line">&lt;!-- <span class="comment">// [" ", "             	", "	"] --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(res,<span class="string">"@"</span>))</div><div class="line">&lt;!-- <span class="comment">// some@some@some@ --&gt;</span></div></pre></td></tr></table></figure>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息。</p>
<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ol>
<li><code>global</code>：布尔值，表示是否设置了 <code>g</code> 标志。</li>
<li><code>ignoreCase</code>：布尔值，表示是否设置了 <code>i</code> 标志。</li>
<li><code>lastIndex</code>：整数，表示开始搜索下一个匹配项的字符位置，从0算起。</li>
<li><code>multiline</code>：布尔值，表示是否设置了 <code>m</code> 标志。</li>
<li><code>source</code>：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\[bc\]at/i</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.global)</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.ignoreCase)</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.multiline)</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.source)</div><div class="line">&lt;!-- <span class="comment">// "\[bc\]at" --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[bc\\]at"</span>, <span class="string">"i"</span>)</div><div class="line"><span class="built_in">console</span>.log(pattern2.global)</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.ignoreCase)</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.multiline)</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.source)</div><div class="line">&lt;!-- <span class="comment">// "\[bc\]at" --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>正则表达式文本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/i</span></div><div class="line">reg.source</div><div class="line">&lt;!-- <span class="comment">// "[a-z]" --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>只读布尔值，是否有修饰符g<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/i</span></div><div class="line">reg.global</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ignoreCase"><a href="#ignoreCase" class="headerlink" title="ignoreCase"></a>ignoreCase</h3><p>只读布尔值，是否有修饰符i<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/i</span></div><div class="line">reg.ignoreCase</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="multiline"><a href="#multiline" class="headerlink" title="multiline"></a>multiline</h3><p>只读布尔值，是否有修饰符m<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/i</span></div><div class="line">reg.multiline</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="lastIndex"><a href="#lastIndex" class="headerlink" title="lastIndex"></a>lastIndex</h3><p>下一次检索开始的位置，用于exec() 和 test()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span></div><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/.at/g</span></div><div class="line"><span class="keyword">var</span> matches = pattern1.exec(text)</div><div class="line">&lt;!-- [<span class="string">"cat"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"cat, bat, sat, fat"</span>] --&gt;</div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 3 --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span></div><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/.at/g</span></div><div class="line"><span class="keyword">var</span> matches = pattern1.test(text)</div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex)</div><div class="line">&lt;!-- <span class="comment">// 3 --&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="构造函数属性"><a href="#构造函数属性" class="headerlink" title="构造函数属性"></a>构造函数属性</h2><p><code>RegExp</code> 构造函数包含一些属性（这些属性在其他语言中被看成是静态属性）。这些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。关于这些属性的另一个独特之处，就是可以通过两种方式访问它们。换句话说，这些属性分别有一个长属性名和一个短属性名（Opera是例外，它不支持短属性名）。下表列出了RegExp构造函数的属性。</p>
<table>
<thead>
<tr>
<th>长属性名</th>
<th>短属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>input</td>
<td>$_</td>
<td>最近一次要匹配的字符串。Opera未实现此属性。</td>
</tr>
<tr>
<td>lastMatch</td>
<td>$&amp;</td>
<td>最近一次的匹配项。Opera未实现此属性。</td>
</tr>
<tr>
<td>lastParen</td>
<td>$+</td>
<td>最近一次匹配的捕获组。Opera未实现此属性。</td>
</tr>
<tr>
<td>leftContext</td>
<td>$`</td>
<td>input字符串中lastMatch之前的文本。</td>
</tr>
<tr>
<td>multiline</td>
<td>$*</td>
<td>布尔值，表示是否所有表达式都使用多行模式。IE和Opera未实现此属性。</td>
</tr>
<tr>
<td>rightContext</td>
<td>$’</td>
<td>Input字符串中lastMatch之后的文本。</td>
</tr>
</tbody>
</table>
<p>使用这些属性可以从 <code>exec()</code> 或 <code>test()</code> 执行的操作中提取出更具体的信息。请看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"this has been a short summer"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(.)hort/g</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 注意：Internet Explorer 不支持 multiline 属性</div><div class="line"> * Opera 不支持 input、lastMatch、lastParen 和 multiline 属性</div><div class="line"> */</div><div class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.input)</div><div class="line">    &lt;!-- <span class="comment">// this has been a short summer --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.leftContext)</div><div class="line">    &lt;!-- <span class="comment">// this has been a --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.rightContext)</div><div class="line">    &lt;!-- <span class="comment">// summer --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastMatch)</div><div class="line">    &lt;!-- <span class="comment">// short --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastParen)</div><div class="line">    &lt;!-- <span class="comment">// s --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.multiline)</div><div class="line">    &lt;!-- <span class="comment">// false --&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如前所述，例子使用的长属性名都可以用相应的短属性名来代替。只不过，由于这些短属性名大都不是有效的 JavaScript 标识符，因此必须通过方括号语法来访问它们，如下所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"this has been a short summer"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(.)hort/g</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 注意：Internet Explorer 不支持 multiline 属性</div><div class="line"> * Opera 不支持 input、lastMatch、lastParen 和 multiline 属性</div><div class="line"> */</div><div class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$_)</div><div class="line">    &lt;!-- <span class="comment">// this has been a short summer --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$`"</span>])</div><div class="line">    &lt;!-- <span class="comment">// this has been a --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$'"</span>])</div><div class="line">    &lt;!-- <span class="comment">// summer --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$&amp;"</span>])</div><div class="line">    &lt;!-- <span class="comment">// short --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$+"</span>])</div><div class="line">    &lt;!-- <span class="comment">// s --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$*"</span>])</div><div class="line">    &lt;!-- <span class="comment">// false --&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了上面介绍的几个属性之外，还有多达9个用于存储捕获组的构造函数属性。访问这些属性的语法是 <code>RegExp.$1</code>、<code>RegExp.$2</code>…<code>RegExp.$9</code>，分别用于存储第一、第二…第九个匹配的捕获组。在调用 <code>exec()</code> 或 <code>test()</code> 方法时，这些属性会被自动填充。然后，我们就可以像下面这样来使用它们。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"this has been a short summer"</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(..)or(.)/g</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>)</div><div class="line">    &lt;!-- <span class="comment">// sh --&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>)</div><div class="line">    &lt;!-- <span class="comment">// t --&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里创建了一个包含两个捕获组的模式，并用该模式测试了一个字符串。即使 <code>test()</code> 方法只返回一个布尔值，但 <code>RegExp</code> 构造函数的属性 <code>$1</code> 和 <code>$2</code> 也会被匹配相应捕获组的字符串自动填充。</p>
<h2 id="模式的局限性"><a href="#模式的局限性" class="headerlink" title="模式的局限性"></a>模式的局限性</h2><p>尽管 JavaScript 中的正则表达式功能还是比较完备的，但仍然缺少某些语言（特别是 Perl）所支持的高级正则表达式特性。下面列出了 JavaScript 正则表达式所不支持的特性。</p>
<ul>
<li>匹配字符串开始和结尾的\A和\Z锚</li>
<li>向后查找（lookbehind）</li>
<li>并集和交集类</li>
<li>原子组（atomic grouping）</li>
<li>Unicode支持（单个字符除外，如\uFFFF）</li>
<li>命名的捕获组</li>
<li>s（single，单行）和x（free-spacing，无间隔）匹配模式</li>
<li>条件匹配</li>
<li>正则表达式注释</li>
</ul>
<p>即使存在这些限制，JavaScript 正则表达式仍然是非常强大的，能够帮我们完成绝大多数模式匹配任务。</p>
<h1 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h1><h2 id="NFA引擎匹配原理"><a href="#NFA引擎匹配原理" class="headerlink" title="NFA引擎匹配原理"></a>NFA引擎匹配原理</h2><h2 id="环视-Lookaround"><a href="#环视-Lookaround" class="headerlink" title="环视(Lookaround)"></a>环视(Lookaround)</h2><p>环视只进行子表达式的匹配，不占有字符，匹配到的内容不保存到最终的匹配结果，是零宽度的。环视匹配的最终结果就是一个位置。</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>(?&lt;=Expression)</td>
<td>逆序肯定环视，表示所在位置左侧能够匹配Expression</td>
</tr>
<tr>
<td>(?&lt;!Expression)</td>
<td>逆序否定环视，表示所在位置左侧不能匹配Expression</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'aa&lt;p&gt;one&lt;/ps&gt;bb&lt;div&gt;two&lt;/div&gt;cc'</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/&lt;(?!\/?p\b)([^&gt;]+)&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">'('</span> + $<span class="number">1</span> + <span class="string">')'</span></div><div class="line">	&#125;))</div><div class="line">&lt;!-- <span class="comment">// aa&lt;p&gt;one(/ps)bb(div)two(/div)cc --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="回溯法原理"><a href="#回溯法原理" class="headerlink" title="回溯法原理"></a>回溯法原理</h2><p>正则表达式匹配字符串的这种方式，有个学名，叫回溯法也称试探法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">没有回溯</div><div class="line">str = <span class="string">"abbbc"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/ab&#123;1,3&#125;c/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abbbc", index: 0, input: "abbc"] --&gt;</span></div><div class="line"></div><div class="line">有回溯</div><div class="line">str = <span class="string">"abbc"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/ab&#123;1,3&#125;c/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abbc", index: 0, input: "abbc"] --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">分支结构</div><div class="line">str = <span class="string">"abbbc"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/ab&#123;1,3&#125;c/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abbbc", index: 0, input: "abbc"] --&gt;</span></div><div class="line"></div><div class="line">有回溯</div><div class="line">str = <span class="string">"abbc"</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/ab&#123;1,3&#125;c/</span>))</div><div class="line">&lt;!-- <span class="comment">// ["abbc", index: 0, input: "abbc"] --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="万能的‘正则’"><a href="#万能的‘正则’" class="headerlink" title="万能的‘正则’"></a>万能的‘正则’</h2><p>比如匹配这样的字符串:1010010001…。 虽然很有规律，但是只靠正则就是无能为力。<br>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串 API 解决的简单问题，就不该正则出马。</p>
<h3 id="日期选取"><a href="#日期选取" class="headerlink" title="日期选取"></a>日期选取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-07-01"</span>;</div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(regex));</div><div class="line"><span class="comment">// =&gt; ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-07-01"</span>;</div><div class="line"><span class="keyword">var</span> result = string.split(<span class="string">"-"</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">// =&gt; ["2017", "07", "01"]</span></div></pre></td></tr></table></figure>
<h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"?id=xx&amp;act=search"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.search(<span class="regexp">/\?/</span>));</div><div class="line"><span class="comment">// =&gt; 0</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> string = <span class="string">"?id=xx&amp;act=search"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.indexOf(<span class="string">"?"</span>));</div><div class="line"><span class="comment">// =&gt; 0</span></div></pre></td></tr></table></figure>
<h3 id="获取子串"><a href="#获取子串" class="headerlink" title="获取子串"></a>获取子串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"JavaScript"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(<span class="regexp">/.&#123;4&#125;(.+)/</span>)[<span class="number">1</span>]);</div><div class="line"><span class="comment">// =&gt; Script</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> string = <span class="string">"JavaScript"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.substring(<span class="number">4</span>));</div><div class="line"><span class="comment">// =&gt; Script</span></div></pre></td></tr></table></figure>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>提取出年、月、日，可以这么做:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(regex));</div><div class="line"><span class="xml"><span class="comment">&lt;!-- // =&gt; ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"] --&gt;</span></span></div><div class="line"></div><div class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</div><div class="line">var string = "2017-06-12";</div><div class="line">console.log(regex.exec(string));</div><div class="line"><span class="comment">&lt;!-- // =&gt; ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"] --&gt;</span></div><div class="line"></div><div class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</div><div class="line">var string = "2017-06-12";</div><div class="line">regex.test(string);</div><div class="line"><span class="comment">&lt;!-- // 正则操作即可，例如 //regex.exec(string); //string.match(regex); --&gt;</span></div><div class="line">console.log(RegExp.$1);</div><div class="line"><span class="comment">&lt;!-- // "2017" --&gt;</span></div><div class="line">console.log(RegExp.$2);</div><div class="line"><span class="comment">&lt;!-- // "06" --&gt;</span></div><div class="line">console.log(RegExp.$3);</div><div class="line"><span class="comment">&lt;!-- // "12" --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>想把 yyyy-mm-dd 格式，替换成 mm/dd/yyyy 怎么做</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</div><div class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="string">"$2/$3/$1"</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="xml"><span class="comment">&lt;!-- // =&gt; "06/12/2017" --&gt;</span></span></div><div class="line"></div><div class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</div><div class="line">var string = "2017-06-12";</div><div class="line"><span class="comment">&lt;!-- // =&gt; ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"] --&gt;</span></div><div class="line">var result = string.replace(regex, function () &#123;</div><div class="line">return RegExp.$2 + "/" + RegExp.$3 + "/" + RegExp.$1;</div><div class="line">&#125;);</div><div class="line">console.log(result);</div><div class="line">// =&gt; "06/12/2017"</div><div class="line"></div><div class="line">var regex = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;</div><div class="line">var string = "2017-06-12";</div><div class="line">var result = string.replace(regex, function (match, year, month, day) &#123;</div><div class="line">  return month + "/" + day + "/" + year;</div><div class="line">&#125;);</div><div class="line">console.log(result);</div><div class="line">// =&gt; "06/12/2017"</div></pre></td></tr></table></figure>
<h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战一：数字 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern1 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.test(<span class="string">'123'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.test(<span class="string">'abc'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战二：3位的数字 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.test(<span class="string">'123'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.test(<span class="string">'1234'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战三：至少3位的数字 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern3 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern3.test(<span class="string">'1234'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern3.test(<span class="string">'12'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战四：3-5位的数字 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern4 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern4.test(<span class="string">'1234'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern4.test(<span class="string">'1'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战五：由26个英文字母组成的字符串 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern5 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern5.test(<span class="string">'abc'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern5.test(<span class="string">'1abc'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战六：由数字和26个英文字母组成的字符串 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern6 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern6.test(<span class="string">'1abc'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern6.test(<span class="string">'_abc'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战七：日期格式：年-月-日 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern7 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern7.test(<span class="string">'2016-08-20'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern7.test(<span class="string">'2016/08/20'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战八：时间格式：小时:分钟, 24小时制 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern8 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern8.test(<span class="string">'13:45'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern8.test(<span class="string">'13点45'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// 挑战九：中国大陆身份证号，15位或18位 --&gt;</span></div><div class="line"><span class="keyword">var</span> pattern9 = <span class="literal">null</span></div><div class="line">&lt;!-- <span class="comment">// 补全该正则表达式 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern9.test(<span class="string">'4223222199901090033'</span>))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(pattern9.test(<span class="string">'asdfasdfasfasdf1234'</span>))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="匹配整数"><a href="#匹配整数" class="headerlink" title="匹配整数"></a>匹配整数</h3><p>注：就是像-3,-2,-1,0,1,2,3,10等这样的数。<br>-: 0-1</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?[1-9]*\d$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'Ubuntu 8'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div><div class="line">date = <span class="string">'213'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'-213'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'01'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div><div class="line">date = <span class="number">0</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div></pre></td></tr></table></figure>
<h3 id="匹配负浮点数"><a href="#匹配负浮点数" class="headerlink" title="匹配负浮点数"></a>匹配负浮点数</h3><p>注：必须负数，第一位1-9，点后面位随机数字，第一位为0，点后面要有个不为零的数字。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'-0.00000'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-0.1231231'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-1231213.1231231'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-.1231231'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-1.0001'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-1.000'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">date = <span class="string">'-1'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div></pre></td></tr></table></figure></p>
<h3 id="匹配浮点数"><a href="#匹配浮点数" class="headerlink" title="匹配浮点数"></a>匹配浮点数</h3><p>注：为了表示更大范围的数据，数学上通常采用科学计数法，把数据表示成一个小数乘以一个以10为底的指数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'0.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\&lt;(.*?)\&gt;/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'&lt;ps&gt;jdfjdsl&lt;/ps&gt;'</span></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<h3 id="匹配非负浮点数"><a href="#匹配非负浮点数" class="headerlink" title="匹配非负浮点数"></a>匹配非负浮点数</h3><p>注：正浮点数 + 0<br>(0.0是浮点数吗？浮点数是什么)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'0.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div></pre></td></tr></table></figure></p>
<h3 id="匹配非正浮点数"><a href="#匹配非正浮点数" class="headerlink" title="匹配非正浮点数"></a>匹配非正浮点数</h3><p>注：负浮点数 + 0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'0.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div></pre></td></tr></table></figure></p>
<h3 id="匹配HTML元素"><a href="#匹配HTML元素" class="headerlink" title="匹配HTML元素"></a>匹配HTML元素</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml">var reg = /\<span class="tag">&lt;<span class="name">(.*?)\</span>&gt;</span>/g</span></div><div class="line"></div><div class="line">var date = '<span class="tag">&lt;<span class="name">ps</span>&gt;</span>jdfjdsl<span class="tag">&lt;/<span class="name">ps</span>&gt;</span>dsfds'</div><div class="line">console.log(date.replace(reg, function ($0, $1) <span class="template-variable">&#123;</span></div><div class="line">	return '(' + $1 + ')'</div><div class="line">&#125;<span class="xml">))</span></div><div class="line"><span class="comment">&lt;!-- (ps)jdfjdsl(/ps)dsfds --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="验证密码问题"><a href="#验证密码问题" class="headerlink" title="验证密码问题"></a>验证密码问题</h3><p>密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var reg = /^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</div><div class="line"></div><div class="line">判断是否包含有某一种字符</div><div class="line">/(?=.*[<span class="number">0</span><span class="number">-9</span>])^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</div><div class="line"></div><div class="line">同时包含具体两种字符</div><div class="line">/(?=.*[<span class="number">0</span><span class="number">-9</span>])(?=.*[a-z])^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</div><div class="line"></div><div class="line"></div><div class="line">同时包含数字和小写字母</div><div class="line">同时包含数字和大写字母</div><div class="line">同时包含小写字母和大写字母</div><div class="line">同时包含数字、小写字母和大写字母</div><div class="line"></div><div class="line">var regex = /((?=.*[<span class="number">0</span><span class="number">-9</span>])(?=.*[a-z])|(?=.*[<span class="number">0</span><span class="number">-9</span>])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A- Z]))^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</div><div class="line">console.log(regex.test(<span class="string">"1234567"</span>) ) <span class="comment">// false 全是数字</span></div><div class="line">console.log(regex.test(<span class="string">"abcdef"</span>) ) <span class="comment">// false 全是小写字母</span></div><div class="line">console.log(regex.test(<span class="string">"ABCDEFGH"</span>) ) <span class="comment">// false 全是大写字母</span></div><div class="line">console.log(regex.test(<span class="string">"ab23C"</span>) ) <span class="comment">// false 不足6位</span></div><div class="line">console.log(regex.test(<span class="string">"ABCDEF234"</span>) ) <span class="comment">// true 大写字母和数字</span></div><div class="line">console.log(regex.test(<span class="string">"abcdEF234"</span>) ) <span class="comment">// true 三者都有</span></div><div class="line"></div><div class="line">“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</div><div class="line">var regex = /(?!^[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$)(?!^[a-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$)(?!^[A-Z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$)^[<span class="number">0</span><span class="number">-9</span>A-Za-z]&#123;<span class="number">6</span>,<span class="number">12</span>&#125;$/</div><div class="line">console.log(regex.test(<span class="string">"1234567"</span>) ) <span class="comment">// false 全是数字</span></div><div class="line">console.log(regex.test(<span class="string">"abcdef"</span>) ) <span class="comment">// false 全是小写字母</span></div><div class="line">console.log(regex.test(<span class="string">"ABCDEFGH"</span>) ) <span class="comment">// false 全是大写字母</span></div><div class="line">console.log(regex.test(<span class="string">"ab23C"</span>) ) <span class="comment">// false 不足6位</span></div><div class="line">console.log(regex.test(<span class="string">"ABCDEF234"</span>) ) <span class="comment">// true 大写字母和数字</span></div><div class="line">console.log(regex.test(<span class="string">"abcdEF234"</span>) ) <span class="comment">// true 三者都有</span></div></pre></td></tr></table></figure></p>
<h3 id="判断PDF后缀"><a href="#判断PDF后缀" class="headerlink" title="判断PDF后缀"></a>判断PDF后缀</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^.+\.pdf$/i</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'Ubuntu.pdf'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div></pre></td></tr></table></figure>
<h3 id="匹配中文字符"><a href="#匹配中文字符" class="headerlink" title="匹配中文字符"></a>匹配中文字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[\u4e00-\u9fa5]+$/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'京东方s'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div><div class="line"><span class="keyword">var</span> date = <span class="string">'京东方'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line"><span class="keyword">var</span> date = <span class="string">''</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div></pre></td></tr></table></figure>
<h3 id="两位小数"><a href="#两位小数" class="headerlink" title="两位小数"></a>两位小数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="keyword">var</span> reg = <span class="regexp">/^((?:-?0)|(?:-?[1-9]\d*))(?:\.\d&#123;1,2&#125;)?$/</span> --&gt;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?([1-9]\d*\.\d&#123;2&#125;|0\.[1-9]\d)$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'8.12'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'0.12'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'-100.12'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'00.120'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div><div class="line">date = <span class="string">'1.00'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">true</span> --&gt;</div><div class="line">date = <span class="string">'-12.0'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="literal">false</span> --&gt;</div></pre></td></tr></table></figure>
<h3 id="至少3位的数字"><a href="#至少3位的数字" class="headerlink" title="至少3位的数字"></a>至少3位的数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,&#125;$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'888'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div><div class="line"></div><div class="line">date = <span class="string">'88'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="中国邮政编码"><a href="#中国邮政编码" class="headerlink" title="中国邮政编码"></a>中国邮政编码</h3><p>注：中国邮政编码为6位数字，前两位数字表示省（直辖市，自治区）；前三位数字表示邮区；前四位数字表示县（市）；最后两位数字表示投递局（所）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d&#123;5&#125;$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'223805'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="验证帐号是否合法"><a href="#验证帐号是否合法" class="headerlink" title="验证帐号是否合法"></a>验证帐号是否合法</h3><p>注：字母、数字、下划线组成，字母开头，4-16位。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-z]\w&#123;3,15&#125;$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'Ubuntu8'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h3 id="更复杂的用法-使用子匹配"><a href="#更复杂的用法-使用子匹配" class="headerlink" title="更复杂的用法,使用子匹配"></a>更复杂的用法,使用子匹配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- // exec返回的数组第1到n元素中包含的是匹配中出现的任意一个子匹配   --&gt;</span></div><div class="line">re=/^[a-z]+\s+(\d+)$/i</div><div class="line"><span class="comment">&lt;!-- // 用()来创建子匹配   --&gt;</span></div><div class="line"></div><div class="line">arr =re.exec(date)</div><div class="line">console.log(arr[0])</div><div class="line"><span class="comment">&lt;!-- // 整个date,也就是正则表达式的完整匹配   --&gt;</span></div><div class="line"></div><div class="line">console.log(arr[1])</div><div class="line"><span class="comment">&lt;!-- // 8,第一个子匹配,事实也可以这样取出主版本号   --&gt;</span></div><div class="line"></div><div class="line">console.log(arr.length)</div><div class="line"><span class="comment">&lt;!-- // 2   --&gt;</span></div><div class="line"></div><div class="line">date = "Ubuntu 8.10"</div><div class="line"><span class="comment">&lt;!-- // 取出主版本号和次版本号   --&gt;</span></div><div class="line"></div><div class="line">re = /^[a-z]+\s+(\d+)\.(\d+)$/i</div><div class="line"><span class="comment">&lt;!-- // .是正则表达式元字符之一,若要用它的字面意义须转义   --&gt;</span></div><div class="line"></div><div class="line">arr = re.exec(date)</div><div class="line">console.log(arr[0])</div><div class="line"><span class="comment">&lt;!-- // 完整的date   --&gt;</span></div><div class="line"></div><div class="line">console.log(arr[1])</div><div class="line"><span class="comment">&lt;!-- // 8   --&gt;</span></div><div class="line"></div><div class="line">console.log(arr[2])</div><div class="line"><span class="comment">&lt;!-- // 10   --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匹配空行"><a href="#匹配空行" class="headerlink" title="匹配空行"></a>匹配空行</h3><p>注：匹配空白字符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="keyword">var</span> 空格 = <span class="regexp">/[ ]+/g</span> --&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[\s| ]+/g</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">' \r Ubuntu 8 \n '</span></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">','</span>))</div><div class="line">&lt;!-- ,Ubuntu,<span class="number">8</span>, --&gt;</div></pre></td></tr></table></figure></p>
<h3 id="匹配首尾空格"><a href="#匹配首尾空格" class="headerlink" title="匹配首尾空格"></a>匹配首尾空格</h3><p>注：匹配首空格和尾空格，空格有一个以上，肯能同时存在<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(^\s+)|(\s+$)/g</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">' Ubuntu 8 '</span></div><div class="line"><span class="built_in">console</span>.log(date.match(reg))</div><div class="line">&lt;!-- [<span class="string">""</span>, <span class="string">""</span>, <span class="literal">undefined</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"Ubuntu 8 "</span>] --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span>, $<span class="number">2</span></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$0'</span> + $<span class="number">0</span> + <span class="string">','</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$1'</span> + $<span class="number">1</span> + <span class="string">','</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'$2'</span> + $<span class="number">2</span> + <span class="string">','</span>)</div><div class="line">	<span class="keyword">return</span> <span class="string">','</span></div><div class="line">&#125;))</div><div class="line"><span class="built_in">console</span>.log(date.replace(reg, <span class="string">','</span>))</div></pre></td></tr></table></figure></p>
<h3 id="m-n位的数字"><a href="#m-n位的数字" class="headerlink" title="m~n位的数字"></a>m~n位的数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'8888'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,5&#125;$/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匹配非负整数"><a href="#匹配非负整数" class="headerlink" title="匹配非负整数"></a>匹配非负整数</h3><p>注：正确格式为：0 1 9 100<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'011'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0|[1-9][0-9]*)$/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// false --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="验证一年的12个月"><a href="#验证一年的12个月" class="headerlink" title="验证一年的12个月"></a>验证一年的12个月</h3><p>注：正确格式为：”01”～”09”和”1”～”12”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'01'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0?[1-9]|1[0-2])$/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div></pre></td></tr></table></figure></p>
<h3 id="IPV4-地址"><a href="#IPV4-地址" class="headerlink" title="IPV4 地址"></a>IPV4 地址</h3><p>注：提取ip地址时有用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'192.168.0.1'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([1-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))&#123;3&#125;$/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div></pre></td></tr></table></figure></p>
<h3 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h3><p>注：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Email : <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\\w+)*\.\w+([-.]\w+)*$/</span></div><div class="line">isEmail1 : <span class="regexp">/^\w+([\.\-]\w+)*\@\w+([\.\-]\w+)*\.\w+$/</span></div><div class="line">isEmail2 : <span class="regexp">/^.*@[^_]*$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'luuman@qq.com'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+(\.(com|cn|net|org|edu))&#123;1,2&#125;$/g</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line"></div><div class="line"><span class="keyword">var</span> date = <span class="string">'luuman@qq.com'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div></pre></td></tr></table></figure></p>
<h3 id="验证身份证号"><a href="#验证身份证号" class="headerlink" title="验证身份证号"></a>验证身份证号</h3><p><a href="https://jingyan.baidu.com/article/72ee561abd962fe16038df48.html" target="_blank" rel="external">第二代身份证号码编排规则</a><br>注：15位或18位数字（第二代身份证最后一位可能为X）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;15&#125;|\d&#123;17&#125;[\dxX])$/</span></div><div class="line"><span class="keyword">var</span> date = <span class="string">'32082519640706573X'</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Phone手机号码"><a href="#Phone手机号码" class="headerlink" title="Phone手机号码"></a>Phone手机号码</h3><p>注：只有13、15和18开头的11位手机号码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'18961856168'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^((13|18)(\d&#123;9&#125;))$|^(14[57]\d&#123;8&#125;)$|^(17[07]\d&#123;8&#125;)$|(^15[0-35-9]\d&#123;8&#125;$)/</span></div><div class="line">&lt;!-- <span class="comment">// var reg = /^[1][358]\d&#123;9&#125;$/; --&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div><div class="line">&lt;!-- <span class="comment">// true --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><p>注：https、http<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="string">'https://zhidao.baidu.com/'</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(http|https):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~`@[\]\':+!]*([^&lt;&gt;\"\"])*$/</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^http:/</span><span class="regexp">/ ([\w-]+\.)+[\w-]+(/</span>[\w-./?%&amp;=]*)?$/</div><div class="line"><span class="built_in">console</span>.log(reg.test(date))</div></pre></td></tr></table></figure></p>
<h3 id="驼峰化"><a href="#驼峰化" class="headerlink" title="驼峰化"></a>驼峰化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[-_\s]+(.)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log($<span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> $<span class="number">1</span> ? $<span class="number">1.</span>toUpperCase() : <span class="string">''</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(camelize(<span class="string">'-moz-transform'</span>))</div><div class="line">&lt;!-- MozTransform --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(camelize(<span class="string">'font-size'</span>))</div><div class="line">&lt;!-- fontSize --&gt;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(camelize(<span class="string">'font-'</span>))</div><div class="line">&lt;!-- font --&gt;</div></pre></td></tr></table></figure>
<h3 id="中划线化"><a href="#中划线化" class="headerlink" title="中划线化"></a>中划线化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dasherize</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/([A-Z])/g</span>, <span class="string">'-$1'</span>).replace(<span class="regexp">/[-_\s]+/g</span>, <span class="string">'-'</span>).toLowerCase();</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( dasherize(<span class="string">'MozTransform'</span>) );</div><div class="line"><span class="xml"><span class="comment">&lt;!-- // =&gt; "-moz-transform" --&gt;</span></span></div><div class="line"></div><div class="line">console.log( dasherize('Moz_Transform') );</div><div class="line"><span class="comment">&lt;!-- // =&gt; "-moz-transform" --&gt;</span></div><div class="line"></div><div class="line">console.log( dasherize('Moz Transform') );</div><div class="line"><span class="comment">&lt;!-- // =&gt; "-moz-transform" --&gt;</span></div></pre></td></tr></table></figure>
<!-- ### HTML 转义和反转义

// 将HTML特殊字符转换成等值的实体
function escapeHTML (str) {
    var escapeChars = {
      '<' : 'lt',
      '>' : 'gt',
      '"' : 'quot',
        '&' : 'amp',
      '\'' : '#39'
    }
  return str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'), function (match) {
      return '&' + escapeChars[match] + ';'
  })
}
console.log( escapeHTML('<div>Blah blah blah</div>') )
// => "&lt;div&gt;Blah blah blah&lt;/div&gt"

function unescapeHTML (str) {
      var htmlEntities = {
        nbsp: ' ',
        lt: '<',
        gt: '>',
        quot: '"',
        amp: '&',
        apos: '\''
      };
      return str.replace(/\&([^;]+);/g, function (match, key) {
          if (key in htmlEntities) {
              return htmlEntities[key];
          }
          return match;
      });
  }
  console.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );
  // => "<div>Blah blah blah</div>"

--> 
<h3 id="匹配成对标签"><a href="#匹配成对标签" class="headerlink" title="匹配成对标签"></a>匹配成对标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/&lt;([^&gt;]+)&gt;[\d\D]*&lt;\/\1&gt;/</span>;</div><div class="line"><span class="keyword">var</span> string1 = <span class="string">"&lt;title&gt;regular expression&lt;/title&gt;"</span>;</div><div class="line"><span class="keyword">var</span> string2 = <span class="string">"&lt;p&gt;laoyao bye bye&lt;/p&gt;"</span>;</div><div class="line"><span class="keyword">var</span> string3 = <span class="string">"&lt;title&gt;wrong!&lt;/p&gt;"</span>;</div><div class="line"><span class="built_in">console</span>.log( regex.test(string1) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( regex.test(string2) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( regex.test(string3) ); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="千位分隔符-js-实现"><a href="#千位分隔符-js-实现" class="headerlink" title="千位分隔符(js 实现)"></a>千位分隔符(js 实现)</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>匹配内容进行替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thousandBitSeparator</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num &amp;&amp; <span class="built_in">Number</span>(num)</div><div class="line">    .toString()</div><div class="line">    .replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+(\.|$))/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">","</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">-1234567.901</span>))</div><div class="line">&lt;!-- <span class="comment">// -1,234,567.901 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">-1234567</span>))</div><div class="line">&lt;!-- <span class="comment">// -1,234,567 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">0</span>))</div><div class="line">&lt;!-- <span class="comment">// 0 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">100000000000</span>))</div><div class="line">&lt;!-- <span class="comment">// 100,000,000,000 --&gt;</span></div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">.111</span>))</div><div class="line">&lt;!-- <span class="number">0.111</span> --&gt;</div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="string">'...'</span>))</div><div class="line">&lt;!-- <span class="literal">NaN</span> --&gt;</div></pre></td></tr></table></figure></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>通过匹配位置来判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 弄出最后一个逗号 --&gt;</div><div class="line"><span class="regexp">/(?=\d&#123;3&#125;$)/g</span></div><div class="line"><span class="comment">// =&gt; 12345,678</span></div><div class="line"></div><div class="line">&lt;!-- 弄出所有的逗号 --&gt;</div><div class="line"><span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span></div><div class="line"><span class="comment">// =&gt; 12,345,678</span></div><div class="line"><span class="comment">// =&gt; ,123,456,789</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> string = <span class="string">'12345678 123456789'</span>,</div><div class="line">regex = <span class="regexp">/(?!\b)(?=(\d&#123;3&#125;)+\b)/g</span></div><div class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="string">','</span>)</div><div class="line"><span class="built_in">console</span>.log(result)</div><div class="line"><span class="comment">// =&gt; 12,345,678 123,456,789</span></div><div class="line"></div><div class="line">条件：两位小数的数字 =&gt; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num.toFixed(<span class="number">2</span>).replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+\b)/g</span>, <span class="string">','</span>).replace(<span class="regexp">/^/</span>, <span class="string">'$$ '</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(format(<span class="number">1888</span>))</div><div class="line"><span class="comment">// =&gt; $ 1,888.00</span></div></pre></td></tr></table></figure></p>
<h2 id="支持2-10位的汉字或数字的正则表达式（还包含汉字和数字混合哦）"><a href="#支持2-10位的汉字或数字的正则表达式（还包含汉字和数字混合哦）" class="headerlink" title="支持2-10位的汉字或数字的正则表达式（还包含汉字和数字混合哦）"></a>支持2-10位的汉字或数字的正则表达式（还包含汉字和数字混合哦）</h2><p>数字 0-9<br>汉子 \u4e00-\u9fa5：这两个unicode值正好是Unicode表中的汉字的头和尾。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/^([0-9\u4e00-\u9fa5]&#123;2,10&#125;)$/</span>;</div><div class="line"><span class="keyword">var</span> string1 = <span class="string">"210位的汉字"</span>;</div><div class="line"><span class="keyword">var</span> string2 = <span class="string">"210"</span>;</div><div class="line"><span class="keyword">var</span> string3 = <span class="string">"210位的汉字eff"</span>;</div><div class="line"><span class="built_in">console</span>.log( regex.test(string1) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( regex.test(string2) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( regex.test(string3) ); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4304651" title="讲解不错的正则匹配原理，匹配原则" target="_blank" rel="external">正则基础之——NFA引擎匹配原理</a></li>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4304754" target="_blank" rel="external">正则基础之——环视</a></li>
<li><a href="http://www.cnblogs.com/rubylouvre/archive/2010/03/09/1681222.html" target="_blank" rel="external">javascript正则表达式</a></li>
<li><a href="https://github.com/zeeshanu/learn-regex/blob/master/README-cn.md" target="_blank" rel="external">什么是正则表达式?</a></li>
<li><a href="https://regexper.com/" target="_blank" rel="external">正则表达式的图形工具</a></li>
<li><a href="http:// www.cnblogs.com/aaronjs/archive/2012/06/30/2570970.html" title="newraina" target="_blank" rel="external">精通JS正则表达式</a></li>
<li><a href="https://smohan.im/blog/3g3lh0" target="_blank" rel="external">JAVASCRIPT学习笔记之正则表达式</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex-1.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000" target="_blank" rel="external">廖雪峰官网学习</a></li>
<li><a href="https://jex.im/regulex/#!embed=false&amp;flags=&amp;re=%3C(%3F!%5C%2F%3Fp%5Cb" target="_blank" rel="external">可视化图片</a>(%5B%5E%3E%5D%2B)%3E “”)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个个音符杂乱无章的组合在一起，弹奏出的或许就是噪音，同样的音符经过作曲家的手，就可以谱出非常动听的乐曲，一个演奏者同样可以照着乐谱奏出动听的乐曲，但他/她或许不知道该如何去改变音符的组合，使得乐曲更动听。&lt;br&gt;作为正则的使用者也一样，不懂正则引擎原理的情况下，同样可以写出满足需求的正则，但是不知道原理，却很难写出高效且没有隐患的正则。所以对于经常使用正则，或是有兴趣深入学习正则的人，还是有必要了解一下正则引擎的匹配原理的。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://luuman.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://luuman.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Introduction 简介</title>
    <link href="http://luuman.github.io/2018/02/25/Induce/JavaScript/Base/1.1-Introduction/"/>
    <id>http://luuman.github.io/2018/02/25/Induce/JavaScript/Base/1.1-Introduction/</id>
    <published>2018-02-25T10:29:00.000Z</published>
    <updated>2018-03-13T03:04:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript是面向Web的编程语言，绝大多数现代网站都使用了JavaScript，并且所有的现代Web浏览器（电脑，手机，平板）均包含了JavaScript解释器。<br>这使得JavaScript能够称得上史上使用最广泛的编程语言。JavaScript也是前端开发工程师必须掌握的三种技能之一：描述网页内容的HTML、描述网页样式的CSS、以及描述网页行为的JavaScript。<br><a id="more"></a></p>
<h1 id="JavaScript-起源"><a href="#JavaScript-起源" class="headerlink" title="JavaScript 起源"></a>JavaScript 起源</h1><p>JavaScript 从一个简单的输入验证器发展成为一门强大的编程语言，完全出乎人们的意料。<br>应该说，它既是一门非常简单的语言，又是一门非常复杂的语言。说它简单，是因为学会使用它只需片刻功夫；而说它复杂，是因为要真正掌握它则需要数年时间。</p>
<h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><ol>
<li>JavaScript是一门动态的、弱类型的、面向对象的、解释型的编程语言，非常适合面向对象和函数式的编程风格。</li>
<li>JavaScript的语法来自于Java</li>
<li>它的一等函数（first-classfunction）来自于Scheme，它的基于原型（prototype-based）的继承来自于Self。</li>
<li>但学习本课程不必去了解那些（Java/Scheme/Slef）语言或熟悉那些术语。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>更少的服务器交互</li>
<li>即时反馈给访问者</li>
<li>增加互动性</li>
<li>丰富的接口</li>
</ol>
<h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><p>往往不独立使用，要和HTML/jsp/php/asp/asp.net配合使用，脚本语言有自己的变量、函数、控制语句（顺序、分支、循环）等。</p>
<h3 id="编译语言"><a href="#编译语言" class="headerlink" title="编译语言"></a>编译语言</h3><p>Java程序 === .java → .class（编译） → jvm执行</p>
<h3 id="解释性语言"><a href="#解释性语言" class="headerlink" title="解释性语言"></a>解释性语言</h3><p>JS脚本 → 浏览器（JS引擎解释）</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>相比编译语言翻译成机器语言（字节码、二进制码）效率高。</p>
<h1 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h1><h2 id="ECMA"><a href="#ECMA" class="headerlink" title="ECMA"></a>ECMA</h2><p>欧洲计算机制造商协会（ECMA，European Computer Manufactures Association）<br>定义了名为ECMAScript（发音为 ek-ma-script）的脚本语言标准，它是通用的，与平台无关的语言标准。自此以后，浏览器开发商开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础。虽然基础相同，但具体实现在不同浏览器上却略有差异。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ol>
<li>核心（ECMAScript），由 ECMA-262 定义，提供核心语言功能。</li>
<li>文档对象模型（DOM），提供访问和操作网页内容的方法和接口。</li>
<li>浏览器对象模型（BOM），提供与浏览器交互的方法和接口。</li>
</ol>
<p>在当前5个主要浏览器（IE、FireFox、Chrome、Safari 和 Opera）中都得到了不同程度的支持。<br>其中，所有浏览器对 ECMAScript 3 版本的支持大体上都还不错，而对 ECMAScript 5 的支持程度越来越高，但对 DOM 的支持则彼此相差比较多。<br>对于已经正式纳入 HTML5 标准的 BOM 来说，尽管各浏览器都实现了某些众所周知的共同特性，但其他特性还是会因浏览器而异。</p>
<ul>
<li><a href="http://www.ecma-international.org/ecma-262/5.1/" target="_blank" rel="external">Standard ECMA-262 5.1 Edition</a></li>
<li><a href="http://caniuse.mojijs.com/Home/Html/item/key/es5/index.html" target="_blank" rel="external">ECMAScript 5 浏览器兼容一览表</a></li>
</ul>
<h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><ol>
<li>ECMAScript 标准由 语法、数据类型、语句、关键字、保留字、运算符、对象 组成。</li>
<li>它与 Web 浏览器没有任何依赖关系，并且这门语言本身并不包含输入和输出定义。</li>
<li>ECMAScript 定义的只是这门语言的基础，而在此基础之上可以构建更完善的脚本语言。</li>
</ol>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Web浏览器只是ECMAScript 实现的宿主环境之一，其他宿主环境包括 Node 和 Adobe Flash。<br>宿主环境不仅提供基本的 ECMAScript 实现，同时也会提供该语言的扩展（例如：DOM、BOM），这些扩展则利用 ECMAScript 的核心类型和语法提供更多更具体的功能。</p>
<p>JavaScript 是 Web 浏览器对 ECMAScript 标准的实现，ActionScript 是 Adobe Flash 对 ECMAScript 标准的实现。</p>
<h4 id="ECMAScript历史"><a href="#ECMAScript历史" class="headerlink" title="ECMAScript历史"></a>ECMAScript历史</h4><ol>
<li>1997年，ECMAScript 1 版发布。</li>
<li>1998年6月，ECMAScript 2 版发布。</li>
<li>1999年12月，ECMAScript 3 版发布。</li>
<li>2000年，ECMAScript 4 开始酝酿，最终这个版本没有通过。</li>
<li>2009年12月，ECMAScript 5 版发布。</li>
<li>2011年6月，ECMAscript 5.1 版发布，成为国际标准。</li>
<li>2015年6月，ECMAScript 6 正式通过，成为国际标准。</li>
<li>ECMAScript 2017</li>
</ol>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">ECMAScript 6入门</a></li>
<li><a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="external">ECMAScript 2017</a></li>
</ul>
<blockquote>
<p>注：<br>3.0版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学3.0版的语法。</p>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>文档对象模型（DOM，Document Object Model）<br>是用于HTML的应用程序编程接口（API），它把整个页面映射为一个多层节点结构。HTML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。看下面这个HTML页面：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>DOM节点层次图<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span></div><div class="line">	head</div><div class="line">		meta</div><div class="line">		title</div><div class="line">	<span class="selector-tag">body</span></div><div class="line">		<span class="selector-tag">h1</span></div><div class="line">		<span class="selector-tag">p</span></div><div class="line">			span</div></pre></td></tr></table></figure></p>
<p>通过 DOM 创建的这个表示文档的树形图，开发人员获得了控制页面内容和结构的主动权。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</p>
<blockquote>
<p>注：<br>由于Netscape和微软实现的DOM互不兼容，负责制定Web通信标准的W3C（World Wide Web Consortium，万维网联盟）开始着手规划 DOM。</p>
</blockquote>
<h4 id="DOM1-级"><a href="#DOM1-级" class="headerlink" title="DOM1 级"></a>DOM1 级</h4><p>DOM 核心：映射文档结构，简化对文档中任意部分的操作和访问。<br>DOM HTML：在 DOM 核心的基础上，添加了针对 HTML 的对象和方法。</p>
<h4 id="DOM2-级"><a href="#DOM2-级" class="headerlink" title="DOM2 级"></a>DOM2 级</h4><p>DOM 视图：定义了跟踪不同文档视图的接口。<br>DOM 事件：定义了事件和事件处理的接口。<br>DOM 样式：定义了基于 CSS 伪元素应用样式的接口。<br>DOM 遍历和范围：定义了遍历和操作文档树的接口。</p>
<h4 id="DOM3-级"><a href="#DOM3-级" class="headerlink" title="DOM3 级"></a>DOM3 级</h4><p>DOM 加载和保存：引入了以统一方式加载和保存文档的方法。<br>DOM 验证：新增了验证文档的方法。<br>DOM 核心扩展。</p>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>浏览器对象模型（BOM，Browser Object Model）<br>是用于浏览器的应用程序编程接口（API），它把整个浏览器窗口映射为一个对象。<br>从根本上讲，BOM 只处理浏览器窗口和框架，但人们习惯上也把所有针对浏览器的 JavaScript 扩展算作 BOM 的一部分，</p>
<p>例如：</p>
<ol>
<li>弹出新浏览器窗口的功能。</li>
<li>移动、缩放和关闭浏览器窗口的功能。</li>
<li>提供浏览器详细信息的 navigator 对象。</li>
<li>提供浏览器所加载页面的详细信息的 localtion 对象。</li>
<li>提供用户显示器分辨率详细信息的 screen 对象。</li>
<li>对 cookies 的支持。</li>
<li>XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象。</li>
</ol>
<blockquote>
<p>注：<br>BOM 最让人头疼的是没有相关的规范和标准，每个浏览器都有独有的实现，这个问题在 HTML5 中得到了解决.<br>HTML5 致力于把很多 BOM 功能写入正式规范。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript是面向Web的编程语言，绝大多数现代网站都使用了JavaScript，并且所有的现代Web浏览器（电脑，手机，平板）均包含了JavaScript解释器。&lt;br&gt;这使得JavaScript能够称得上史上使用最广泛的编程语言。JavaScript也是前端开发工程师必须掌握的三种技能之一：描述网页内容的HTML、描述网页样式的CSS、以及描述网页行为的JavaScript。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://luuman.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://luuman.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git Workflows</title>
    <link href="http://luuman.github.io/2017/08/29/Tool/GitWorkflows/"/>
    <id>http://luuman.github.io/2017/08/29/Tool/GitWorkflows/</id>
    <published>2017-08-29T06:11:20.000Z</published>
    <updated>2017-08-01T08:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>随着团队不断的壮大，业务流程迭代。代码工作流的规范是显而易见的。为了保证开发速度，我们不断改进完善这个发布流程，让这个过程更简单、高效。<br>这篇指南以大家在SVN中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的Pull Request功能，体系地讲解了各种工作流的应用。<br>在阅读过程中，请记住这些工作流是指导原则，而不是具体规则。我们想向您展示什么是可能的，因此您可以混合和匹配来自不同工作流的方面，以满足您的个人需求。</p>
<p>常见问题：</p>
<ol>
<li>我们以使用SVN的工作流来使用Git有什么不妥？</li>
<li>如何控制开发版本？</li>
<li>Git方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？</li>
<li>经典的master-发布、develop-主开发、hotfix-bug修复如何避免代码不经过验证上线？</li>
<li>如何在GitHub上面与他人一起协作，star-fork-pull request是怎样的流程？<a id="more"></a>
</li>
</ol>
<h1 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h1><p>集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk ，Git 叫做master，所有修改提交到这个分支上。本工作流只用到 master 这一个分支。<br><img src="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflow-svn.png" alt="集中式工作流"></p>
<h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>要发布修改到正式项目中，开发者要把本地 master 分支的修改『推』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。</p>
<p><img src="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflow-svn-push-local.png" alt="push"></p>
<h1 id="Gitflow工作流"><a href="#Gitflow工作流" class="headerlink" title="Gitflow工作流"></a>Gitflow工作流</h1><!-- ![Git Workflows](http://nvie.com/img/git-model@2x.png) -->
<p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。<br><!-- ![Gitflow](http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflows-gitflow.png) --></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>健壮的用于管理大型项目的框架</li>
<li>分支分配明确</li>
<li>功能分支，在做准备、维护和记录发布也使用各自的分支</li>
</ol>
<h2 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h2><p>Gitflow工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并push分支到要中央仓库中。</p>
<p>分支命名：<code>master</code>版本、<code>develop</code>开发、<code>release-*</code>发布、<code>feature-*</code>功能、<code>hotfix-*</code>修复</p>
<blockquote>
<p>特点</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── <span class="keyword">master</span></div><div class="line">	<span class="title">├── hotfix-</span>*</div><div class="line">	├── release-*</div><div class="line">	├── develop</div><div class="line">		├── hotfix-*</div><div class="line">		├── release-*</div><div class="line">		├── feature-*</div></pre></td></tr></table></figure>
<p><img src="https://wac-cdn.atlassian.com/dam/jcr:21cf772d-2ba5-4686-8259-fcd6fd2311df/05.svg?cdnVersion=fn" alt="维护分支"></p>
<h3 id="master版本分支"><a href="#master版本分支" class="headerlink" title="master版本分支"></a>master版本分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:e3bd4199-27ac-4bac-a5d2-3ff0fdb112d3/01.svg?cdnVersion=fn" alt=""><br>正式发布历史分支：用于管理发布的版本，发布Tag</p>
<h3 id="develop开发分支"><a href="#develop开发分支" class="headerlink" title="develop开发分支"></a>develop开发分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:2e2315b0-d79a-403f-a981-4cb94599df1f/02.svg?cdnVersion=fn" alt=""><br>功能的集成分支：用于开发项目</p>
<h3 id="feature功能分支"><a href="#feature功能分支" class="headerlink" title="feature功能分支"></a>feature功能分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:9f149cef-f784-43de-8207-3e7968789a1f/03.svg?cdnVersion=fn" alt=""><br>功能分支：每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。<br>新功能提交应该从不直接与master分支交互，</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于master分支，而是应该基于develop分支进行开发<br><img src="https://wac-cdn.atlassian.com/dam/jcr:57829b6b-1e6d-40ea-a15a-1a2fe6bf80f6/07.svg?cdnVersion=fn" alt=""></p>
<h5 id="创建feature分支"><a href="#创建feature分支" class="headerlink" title="创建feature分支"></a>创建feature分支</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- develop分支 --&gt;</span></div><div class="line">$ git checkout develop</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 创建dev分支并切换 --&gt;</span></div><div class="line">$ git checkout -b feature-dev</div><div class="line">Switched to branch 'feature-dev'</div><div class="line"></div><div class="line">=&gt;</div><div class="line"><span class="comment">&lt;!-- 以develop创建dev分支并切换 --&gt;</span></div><div class="line">git checkout -b feature-dev develop</div></pre></td></tr></table></figure>
<h5 id="编辑、暂存、提交"><a href="#编辑、暂存、提交" class="headerlink" title="编辑、暂存、提交"></a>编辑、暂存、提交</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"branch"</span></span></div><div class="line">[feature-dev fec145a] branch</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"><span class="meta">$</span><span class="bash"> git push</span></div></pre></td></tr></table></figure>
<h5 id="完成合并"><a href="#完成合并" class="headerlink" title="完成合并"></a>完成合并</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 拉取develop代码并合并 --&gt;</span></div><div class="line">$ git pull origin develop</div><div class="line">$ git checkout develop</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 合并指定分支到feature-dev分支 --&gt;</span></div><div class="line">$ git merge feature-dev</div><div class="line">$ git push</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除分支 --&gt;</span></div><div class="line">$ git branch -d feature-dev</div></pre></td></tr></table></figure>
<h3 id="release发布分支"><a href="#release发布分支" class="headerlink" title="release发布分支"></a>release发布分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:3555a856-675e-453a-b49d-ba60667809e1/04.svg?cdnVersion=fn" alt=""><br>发布分支：用于发布准备的专门分支。<br>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。<br>一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。</p>
<h3 id="hotfixes修复分支"><a href="#hotfixes修复分支" class="headerlink" title="hotfixes修复分支"></a>hotfixes修复分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:21cf772d-2ba5-4686-8259-fcd6fd2311df/05.svg?cdnVersion=fn" alt=""><br>维护分支：用于生成快速给产品发布版本。<br>这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。</p>
<p>Gitflow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。 除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。 当然你可以用上功能分支工作流所有的好处：Pull Requests 、隔离实验性开发和更高效的协作。</p>
<h1 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h1><p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。</p>
<h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><h2 id="大幅度"><a href="#大幅度" class="headerlink" title="大幅度"></a>大幅度</h2><ul>
<li><a href="http://blog.jobbole.com/76867/#comment-156726" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank" rel="external">Comparing Workflows</a></li>
</ul>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul>
<li><a href="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/" target="_blank" rel="external">Git 工作流指南</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" title="成功的Git分支模型" target="_blank" rel="external">A successful Git branching model</a></li>
<li><a href="https://tech.meituan.com/improving-git-flow_squashing-commits.html" target="_blank" rel="external">改进合作 Git 工作流：自动提取、合并提交</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" title="工作流比较" target="_blank" rel="external">Comparing Workflows</a></li>
<li><a href="https://github.com/xirong/my-git/" title="有关 git 的学习资料" target="_blank" rel="external">my-git</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;随着团队不断的壮大，业务流程迭代。代码工作流的规范是显而易见的。为了保证开发速度，我们不断改进完善这个发布流程，让这个过程更简单、高效。&lt;br&gt;这篇指南以大家在SVN中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的Pull Request功能，体系地讲解了各种工作流的应用。&lt;br&gt;在阅读过程中，请记住这些工作流是指导原则，而不是具体规则。我们想向您展示什么是可能的，因此您可以混合和匹配来自不同工作流的方面，以满足您的个人需求。&lt;/p&gt;
&lt;p&gt;常见问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们以使用SVN的工作流来使用Git有什么不妥？&lt;/li&gt;
&lt;li&gt;如何控制开发版本？&lt;/li&gt;
&lt;li&gt;Git方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？&lt;/li&gt;
&lt;li&gt;经典的master-发布、develop-主开发、hotfix-bug修复如何避免代码不经过验证上线？&lt;/li&gt;
&lt;li&gt;如何在GitHub上面与他人一起协作，star-fork-pull request是怎样的流程？
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="http://luuman.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript FirstExploration 初探</title>
    <link href="http://luuman.github.io/2017/08/25/Induce/JavaScript/Base/1.2-FirstExploration/"/>
    <id>http://luuman.github.io/2017/08/25/Induce/JavaScript/Base/1.2-FirstExploration/</id>
    <published>2017-08-25T10:29:00.000Z</published>
    <updated>2018-03-13T03:04:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>当学习一门新的编程语言的时候，应该边学边做，反复演练以加深理解。<br>因此，你需要一个 JavaScript 解释器。幸运的是，每一个 Web 浏览器都包含一个 JavaScript 解释器。<br><a id="more"></a></p>
<blockquote>
<p>注：<br>现代浏览器可以使用函数 console.log() 来向控制台输出消息，通过这种方式可以非常方便地调试代码。</p>
</blockquote>
<h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><p>三种加载时间不同</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1、头部：在<span class="tag">&lt;<span class="name">head</span>&gt;</span>区域中，在页面被载入之前，脚本已经载入，准备好被调用。（放置：函数代码）</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">2、内部：在<span class="tag">&lt;<span class="name">body</span>&gt;</span>区域中，在页面载入时，脚本被载入并立即执行。放置函数不会立即执行，只用调用时才执行，而且必须脚本成功加载完成之后，才能正确调用函数。</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">3、外部：在外部引用JavaScript，以.js为扩展名的文件中，在HTML页面中链接到这个脚本文件，不同的位置决定加载时机。</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"xxx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">4、输出</div><div class="line">JavaScript通常用来操作HTML，文档输出：</div><div class="line">document.write("<span class="tag">&lt;<span class="name">p</span>&gt;</span>this is my first JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span>");</div></pre></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript-lesson-1.2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/layer.css"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 开启页面加载效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/layer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">layer.open(&#123; type: <span class="number">2</span>, shadeClose: <span class="literal">false</span> &#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 关闭页面加载效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; layer.closeAll(); &#125;,<span class="number">500</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入 10MB 外部 JavaScript，比较耗时 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/external.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    本页面用来测试 &amp;lt;script&amp;gt; 加载顺序~</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="挑战一"><a href="#挑战一" class="headerlink" title="挑战一"></a>挑战一</h3><p>实现打开页面就能看到网页内容「本页面用来测试  &lt;script&gt;  加载顺序~」，不必等外部 JavaScript 文件全部下载完毕才显示。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript-lesson-1.2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/layer.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 开启页面加载效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/layer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">layer.open(&#123; type: <span class="number">2</span>, shadeClose: <span class="literal">false</span> &#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    本页面用来测试 &amp;lt;script&amp;gt; 加载顺序~</div><div class="line">    <span class="comment">&lt;!-- 关闭页面加载效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; layer.closeAll(); &#125;,<span class="number">500</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入 10MB 外部 JavaScript，比较耗时 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://qiniu.shijiajie.com/blog/javascript-lesson/1.2/external.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>可选。表示包含要执行代码的外部文件。</p>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>可选。可以看成是language 的替代属性；表示编写代码使用的脚本语言的内容类型（也称为MIME 类型）。<br>虽然text/javascript 和text/ecmascript 都已经不被推荐使用，但人们一直以来使用的都还是text/javascript。<br>实际上，服务器在传送JavaScript 文件时使用的MIME 类型通常是application/x–javascript，但在type 中设置这个值却可能导致脚本被忽略。<br>另外，在非IE浏览器中还可以使用以下值：application/javascript 和application/</p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>可选。立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本。只对外部脚本文件有效。</p>
<h2 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h2><p>可选。表示通过src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。</p>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>可选。脚本可延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。IE7 及更早版本对嵌入脚本也支持这个属性。</p>
<h2 id="language（已废弃）"><a href="#language（已废弃）" class="headerlink" title="language（已废弃）"></a>language（已废弃）</h2><p>原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。</p>
<blockquote>
<p>注：<br>在 HTML5 规范中，<script> 的 type 属性默认是 “text/javascript”，所以可以省略；<br>但是在 HTML 4.01 和 XHTML 1.0 规范中，type 属性是必须的。</p>
</blockquote>
<p>可以参考 Stack Overflow 上的回答：</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/4243577/which-is-better-script-type-text-javascript-script-or-script-scr">stackoverflow</a></p>
</li>
<li><p><a href="&quot;&quot;"></a></p>
</li>
</ul>
</script></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当学习一门新的编程语言的时候，应该边学边做，反复演练以加深理解。&lt;br&gt;因此，你需要一个 JavaScript 解释器。幸运的是，每一个 Web 浏览器都包含一个 JavaScript 解释器。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://luuman.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://luuman.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git速查手册</title>
    <link href="http://luuman.github.io/2017/08/19/Tool/Git/"/>
    <id>http://luuman.github.io/2017/08/19/Tool/Git/</id>
    <published>2017-08-19T06:11:20.000Z</published>
    <updated>2017-08-16T05:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>打开控制台，然后通过包管理安装，在Ubuntu上命令是：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install git-<span class="built_in">all</span></div></pre></td></tr></table></figure></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>推荐使用git for<br>windows，它包括了图形工具以及命令行模拟器。</p>
<h2 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h2><p>最简单的方式是使用homebrew安装，命令行执行<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure></p>
<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。<br><a id="more"></a></p>
<ul>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
<h1 id="Git-术语"><a href="#Git-术语" class="headerlink" title="Git 术语"></a>Git 术语</h1><table>
<thead>
<tr>
<th>术语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>仓库（Repository）</td>
<td>一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。</td>
</tr>
<tr>
<td>分支（Branches）</td>
<td>一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。你可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。用户可以选择一个分支，选择一个分支执行命令git checkout branch.</td>
</tr>
<tr>
<td>标记（Tags）</td>
<td>一个标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态，例如2009年1月25号在testing分支上的代码状态</td>
</tr>
<tr>
<td>提交（Commit）</td>
<td>提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。每次提交都包括作者和提交者，作者和提交者可以是不同的人</td>
</tr>
<tr>
<td>修订（Revision）</td>
<td>用来表示代码的一个版本状态。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串.。最新的版本可以通过HEAD来获取。之前的版本可以通过”HEAD~1”来获取，以此类推。</td>
</tr>
</tbody>
</table>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在当前目录新建一个Git代码库 --&gt;</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个目录，将其初始化为Git代码库 --&gt;</span></div><div class="line">$ git init [project-name]</div></pre></td></tr></table></figure>
<h2 id="复制远程仓库"><a href="#复制远程仓库" class="headerlink" title="复制远程仓库"></a>复制远程仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下载一个项目和它的整个代码历史 --&gt;</span></div><div class="line">$ git clone [url]</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置账号信息"><a href="#配置账号信息" class="headerlink" title="配置账号信息"></a>配置账号信息</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 设置提交代码时的用户信息 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"My Name"</span></div><div class="line">$ git<span class="built_in"> config </span>--global user.email myEmail@example.com</div><div class="line"></div><div class="line">&lt;!-- 显示仓库的Git配置 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>--list</div><div class="line"></div><div class="line">&lt;!-- 编辑Git配置文件 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>-e [--global]</div></pre></td></tr></table></figure></p>
<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>
<h3 id="生成SSH秘钥"><a href="#生成SSH秘钥" class="headerlink" title="生成SSH秘钥"></a>生成SSH秘钥</h3><p>用于上传到你对应的github账号<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C "mail@gmail.com"</div><div class="line"><span class="comment">&lt;!-- 这的密码不是我们GitHub的密码，而是Git SSH的密码 --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 打开Git生成的密码文件，将其复制到GitHub上 --&gt;</span></div><div class="line">$ vim ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 验证GitHub SSH是否成功 --&gt;</span></div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h2><p><img src="http://img.blog.csdn.net/20161219162011600?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDM0NjMwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="提交流程"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git pull</span></div><div class="line"><span class="meta">$</span><span class="bash"> git start</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">""</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git push</span></div></pre></td></tr></table></figure>
<h1 id="修改与提交"><a href="#修改与提交" class="headerlink" title="修改与提交"></a>修改与提交</h1><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加指定文件到暂存区 --&gt;</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加指定目录到暂存区，包括子目录 --&gt;</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加当前目录的所有文件到暂存区 --&gt;</span></div><div class="line">$ git add .</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加每个变化前，都会要求确认 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 对于同一个文件的多处变化，可以实现分次提交 --&gt;</span></div><div class="line">$ git add -p</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除工作区文件，并且将这次删除放入暂存区 --&gt;</span></div><div class="line">$ git rm [file1] [file2] </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 停止追踪指定文件，但该文件会保留在工作区 --&gt;</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 改名文件，并且将这个改名放入暂存区 --&gt;</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 提交暂存区到仓库区 --&gt;</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交暂存区的指定文件到仓库区 --&gt;</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交工作区自上次commit之后的变化，直接到仓库区 --&gt;</span></div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交时显示所有diff信息 --&gt;</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用一次新的commit，替代上一次提交 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果代码没有任何新变化，则用来改写上一次commit的提交信息 --&gt;</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重做上一次commit，并包括指定文件的新变化 --&gt;</span></div><div class="line">$ git commit --amend [file1] [file2]</div></pre></td></tr></table></figure>
<h1 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 列出所有本地分支 --&gt;</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 列出所有远程分支 --&gt;</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 列出所有本地分支和远程分支 --&gt;</span></div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，但依然停留在当前分支 --&gt;</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，并切换到该分支 --&gt;</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，指向指定commit --&gt;</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，与指定的远程分支建立追踪关系 --&gt;</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 切换到指定分支，并更新工作区 --&gt;</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 切换到上一个分支 --&gt;</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 建立追踪关系，在现有分支与指定的远程分支之间 --&gt;</span></div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 合并指定分支到当前分支 --&gt;</span></div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 选择一个commit，合并进当前分支 --&gt;</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除分支 --&gt;</span></div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除远程分支 --&gt;</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 列出所有tag --&gt;</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个tag在当前commit --&gt;</span></div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个tag在指定commit --&gt;</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除本地tag --&gt;</span></div><div class="line">$ git tag -d [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除远程tag --&gt;</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 查看tag信息 --&gt;</span></div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交指定tag --&gt;</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交所有tag --&gt;</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，指向某个tag --&gt;</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 显示有变更的文件 --&gt;</span></span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示当前分支的版本历史 --&gt;</span></div><div class="line">$ git log</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示commit历史，以及每次commit发生变更的文件 --&gt;</span></div><div class="line">$ git log --stat</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 搜索提交历史，根据关键词 --&gt;</span></div><div class="line">$ git log -S [keyword]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个commit之后的所有变动，每个commit占据一行 --&gt;</span></div><div class="line">$ git log [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件 --&gt;</span></div><div class="line">$ git log [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个文件的版本历史，包括文件改名 --&gt;</span></div><div class="line">$ git log --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示指定文件相关的每一次diff --&gt;</span></div><div class="line">$ git log -p [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示1行日志 -n为n行  --&gt;</span></div><div class="line">$ git log -5</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示过去5次提交 --&gt;</span></div><div class="line">$ git log -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示所有提交过的用户，按提交次数排序 --&gt;</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示指定文件是什么人在什么时间修改过 --&gt;</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示暂存区和工作区的差异 --&gt;</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示暂存区和上一个commit的差异 --&gt;</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示工作区与当前分支最新commit之间的差异 --&gt;</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示两次提交之间的差异 --&gt;</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示今天你写了多少行代码 --&gt;</span></div><div class="line">$ git diff --shortstat "@<span class="template-variable">&#123;0 day ago&#125;</span><span class="xml">"</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交的元数据和内容变化 --&gt;</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交发生变化的文件 --&gt;</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交时，某个文件的内容 --&gt;</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示当前分支的最近几次提交 --&gt;</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下载远程仓库的所有变动 --&gt;</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示所有远程仓库 --&gt;</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个远程仓库的信息 --&gt;</span></div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 增加一个新的远程仓库，并命名 --&gt;</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line">git pull <span class="tag">&lt;<span class="name">远程主机名(origin)</span>&gt;</span> <span class="tag">&lt;<span class="name">远程分支名</span>&gt;</span>:<span class="tag">&lt;<span class="name">本地分支名</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 取回远程仓库的变化，并与本地分支合并 --&gt;</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 上传本地指定分支到远程仓库 --&gt;</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 强行推送当前分支到远程仓库，即使有冲突 --&gt;</span></div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 推送所有分支到远程仓库 --&gt;</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 恢复暂存区的指定文件到工作区 --&gt;</span></div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 恢复某个commit的指定文件到暂存区和工作区 --&gt;</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 恢复暂存区的所有文件到工作区 --&gt;</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 --&gt;</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置暂存区与工作区，与上一次commit保持一致 --&gt;</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 --&gt;</span></div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 --&gt;</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前HEAD为指定commit，但保持暂存区和工作区不变 --&gt;</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个commit，用来撤销指定commit --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 后者的所有变化都将被前者抵消，并且应用到当前分支 --&gt;</span></div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 暂时将未提交的变化移除，稍后再移入 --&gt;</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 生成一个可供发布的压缩包 --&gt;</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul>
<li><a href="https://github.com/xirong/my-git" title="有关 git 的学习资料" target="_blank" rel="external">my-git</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="讲解过于复杂，而且还有很多广告" target="_blank" rel="external">廖雪峰Git教程</a></li>
<li><a href="http://jlord.us/git-it/" title="一位女员工写的 Git 教程" target="_blank" rel="external">Git-it - GitHub</a></li>
<li><a href="http://learngitbranching.js.org/?demo" title="是一个git仿真沙盒" target="_blank" rel="external">Learn Git Branching</a></li>
<li><a href="http://www.jianshu.com/p/da9bc509b1d2" target="_blank" rel="external">github快速入门</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简明指南</a></li>
<li><a href="https://aotu.io/notes/2017/04/10/githooks/" target="_blank" rel="external">用 Git 钩子进行简单自动部署</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki" target="_blank" rel="external">git-recipes</a></li>
<li><a href="http://www.ui.cn/detail/20957.html" target="_blank" rel="external">专为设计师而写的GitHub快速入门教程</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><ul>
<li><a href="https://juejin.im/search?query=Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">Git 工作流</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank" rel="external">Comparing Workflows</a></li>
<li><a href="http://blog.jobbole.com/76867/#comment-156726" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a></li>
<li><a href="https://tech.meituan.com/improving-git-flow_squashing-commits.html" target="_blank" rel="external">改进合作 Git 工作流：自动提取、合并提交</a></li>
</ul>
<h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><ul>
<li><a href="http://backlogtool.com/git-guide/cn/reference/" target="_blank" rel="external">Git索引</a></li>
<li><a href="https://www.git-tower.com/blog/git-cheat-sheet-cn" target="_blank" rel="external">Git指令速查表</a></li>
</ul>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><ul>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的Git入门</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html#conventions" target="_blank" rel="external">图解Git</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;p&gt;打开控制台，然后通过包管理安装，在Ubuntu上命令是：&lt;br&gt;&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; install git-&lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;p&gt;推荐使用git for&lt;br&gt;windows，它包括了图形工具以及命令行模拟器。&lt;/p&gt;
&lt;h2 id=&quot;OS-X&quot;&gt;&lt;a href=&quot;#OS-X&quot; class=&quot;headerlink&quot; title=&quot;OS X&quot;&gt;&lt;/a&gt;OS X&lt;/h2&gt;&lt;p&gt;最简单的方式是使用homebrew安装，命令行执行&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="http://luuman.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive最佳实践</title>
    <link href="http://luuman.github.io/2017/08/18/FrontFrame/Vue/KeepAlive/"/>
    <id>http://luuman.github.io/2017/08/18/FrontFrame/Vue/KeepAlive/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>Vue 项目搭建：</strong>文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！<br><a id="more"></a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li>include - 字符串，或正则表达式，或数组。匹配的组件会被缓存。</li>
<li>exclude - 字符串，或正则表达式，或数组。匹配的组件不会被缓存。</li>
</ol>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>当组件在 <keep-alive> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</keep-alive></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>主要用于保留组件状态或避免重新渲染。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- comma-delimited string --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- regex (use v-bind) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Array (use v-bind) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><p>1.直接添加在router-view上：<br>将所有页面全部缓存，这样的内存不会卡顿？如何制定那些缓存。无法使用过滤。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;keep-alive&gt;</span></div><div class="line">  <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></div><div class="line"><span class="section">&lt;/keep-alive&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>不适用与v-for的组件上，和没有组件的内容。</li>
<li></li>
</ol>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>子路由的内容缓存，切换路由，将组建缓存，通过data，判断是否重新渲染页面内容。<br>mounted =&gt; activated =&gt; deactivated =&gt; activated =&gt; deactivated<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">  <span class="comment">// 加载数据</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">activated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 是否重新加载数据</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'组件启动'</span>)</div><div class="line">&#125;,</div><div class="line"><span class="attr">deactivated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'组件缓存'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://segmentfault.com/q/1010000006827156" target="_blank" rel="external">关于router-view上使用keep-alive的问题</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;Vue 项目搭建：&lt;/strong&gt;文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS低频属性</title>
    <link href="http://luuman.github.io/2017/08/18/Induce/CSS/CssLowFrequency/"/>
    <id>http://luuman.github.io/2017/08/18/Induce/CSS/CssLowFrequency/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-09-08T04:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><h2 id="安卓文字垂直居中"><a href="#安卓文字垂直居中" class="headerlink" title="安卓文字垂直居中"></a>安卓文字垂直居中</h2><p>由于安卓无法通过height height-line</p>
<h2 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">text-indent</span>: <span class="number">25px</span>;</div></pre></td></tr></table></figure>
<h2 id="字母不换行"><a href="#字母不换行" class="headerlink" title="字母不换行"></a>字母不换行</h2><p>word-wrap: break-word;</p>
<h2 id="文字省略"><a href="#文字省略" class="headerlink" title="文字省略"></a>文字省略</h2><p>通过CSS判断，这个区域宽度</p>
<h3 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 单行文本溢出 --&gt;</span></div><div class="line">text-overflow: ellipsis;</div><div class="line">white-space: nowrap;</div><div class="line">overflow: hidden;</div></pre></td></tr></table></figure>
<h3 id="一行省略"><a href="#一行省略" class="headerlink" title="一行省略"></a>一行省略</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 多行文本溢出 --&gt;</div><div class="line"><span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</div><div class="line"><span class="attribute">overflow</span>: hidden;</div><div class="line"><span class="attribute">text-overflow</span>: ellipsis;</div><div class="line"><span class="attribute">word-break</span>: break-all;</div><div class="line">-webkit-box-orient: vertical;</div><div class="line">-webkit-line-clamp: <span class="number">2</span>;</div></pre></td></tr></table></figure>
<h2 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">text-transform</span>: capitalize;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td style="text-align:left">默认。定义带有小写字母和大写字母的标准的文本。</td>
</tr>
<tr>
<td>capitalize</td>
<td style="text-align:left">文本中的每个单词以大写字母开头。</td>
</tr>
<tr>
<td>uppercase</td>
<td style="text-align:left">定义仅有大写字母。</td>
</tr>
<tr>
<td>lowercase</td>
<td style="text-align:left">定义无大写字母，仅有小写字母。</td>
</tr>
<tr>
<td>inherit</td>
<td style="text-align:left">规定应该从父元素继承 text-transform 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="will-change"><a href="#will-change" class="headerlink" title="will-change"></a>will-change</h2><p><a href="http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/" target="_blank" rel="external">提高页面滚动、动画等渲染性能</a></p>
<h2 id="元素可以点透"><a href="#元素可以点透" class="headerlink" title="元素可以点透"></a>元素可以点透</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pointer</span>-events: <span class="keyword">none</span>;</div></pre></td></tr></table></figure>
<h2 id="移动端手机input输入内容自动移动"><a href="#移动端手机input输入内容自动移动" class="headerlink" title="移动端手机input输入内容自动移动"></a>移动端手机input输入内容自动移动</h2><p>该效果只限于IOS，ando<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">filter</span>: blur(-<span class="number">3px</span>);</div></pre></td></tr></table></figure></p>
<h2 id="webkit-text-size-adjust-失效"><a href="#webkit-text-size-adjust-失效" class="headerlink" title="-webkit-text-size-adjust(失效)"></a>-webkit-text-size-adjust(失效)</h2><ol>
<li>当样式表里font-size&lt;12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用 html{-webkit-text-size-adjust:none;}</li>
<li>-webkit-text-size-adjust放在body上会导致页面缩放失效</li>
<li>body会继承定义在html的样式</li>
<li>用-webkit-text-size-adjust不要定义成可继承的或全局的</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-<span class="built_in">text</span>-<span class="built_in">size</span>-adjust: none;</div></pre></td></tr></table></figure>
<p>以显示 10px 的字为例<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.some-small-font</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block; <span class="comment">/* Or block */</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12.5px</span>;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.8);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.8);</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">12.5%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">125%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="输入框选择时无边框"><a href="#输入框选择时无边框" class="headerlink" title="输入框选择时无边框"></a>输入框选择时无边框</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">outline</span>: none;</div></pre></td></tr></table></figure>
<h2 id="可点击的元素时，覆盖显示的高亮颜色"><a href="#可点击的元素时，覆盖显示的高亮颜色" class="headerlink" title="可点击的元素时，覆盖显示的高亮颜色"></a>可点击的元素时，覆盖显示的高亮颜色</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-tap-highlight-<span class="attribute">color</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="修改chrome记住密码后自动填充表单的背景颜色"><a href="#修改chrome记住密码后自动填充表单的背景颜色" class="headerlink" title="修改chrome记住密码后自动填充表单的背景颜色"></a>修改chrome记住密码后自动填充表单的背景颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select-webkit-autofill</span>&#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">	<span class="attribute">background-image</span>: none;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="弹窗背景模糊"><a href="#弹窗背景模糊" class="headerlink" title="弹窗背景模糊"></a>弹窗背景模糊</h2><p>原理：使用高斯模糊，使得页面显示元素模糊，将样式加在body上，通过body的class实现的。row为指定要模糊的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.modal-active</span> <span class="selector-class">.row</span> &#123;</div><div class="line">	<span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-o-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><a href="http://mao.li/css3-blur-filter-pratice/" title="描述" target="_blank" rel="external">CSS3 filter 模糊滤镜</a></li>
<li><a href="https://segmentfault.com/q/1010000000123341" title="描述" target="_blank" rel="external">如何将网页CSS背景图高斯模糊且全屏显示</a></li>
</ul>
</blockquote>
<h2 id="微信二维码无法识别"><a href="#微信二维码无法识别" class="headerlink" title="微信二维码无法识别"></a>微信二维码无法识别</h2><blockquote>
<ul>
<li><a href="https://segmentfault.com/a/1190000002985815" title="中国城投票活动页面" target="_blank" rel="external">微信内置浏览器 长按识别二维码 功能的两三个坑与解决方案</a></li>
<li><a href="https://devework.com/weixin-qrcode-bug.html" title="描述" target="_blank" rel="external">前端页面中 iOS 版微信长按识别二维码的bug 与解决</a><br>网页中使用fixed，ios扫描会偏移到网页下部。</li>
</ul>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">padding</span>: size(<span class="number">240</span>) <span class="number">0</span> <span class="number">0</span> size(<span class="number">240</span>) <span class="meta">!important</span>;</div><div class="line"><span class="attribute">margin</span>: size(-<span class="number">240</span>) <span class="number">0</span> <span class="number">0</span> size(-<span class="number">240</span>) <span class="meta">!important</span>;</div><div class="line"><span class="attribute">position</span>: relative;<span class="attribute">z-index</span>: <span class="number">100</span>;</div><div class="line">-webkit-user-<span class="selector-tag">select</span>: none;</div></pre></td></tr></table></figure>
<h2 id="背景bg设置"><a href="#背景bg设置" class="headerlink" title="背景bg设置"></a>背景bg设置</h2><p>background: linear-gradient()</p>
<h2 id="安卓微信overflow失效"><a href="#安卓微信overflow失效" class="headerlink" title="安卓微信overflow失效"></a>安卓微信overflow失效</h2><h2 id="CSS-clip-path"><a href="#CSS-clip-path" class="headerlink" title="CSS clip-path"></a>CSS clip-path</h2><p><a href="http://www.cnblogs.com/coco1s/p/6992177.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/6992177.html</a></p>
<h2 id="Web移动端Fixed布局的解决方案"><a href="#Web移动端Fixed布局的解决方案" class="headerlink" title="Web移动端Fixed布局的解决方案"></a>Web移动端Fixed布局的解决方案</h2><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="external">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件探秘</title>
    <link href="http://luuman.github.io/2017/08/18/FrontFrame/Vue/VueComponents/"/>
    <id>http://luuman.github.io/2017/08/18/FrontFrame/Vue/VueComponents/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<em>**</em>文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="属性Props"><a href="#属性Props" class="headerlink" title="属性Props"></a>属性Props</h2><h1 id="探秘"><a href="#探秘" class="headerlink" title="探秘"></a>探秘</h1><h2 id="Props验证"><a href="#Props验证" class="headerlink" title="Props验证"></a>Props验证</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'example'</span>, &#123;</div><div class="line">  <span class="attribute">props</span>: &#123;</div><div class="line">    <span class="comment">// 基础类型检测 (`null` 意思是任何类型都可以)</span></div><div class="line">    <span class="attribute">propA</span>: Number,</div><div class="line">    <span class="comment">// 多种类型</span></div><div class="line">    <span class="attribute">propB</span>: [String, Number],</div><div class="line">    <span class="comment">// 必传且是字符串</span></div><div class="line">    <span class="attribute">propC</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: String,</div><div class="line">      <span class="attribute">required</span>: true</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数字，有默认值</span></div><div class="line">    <span class="attribute">propD</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Number,</div><div class="line">      <span class="attribute">default</span>: <span class="number">100</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></div><div class="line">    <span class="attribute">propE</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Object,</div><div class="line">      <span class="attribute">default</span>: function () &#123;</div><div class="line">        return &#123; <span class="attribute">message</span>: <span class="string">'hello'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 自定义验证函数</span></div><div class="line">    <span class="attribute">propF</span>: &#123;</div><div class="line">      <span class="attribute">validator</span>: function (value) &#123;</div><div class="line">        return value &gt; <span class="number">10</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>可以是下面原生构造器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span></div><div class="line"><span class="built_in">Number</span></div><div class="line"><span class="built_in">Boolean</span></div><div class="line"><span class="built_in">Function</span></div><div class="line"><span class="built_in">Object</span></div><div class="line"><span class="built_in">Array</span></div><div class="line"><span class="built_in">Symbol</span></div></pre></td></tr></table></figure></p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><h3 id="绑定原生事件"><a href="#绑定原生事件" class="headerlink" title="绑定原生事件"></a>绑定原生事件</h3><p>如果想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">my</span>-component v-<span class="keyword">on</span>:click.native=<span class="string">"doTheThing"</span>&gt;&lt;/<span class="keyword">my</span>-component&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>this.$emit分发事件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">v-on:myclick</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  Vue.component(<span class="string">'my-component2'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></div><div class="line">    &lt;button type="button" @click="childClick"&gt;点击我触发自定义事件&lt;/button&gt;</div><div class="line">    &lt;/div&gt;`,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      childClick () &#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'myclick'</span>, <span class="string">'这是我暴露出去的数据'</span>, <span class="string">'这是我暴露出去的数据2'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app3'</span>,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      onClick () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>组件内部方法，触发外部自定义方法</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.$emit('myclick', 'data1', 'data2')</div><div class="line"><span class="comment">&lt;!-- 第一个参数是自定义事件的名字 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 后面的参数是依次想要发送出去的数据 --&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>父组件利用v-on为事件绑定处理器</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">my</span>-component2 v-<span class="keyword">on</span>:myclick=<span class="string">"onClick"</span>&gt;&lt;/<span class="keyword">my</span>-component2&gt;</div></pre></td></tr></table></figure>
<p>在使用v-on绑定事件处理方法时，不应该传进任何参数，而是直接写v-on:myclick=”onClick”,不然，子组件暴露出来的数据就无法获取到了</p>
<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model是一个十分强大的指令,它可以自动让原生表单组件的值自动和你选择的值绑定</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: <span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="使用自定义事件的表单输入组件"><a href="#使用自定义事件的表单输入组件" class="headerlink" title="使用自定义事件的表单输入组件"></a>使用自定义事件的表单输入组件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">v-model</span>=<span class="string">"something"</span>&gt;</div><div class="line"></div><div class="line">&lt;input</div><div class="line">  v-bind:<span class="attribute">value</span>=<span class="string">"something"</span></div><div class="line">  v-on:<span class="attribute">input</span>=<span class="string">"something = <span class="variable">$event</span>.target.value"</span>&gt;</div></pre></td></tr></table></figure>
<p>非常简单的货币输入的自定义控件：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;currency-input v-model=<span class="string">"price"</span>&gt;&lt;/currency-input&gt;</div><div class="line"></div><div class="line">Vue.component(<span class="string">'currency-input'</span>, &#123;</div><div class="line">  template: <span class="string">'\</span></div><div class="line">    &lt;span&gt;\</div><div class="line">      $\</div><div class="line">      &lt;input\</div><div class="line">        ref="input"\</div><div class="line">        v-bind:value="value"\</div><div class="line">        v-on:input="updateValue($event.target.value)"\</div><div class="line">      &gt;\</div><div class="line">    &lt;/span&gt;\</div><div class="line">  ',</div><div class="line">  props: [<span class="string">'value'</span>],</div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></div><div class="line">    updateValue: function (<span class="keyword">value</span>) &#123;</div><div class="line">      <span class="keyword">var</span> formattedValue = <span class="keyword">value</span></div><div class="line">        <span class="comment">// 删除两侧的空格符</span></div><div class="line">        .trim()</div><div class="line">        <span class="comment">// 保留 2 小数位</span></div><div class="line">        .slice(</div><div class="line">          <span class="number">0</span>,</div><div class="line">          <span class="keyword">value</span>.indexOf(<span class="string">'.'</span>) === <span class="number">-1</span></div><div class="line">            ? <span class="keyword">value</span>.length</div><div class="line">            : <span class="keyword">value</span>.indexOf(<span class="string">'.'</span>) + <span class="number">3</span></div><div class="line">        )</div><div class="line">      <span class="comment">// 如果值不统一，手动覆盖以保持一致</span></div><div class="line">      <span class="keyword">if</span> (formattedValue !== <span class="keyword">value</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.$refs.input.<span class="keyword">value</span> = formattedValue</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 通过 input 事件发出数值</span></div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, Number(formattedValue))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在 "change" 而不是 "input" 事件中更新 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为 Number 类型 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动过滤用户输入的首尾空格 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"text"</span> <span class="attr">v-on:input</span>=<span class="string">"changeValue($event.target.value)"</span>&gt;</span></div><div class="line">	<span class="template-variable">&#123;&#123;text&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app4'</span>,</div><div class="line">    data: &#123;</div><div class="line">      text: <span class="string">'444'</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      changeValue (value) &#123;</div><div class="line">        <span class="keyword">this</span>.text = value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue.js component<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'msg'</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"notify"</span>&gt;</span>Dispatch Event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"events-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Messages: <span class="template-variable">&#123;&#123;messages | json&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></span></div><div class="line">	Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">	    template: <span class="string">'#child-template'</span>,</div><div class="line">	    data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	        <span class="keyword">return</span> &#123;</div><div class="line">	            msg: <span class="string">'hello'</span></div><div class="line">	        &#125;</div><div class="line">	    &#125;,</div><div class="line">	    methods: &#123;</div><div class="line">	        notify: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	            <span class="keyword">if</span> (<span class="keyword">this</span>.msg.trim()) &#123;</div><div class="line">	                <span class="keyword">this</span>.$dispatch(<span class="string">'child-msg'</span>, <span class="keyword">this</span>.msg);</div><div class="line">	                <span class="keyword">this</span>.msg = <span class="string">''</span>;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> parent = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	    el: <span class="string">'#events-example'</span>,</div><div class="line">	    data: &#123;</div><div class="line">	        messages: [],</div><div class="line">	    &#125;,</div><div class="line">	    events: &#123;</div><div class="line">	        <span class="string">'child-msg'</span>: <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>&#123;</div><div class="line">	            <span class="keyword">this</span>.messages.push(msg);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue.js component<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'msg'</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"notify"</span>&gt;</span>Dispatch Event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"events-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Messages: <span class="template-variable">&#123;&#123;messages | json&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:child-msg</span>=<span class="string">"handleIt"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">	    <span class="attr">template</span>: <span class="string">'#child-template'</span>,</div><div class="line">	    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">return</span> &#123;</div><div class="line">	            <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">	        &#125;</div><div class="line">	    &#125;,</div><div class="line">	    <span class="attr">methods</span>: &#123;</div><div class="line">	        <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	            <span class="keyword">if</span> (<span class="keyword">this</span>.msg.trim()) &#123;</div><div class="line">	                <span class="keyword">this</span>.$dispatch(<span class="string">'child-msg'</span>, <span class="keyword">this</span>.msg);</div><div class="line">	                <span class="keyword">this</span>.msg = <span class="string">''</span>;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> parent = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	    <span class="attr">el</span>: <span class="string">'#events-example'</span>,</div><div class="line">	    <span class="attr">data</span>: &#123;</div><div class="line">	        <span class="attr">messages</span>: [],</div><div class="line">	    &#125;,</div><div class="line">	    <span class="attr">methods</span>: &#123;</div><div class="line">	        <span class="string">'handleIt'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	            <span class="built_in">console</span>.log(<span class="string">'a'</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://segmentfault.com/a/1190000010527064" target="_blank" rel="external">深刻理解Vue中的组件</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/forms.html#绑定-value" target="_blank" rel="external">表单控件绑定</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;em&gt;**&lt;/em&gt;文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>深入Sass</title>
    <link href="http://luuman.github.io/2017/08/18/Induce/InduceSass/"/>
    <id>http://luuman.github.io/2017/08/18/Induce/InduceSass/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T12:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SASS</strong>是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。<br>你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，只是一行行单纯的描述，写起来相当费事。<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="变量与选择器"><a href="#变量与选择器" class="headerlink" title="变量与选择器"></a>变量与选择器</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的定义一般以$开头，某个变量的作用域仅限于他们定义的层级以及子层级。如果变量是定义在所有嵌套选择器之外的，那么他们可以在各处被调用。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color1</span>: <span class="number">#aeaeae</span>;</div><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="variable">$color1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#aeaeae</span>;</div><div class="line">&#125;</div><div class="line">&lt;!<span class="selector-tag">--</span> <span class="comment">/*# sourceMappingURL=test.css.map */</span> <span class="selector-tag">--</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>变量的作用域<br>如果希望某个在子选择器中定义的变量能够成为全局变量，可以使用!global关键字：</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$side</span>: top;</div><div class="line"><span class="variable">$radius</span>: <span class="number">10px</span>;</div><div class="line"><span class="selector-class">.round-</span>#&#123;<span class="variable">$side</span>&#125; &#123;</div><div class="line">  <span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">  -moz-<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">  -webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radiux: <span class="variable">$radius</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.round-top</span> &#123;</div><div class="line">  <span class="attribute">border-top-radius</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">-moz-border-top-radius</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">-webkit-border-top-radiux</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$left</span>: <span class="number">20px</span>;</div><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>:<span class="variable">$left</span>+<span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>计算的类型</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  &lt;!-- Plain CSS, no division --&gt;</div><div class="line">  font: 10px/8px;</div><div class="line">  $width: 1000px;</div><div class="line">  &lt;!-- Uses a variable, does division --&gt;</div><div class="line">  width: $width/2;</div><div class="line">  &lt;!-- Uses a function, does division --&gt;</div><div class="line">  width: round(1.5)/2;</div><div class="line">  &lt;!-- Uses parentheses, does division --&gt;</div><div class="line">  height: (500px/2);</div><div class="line">  &lt;!-- Uses +, does division --&gt;</div><div class="line">  margin-left: 5px + 8px/2px;</div><div class="line">  &lt;!-- In a list, parentheses don't count --&gt;</div><div class="line">  font: (italic bold 10px/8px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  <span class="selector-class">.span1</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.div2</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">	<span class="attribute">border</span>:&#123;</div><div class="line">		color: red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意: border后面必须加上冒号</p>
<h4 id="父元素引用"><a href="#父元素引用" class="headerlink" title="父元素引用"></a>父元素引用</h4><p>允许使用&amp;引用父元素<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  &amp;:hover&#123;</div><div class="line">    <span class="attribute">cursor</span>: hand;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>SASS允许一个选择器，继承另一个选择器。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> .class1;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>, <span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果在class2后面有设置了class1的属性，那么也会影响class2</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">    @<span class="keyword">extend</span> .class1;</div><div class="line">    <span class="attribute">color</span>:black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%class1&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> %class1;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="引用外部"><a href="#引用外部" class="headerlink" title="引用外部"></a>引用外部</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"_test1.scss"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"_test2.scss"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"_test3.scss"</span>;</div></pre></td></tr></table></figure>
<h3 id="Mixin-amp-Include"><a href="#Mixin-amp-Include" class="headerlink" title="Mixin&amp;Include"></a>Mixin&amp;Include</h3><p>Mixin是SASS中非常强大的特性之一。定义mixin时，需要在前面加@mixin，使用时需要添加@include来引用该mixin。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">	@<span class="keyword">include</span> left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="边距设置"><a href="#边距设置" class="headerlink" title="边距设置"></a>边距设置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> common(<span class="variable">$value1</span>,<span class="variable">$value2</span>,<span class="variable">$defaultValue</span>:<span class="number">12px</span>) &#123;</div><div class="line">  <span class="attribute">display</span>:block;</div><div class="line">  <span class="attribute">margin-left</span>:<span class="variable">$value1</span>;</div><div class="line">  <span class="attribute">margin-right</span>:<span class="variable">$value2</span>;</div><div class="line">  <span class="attribute">padding</span>:<span class="variable">$defaultValue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.class1</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line">  @<span class="keyword">include</span> common(<span class="number">12px</span>,<span class="number">13px</span>,<span class="number">15px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line">  @<span class="keyword">include</span> common(<span class="number">12px</span>,<span class="number">13px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="浏览器前缀设置"><a href="#浏览器前缀设置" class="headerlink" title="浏览器前缀设置"></a>浏览器前缀设置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) &#123;</div><div class="line">	<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">	-moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</div><div class="line">	-webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	@<span class="keyword">include</span> rounded(top, left);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">	@<span class="keyword">include</span> rounded(top, left, 5px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编程式方法"><a href="#编程式方法" class="headerlink" title="编程式方法"></a>编程式方法</h2><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><blockquote>
<p>@if</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">	@<span class="keyword">if</span> 1 + 1 == 2 &#123;</div><div class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid;</div><div class="line">	&#125;</div><div class="line">	@<span class="keyword">if</span> 5 &lt; 3 &#123;</div><div class="line">		<span class="attribute">border</span>: <span class="number">2px</span> dotted;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>@else</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span> lightness(<span class="variable">$color</span>) &gt; 30% &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">&#125; @<span class="keyword">else</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><blockquote>
<p>for循环</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 5 &#123;</div><div class="line">  <span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-1</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-2</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-3</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-4</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>while循环</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">1</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &lt; 5 &#123;</div><div class="line">  <span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue; &#125;</div><div class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-1</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-2</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-3</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-4</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>each命令，作用与for类似</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$item</span> in add, update, remove, share &#123;</div><div class="line">  <span class="selector-class">.icon-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">"/image/#&#123;$item&#125;.jpg"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-add</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/add.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-update</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/update.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-remove</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/remove.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-share</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/share.jpg"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@function double(<span class="variable">$n</span>) &#123;</div><div class="line">	@return <span class="variable">$n</span> * 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">	<span class="attribute">width</span>: double(<span class="number">5px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#navbar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h4><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">lighten(<span class="selector-id">#cc3</span>, 10%)</div><div class="line"><span class="comment">// #d6d65c</span></div><div class="line"></div><div class="line">darken(<span class="selector-id">#cc3</span>, 10%)</div><div class="line"><span class="comment">//  #a3a329</span></div><div class="line"></div><div class="line">grayscale(<span class="selector-id">#cc3</span>)</div><div class="line"><span class="comment">// #808080</span></div><div class="line"></div><div class="line">complement(<span class="selector-id">#cc3</span>)</div><div class="line"><span class="comment">// #33c</span></div></pre></td></tr></table></figure></p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="Sass-与-SCSS-是什么关系"><a href="#Sass-与-SCSS-是什么关系" class="headerlink" title="Sass 与 SCSS 是什么关系"></a>Sass 与 SCSS 是什么关系</h2><ol>
<li>sass受Haml简洁启发，Ruby的语法，没有花括号，没有分号，具有严格的缩进<br>Sass 从来没有大写过，无论你指的是语法或者这个语言。同时， SCSS 一直是大写的。甚至有一个网站专门来提醒你这件事!</li>
</ol>
<h3 id="sass"><a href="#sass" class="headerlink" title=".sass"></a>.sass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$def-color: #333</div><div class="line">body</div><div class="line">  font: 100%</div><div class="line">  color: $def-color</div></pre></td></tr></table></figure>
<h3 id="scss"><a href="#scss" class="headerlink" title=".scss"></a>.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$def-color</span>: <span class="number">#333</span></div><div class="line">body&#123;</div><div class="line">  font: <span class="number">100%</span>；</div><div class="line">  color: <span class="variable">$def-color</span>；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Sass之更高级的媒体查询"><a href="#使用Sass之更高级的媒体查询" class="headerlink" title="使用Sass之更高级的媒体查询"></a>使用Sass之更高级的媒体查询</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/ _config.scss</div><div class="line">$breakpoints: (</div><div class="line">  'xs': 'only screen and ( min-width: 480px)',</div><div class="line">  'sm': 'only screen and ( min-width: 768px)',</div><div class="line">  'md': 'only screen and ( min-width: 992px)',</div><div class="line">  'lg': 'only screen and ( min-width: 1200px)',</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// _mixins.scss</div><div class="line">@mixin respond-to($breakpoint) &#123;</div><div class="line">  $query: map-get($breakpoints, $breakpoint);</div><div class="line">  </div><div class="line">  @if not $query &#123;</div><div class="line">    @error 'No value found for `#&#123;$breakpoint&#125;`. Please make sure it is defined in `$breakpoints` map.';</div><div class="line">  &#125;</div><div class="line">  @media #&#123;if(type-of($query) == 'string', unquote($query), inspect($query))&#125; &#123;</div><div class="line">    @content;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _component.scss</span></div><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">color</span>: hotpink;</div><div class="line">  @<span class="keyword">include</span> respond-to(sm) &#123;</div><div class="line">    <span class="attribute">color</span>: tomato;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">color</span>: hotpink;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.element</span> &#123;</div><div class="line">    <span class="attribute">color</span>: tomato;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="巧用SASS之如何遍历n个子元素并为其设置属性"><a href="#巧用SASS之如何遍历n个子元素并为其设置属性" class="headerlink" title="巧用SASS之如何遍历n个子元素并为其设置属性"></a>巧用SASS之如何遍历n个子元素并为其设置属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将背景颜色值定义成变量</span></div><div class="line"><span class="variable">$red</span> : <span class="number">#FF0000</span>;</div><div class="line"><span class="variable">$orange</span> : <span class="number">#FFA500</span>;</div><div class="line"><span class="variable">$yellow</span> : <span class="number">#FFFF00</span>;</div><div class="line"><span class="variable">$green</span> : <span class="number">#008000</span>;</div><div class="line"><span class="variable">$bluegreen</span> : <span class="number">#00FFFF</span>;</div><div class="line"><span class="variable">$blue</span> : <span class="number">#0000FF</span>;</div><div class="line"><span class="variable">$purple</span> : <span class="number">#800080</span>;</div><div class="line"></div><div class="line"><span class="comment">//将背景颜色以键值对的形式存在map中</span></div><div class="line"><span class="variable">$bgcolorlist</span> : (</div><div class="line">  <span class="number">1</span>: <span class="variable">$red</span>,</div><div class="line">  <span class="number">2</span>: <span class="variable">$orange</span>,</div><div class="line">  <span class="number">3</span>: <span class="variable">$yellow</span>,</div><div class="line">  <span class="number">4</span>: <span class="variable">$green</span>,</div><div class="line">  <span class="number">5</span>: <span class="variable">$bluegreen</span>,</div><div class="line">  <span class="number">6</span>: <span class="variable">$blue</span>,</div><div class="line">  <span class="number">7</span>: <span class="variable">$purple</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 使用SASS each语法为每一个li设置background-color</span></div><div class="line">@<span class="keyword">each</span> <span class="variable">$i</span>, <span class="variable">$color</span> in <span class="variable">$bgcolorlist</span> &#123;</div><div class="line">  <span class="selector-id">#main-container</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置rem，控制width"><a href="#设置rem，控制width" class="headerlink" title="设置rem，控制width"></a>设置rem，控制width</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@function size(<span class="variable">$size</span>) &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">375</span>;</div><div class="line">  <span class="variable">$scale</span>: <span class="number">10</span>;</div><div class="line">  @return (<span class="variable">$size</span> / <span class="variable">$width</span> * <span class="variable">$scale</span>) * 1rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">sass入门</a></li>
<li><a href="http://sass-lang.com/" target="_blank" rel="external">sass</a></li>
<li><a href="https://www.w3ctrain.com/2015/12/02/sass-media-query/" target="_blank" rel="external">使用Sass之更高级的媒体查询</a></li>
<li><a href="http://blog.csdn.net/qishuixian/article/details/54578212" target="_blank" rel="external">学习SASS笔记</a></li>
<li><a href="https://segmentfault.com/a/1190000005942514" target="_blank" rel="external">巧用SASS之如何遍历n个子元素并为其设置属性</a></li>
<li><a href="https://www.w3ctrain.com/2016/02/21/useful-sass-mixins/" target="_blank" rel="external">几个实用的Sass mixins</a></li>
<li><a href="https://aotu.io/notes/2017/01/19/sass-svg/?o2src=juejin&amp;o2layout=compat" target="_blank" rel="external">sass-svg 一个内联 SVG 的 SASS 库</a></li>
<li><a href="http://svgtrick.com/tricks/78c525bfb98a36b85481f5d423f2301a" target="_blank" rel="external">跟随动画的高效实现方法：GreenSock 和 Web Animations API</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SASS&lt;/strong&gt;是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。&lt;br&gt;你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，只是一行行单纯的描述，写起来相当费事。&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Sass" scheme="http://luuman.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>Terminal配置</title>
    <link href="http://luuman.github.io/2017/08/02/Tool/Terminal/"/>
    <id>http://luuman.github.io/2017/08/02/Tool/Terminal/</id>
    <published>2017-08-02T06:11:20.000Z</published>
    <updated>2017-07-31T09:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>vim ~/.bash_profile</p>
</blockquote>
<p>a ：编辑模式<br>esc ：命令模式<br>:wq ：保存并退出</p>
<a id="more"></a>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># for color</div><div class="line">export CLICOLOR=1</div><div class="line"># <span class="symbol">\h</span>:<span class="symbol">\W</span> <span class="symbol">\u</span><span class="symbol">\$</span></div><div class="line">export PS1='<span class="symbol">\[</span><span class="symbol">\0</span>33[01;33m<span class="symbol">\]</span><span class="symbol">\u</span>@<span class="symbol">\h</span><span class="symbol">\[</span><span class="symbol">\0</span>33[01;31m<span class="symbol">\]</span> <span class="symbol">\W</span><span class="symbol">\$</span><span class="symbol">\[</span><span class="symbol">\0</span>33[00m<span class="symbol">\]</span> '</div><div class="line"># grep</div><div class="line">alias grep='grep --color=always'</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">find_git_branch</span></span> () &#123;</div><div class="line">  <span class="built_in">local</span> dir=. head</div><div class="line">  until [ <span class="string">"<span class="variable">$dir</span>"</span> -ef / ]; <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span> ]; <span class="keyword">then</span></div><div class="line">      head=$(&lt; <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span>)</div><div class="line">      <span class="keyword">if</span> [[ <span class="variable">$head</span> = ref:\ refs/heads/* ]]; <span class="keyword">then</span></div><div class="line">        git_branch=<span class="string">"&lt;<span class="variable">$&#123;head#*/*/&#125;</span>&gt;"</span></div><div class="line">      <span class="keyword">elif</span> [[ <span class="variable">$head</span> != <span class="string">''</span> ]]; <span class="keyword">then</span></div><div class="line">        git_branch=<span class="string">"&lt;(detached)&gt;"</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        git_branch=<span class="string">"&lt;(unknow)&gt;"</span></div><div class="line">      <span class="keyword">fi</span>  </div><div class="line">      <span class="built_in">return</span></div><div class="line">    <span class="keyword">fi</span>  </div><div class="line">    dir=<span class="string">"../<span class="variable">$dir</span>"</span></div><div class="line">  <span class="keyword">done</span></div><div class="line">  git_branch=<span class="string">''</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># for color</span></div><div class="line"><span class="built_in">export</span> CLICOLOR=1</div><div class="line"><span class="comment"># \h:\W \u\$</span></div><div class="line">PROMPT_COMMAND=<span class="string">"find_git_branch; <span class="variable">$PROMPT_COMMAND</span>"</span></div><div class="line"><span class="built_in">export</span> PS1=<span class="string">'\[\033[01;33m\]\u@\[\033[01;31m\]\W\[\033[00;31m\] $git_branch\[\033[01;31m\]\$\[\033[00m\] '</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vim ~/.bash_profile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a ：编辑模式&lt;br&gt;esc ：命令模式&lt;br&gt;:wq ：保存并退出&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Terminal" scheme="http://luuman.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>WeChat SDK</title>
    <link href="http://luuman.github.io/2017/07/25/Induce/Weixin/JS-SDK/"/>
    <id>http://luuman.github.io/2017/07/25/Induce/Weixin/JS-SDK/</id>
    <published>2017-07-25T10:29:00.000Z</published>
    <updated>2017-08-16T08:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　微信作为大佬，使用他的SDK有些什么需要注意的地方！有哪些容易出错的地方。<br><a id="more"></a></p>
<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><h2 id="H5支付"><a href="#H5支付" class="headerlink" title="H5支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1" target="_blank" rel="external">H5支付</a></h2><p><a href="http://wxpay.wxutil.com/mch/pay/h5.v2.php" target="_blank" rel="external">微信官方体验链接</a><br>通过微信H5支付可以实现在非微信浏览器（如QQ浏览器、谷歌浏览器、Safari等）中使用微信支付的场景。</p>
<h3 id="接口流程图"><a href="#接口流程图" class="headerlink" title="接口流程图"></a>接口流程图</h3><p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter15_1.png" alt=""><br><a href="https://wx.tenpay.com/cgi-bin/mmpayweb-bin/checkmweb?prepay_id=wx2017081615035708f69384050585043920&amp;package=784262796" target="_blank" rel="external">获取跳转链接</a></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="external">常见问题</a></h3><h2 id="JSDK支付"><a href="#JSDK支付" class="headerlink" title="JSDK支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="external">JSDK支付</a></h2><p>用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。<br><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter7_4_1.png" alt=""></p>
<h3 id="微信内H5调起支付"><a href="#微信内H5调起支付" class="headerlink" title="微信内H5调起支付"></a>微信内H5调起支付</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   WeixinJSBridge.invoke(</div><div class="line">       <span class="string">'getBrandWCPayRequest'</span>, &#123;</div><div class="line">           <span class="comment">// 公众号名称，由商户传入</span></div><div class="line">           <span class="string">"appId"</span>:<span class="string">"wx2421b1c4370ec43b"</span>,</div><div class="line">           <span class="comment">// 时间戳，自1970年以来的秒数</span></div><div class="line">           <span class="string">"timeStamp"</span>:<span class="string">"1395712654"</span>,</div><div class="line">           <span class="comment">// 随机串</span></div><div class="line">           <span class="string">"nonceStr"</span>:<span class="string">"e61463f8efa94090b1f366cccfbbb444"</span>,</div><div class="line">           <span class="string">"package"</span>:<span class="string">"prepay_id=u802345jgfjsdfgsdg888"</span>,</div><div class="line">           <span class="comment">// 微信签名方式：</span></div><div class="line">           <span class="string">"signType"</span>:<span class="string">"MD5"</span>,</div><div class="line">           <span class="comment">// 微信签名</span></div><div class="line">           <span class="string">"paySign"</span>:<span class="string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span></div><div class="line">       &#125;,</div><div class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">           <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;&#125;     <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 </span></div><div class="line">		&#125;</div><div class="line">   );</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</div><div class="line">   <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</div><div class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady); </div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">   &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   onBridgeReady();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">wx</span><span class="selector-class">.chooseWXPay</span>(&#123;</div><div class="line">    <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></div><div class="line">    <span class="attribute">timestamp</span>: <span class="number">0</span>,</div><div class="line">    <span class="comment">// 支付签名随机串，不长于 32 位</span></div><div class="line">    <span class="attribute">nonceStr</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）</span></div><div class="line">    <span class="attribute">package</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span></div><div class="line">    <span class="attribute">signType</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 支付签名</span></div><div class="line">    <span class="attribute">paySign</span>: <span class="string">''</span>,</div><div class="line">	<span class="comment">// 支付成功后的回调函数</span></div><div class="line">    <span class="attribute">success</span>: function (res) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="小程序支付"><a href="#小程序支付" class="headerlink" title="小程序支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1" target="_blank" rel="external">小程序支付</a></h2><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="微信分享出去的链接被，打开后自动添加参数"><a href="#微信分享出去的链接被，打开后自动添加参数" class="headerlink" title="微信分享出去的链接被，打开后自动添加参数"></a>微信分享出去的链接被，打开后自动添加参数</h2><p>使用微信出去的页面，在微信中打开时就会显示。出文章在什么终端中打开的参数，添加在链接上。<br>朋友圈   from=timeline&amp;isappinstalled=0<br>微信群   from=groupmessage&amp;isappinstalled=0<br>好友分享 from=singlemessage&amp;isappinstalled=0</p>
<p>解决办法：在链接上添加？分享后打开后，微信会将？去除。<br>url =&gt; url? =&gt; url</p>
<p>vue:<br>/#/ =&gt; /?*/ =&gt; /#/</p>
<p><a href=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　微信作为大佬，使用他的SDK有些什么需要注意的地方！有哪些容易出错的地方。&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="WeChatSDK" scheme="http://luuman.github.io/tags/WeChatSDK/"/>
    
  </entry>
  
  <entry>
    <title>浏览器常见Bug——Canvas</title>
    <link href="http://luuman.github.io/2017/07/12/Induce/Hack/Canvas/"/>
    <id>http://luuman.github.io/2017/07/12/Induce/Hack/Canvas/</id>
    <published>2017-07-12T10:29:00.000Z</published>
    <updated>2017-11-13T05:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h1 id="生成图片Canvas"><a href="#生成图片Canvas" class="headerlink" title="生成图片Canvas"></a>生成图片Canvas</h1><h2 id="toDataURL"><a href="#toDataURL" class="headerlink" title="toDataURL"></a>toDataURL</h2><blockquote>
<p>Uncaught (in promise) DOMException: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p>
</blockquote>
<p>问题原因：<br>Canvas为了安全性考虑，当绘制了外部图片后它会变成只可写不可读的状态，getImageData、toDataURL之类的试图读取数据的方法全都无法使用。理论上开启了CORS的资源应该被允许读取，只是IMG元素发起的请求默认并不带Origin字段，没能应用上CORS。</p>
<blockquote>
<p>request Headers请求头Origin:</p>
</blockquote>
<p>origin主要是用来说明最初请求是从哪里发起的；<br>origin只用于Post请求，而Referer则用于所有类型的请求；<br>origin的方式比Referer更安全点吧。</p>
<ul>
<li><a href="https://github.com/Aaaaaaaty/Blog/issues/5" target="_blank" rel="external">基于 canvas 实现的一个截图小 demo</a></li>
<li><a href="https://www.web-tinker.com/article/20687.html" target="_blank" rel="external">CORS与Canvas图片toDataURL</a></li>
</ul>
<h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><blockquote>
<p>Access to Image at ‘<a href="http://wx4.sinaimg.cn/mw690/4b4d632fgy1fieo66xwy4j20io0goq46.jpg" target="_blank" rel="external">http://wx4.sinaimg.cn/mw690/4b4d632fgy1fieo66xwy4j20io0goq46.jpg</a>‘ from origin ‘<a href="http://172.16.20.115:8780" target="_blank" rel="external">http://172.16.20.115:8780</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://172.16.20.115:8780" target="_blank" rel="external">http://172.16.20.115:8780</a>‘ is therefore not allowed access.</p>
</blockquote>
<p>CORS解决</p>
<p><a href="https://www.w3ctrain.com/2017/07/24/gen-image-fe/" target="_blank" rel="external">前端实现’截图’效果的几种方式</a></p>
<p><a href="https://juejin.im/entry/59ae0e4c5188252423586470?utm_source=gold_browser_extension" target="_blank" rel="external">html2canvas html截图插件图片放大清晰度解决方案，支持任意放大倍数，解决原插件图片偏移问题</a><br><a href="https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html" target="_blank" rel="external">html2canvas 将代码转为图片</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Hack" scheme="http://luuman.github.io/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="http://luuman.github.io/2017/04/25/FrontFrame/Vue/Vuex/"/>
    <id>http://luuman.github.io/2017/04/25/FrontFrame/Vue/Vuex/</id>
    <published>2017-04-25T10:29:00.000Z</published>
    <updated>2017-08-10T01:27:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>Vuex</strong>是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>[ ] 严格模式<br>[ ] 测试<br>[ ] 插件<br>[ ] 热重载<br>[ ]<br>[x]<br><a id="more"></a></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>简单实用<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import Vue <span class="keyword">from</span> 'vue'</div><div class="line">import Vuex <span class="keyword">from</span> 'vuex'</div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line">const <span class="keyword">state</span> = &#123;</div><div class="line">  count: 'jljdfdf'</div><div class="line">&#125;</div><div class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="全局注入"><a href="#全局注入" class="headerlink" title="全局注入"></a>全局注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> vuex <span class="comment">--save</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">store</span> <span class="keyword">from</span> <span class="string">'./vuex/store'</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  <span class="keyword">store</span>,</div><div class="line">  <span class="keyword">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> modules <span class="keyword">from</span> <span class="string">'./modules'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  modules</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'API'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'VUEX/mutation-types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> getters = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  state,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_NAV_STATUS = <span class="string">'COM_NAV_STATUS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_HEADER_STATUS = <span class="string">'COM_HEADER_STATUS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_LOADING_STATUS = <span class="string">'COM_LOADING_STATUS'</span></div></pre></td></tr></table></figure>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>通过Getters映射，控制Actions改变状态，从而控制mutations状态控制数据变化。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>状态自管理应用包含以下几个部分：</p>
<ol>
<li>state，驱动应用的数据源；</li>
<li>view，以声明方式将state映射到视图；</li>
<li>actions，响应在view上的用户输入导致的状态变化。</li>
</ol>
<h1 id="store-仓库"><a href="#store-仓库" class="headerlink" title="store 仓库"></a>store 仓库</h1><p>“store”基本上就是一个容器，它包含着你的应用中大部分的状态(state)。</p>
<p>Vuex和单纯的全局对象有以下两点不同：</p>
<ol>
<li>Vuex的状态存储是响应式的。当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>你不能直接改变store中的状态。改变store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ol>
<h2 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h2><p>“单向数据流”理念的极简示意</p>
<p>多个组件共享状态的缺点：</p>
<ol>
<li>传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li>
<li>我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</li>
</ol>
<h3 id="组件仍然保有局部状态"><a href="#组件仍然保有局部状态" class="headerlink" title="组件仍然保有局部状态"></a>组件仍然保有局部状态</h3><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p>
<p>this.$store.state<br>this.$store.commit(‘mutationName’)</p>
<h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    return this.<span class="variable">$store</span><span class="selector-class">.state</span><span class="selector-class">.todos</span><span class="selector-class">.filter</span>(todo =&gt; todo.done)<span class="selector-class">.length</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Vuex 允许我们在 store 中定义『getters』（可以认为是 store 的计算属性）。Getters 接受 state 作为其第一个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; id: <span class="number">1</span>, text: '...', done: true &#125;,</div><div class="line">      &#123; id: <span class="number">2</span>, text: '...', done: false &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doneTodos: <span class="keyword">state</span> =&gt; &#123;</div><div class="line">      return <span class="keyword">state</span>.todos.filter(todo =&gt; todo.done)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Getters 也可以接受其他 getters 作为第二个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getters: &#123;</div><div class="line">  // ...</div><div class="line">  doneTodosCount: (<span class="keyword">state</span>, getters) =&gt; &#123;</div><div class="line">    return getters.doneTodos.length</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h2><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line"><span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></div><div class="line">  ...mapGetters([</div><div class="line">    <span class="string">'doneTodosCount'</span>,</div><div class="line">    <span class="string">'anotherGetter'</span>,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mapGetters</span>(&#123;</div><div class="line">  <span class="comment">// 映射 this.doneCount 为 store.getters.doneTodosCount</span></div><div class="line">  <span class="attribute">doneCount</span>: <span class="string">'doneTodosCount'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h1><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p>
<blockquote>
<p>Vuex 中的 mutations 非常类似于事件：</p>
</blockquote>
<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。<br>这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123;</div><div class="line">    count: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;</div><div class="line">      // 变更状态</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="提交-mutation"><a href="#提交-mutation" class="headerlink" title="提交 mutation"></a>提交 mutation</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>提交载荷（Payload）</p>
</blockquote>
<p>你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>, &#123;</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'increment'</span>,</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="mapMutations-组件中提交"><a href="#mapMutations-组件中提交" class="headerlink" title="mapMutations 组件中提交"></a>mapMutations 组件中提交</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      <span class="string">'increment'</span></div><div class="line">      <span class="regexp">//</span> 映射 <span class="keyword">this</span>.increment() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      add: <span class="string">'increment'</span></div><div class="line">      <span class="regexp">//</span> 映射 <span class="keyword">this</span>.add() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="状态操作"><a href="#状态操作" class="headerlink" title="状态操作"></a>状态操作</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const mutations = &#123;</div><div class="line">  [types.Increment] (<span class="keyword">state</span>, params) &#123;</div><div class="line">    <span class="keyword">state</span>.searchKey = params</div><div class="line">  &#125;,</div><div class="line">  increment (<span class="keyword">state</span>, params) &#123;</div><div class="line">    <span class="keyword">state</span>.searchKey = params</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用 —— 实质上任何在回调函数中进行的的状态的改变都是不可追踪的。</p>
<h2 id="下一步：Actions"><a href="#下一步：Actions" class="headerlink" title="下一步：Actions"></a>下一步：Actions</h2><p>在 mutation 中混合异步调用会导致你的程序很难调试。<br>例如，当你能调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，mutation 都是同步事务：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">store.commit(<span class="string">'increment'</span>)</div><div class="line"><span class="regexp">//</span> 任何由 <span class="string">"increment"</span> 导致的状态变更都应该在此刻完成。</div></pre></td></tr></table></figure></p>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>Action 类似于 mutation，不同在于：</p>
<ol>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ol>
<p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  increment (context) &#123;</div><div class="line">    context.commit(<span class="string">'increment'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">actions: &#123;</div><div class="line">  increment (&#123; commit &#125;) &#123;</div><div class="line">    commit(<span class="string">'increment'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="dispatch-分发-Action"><a href="#dispatch-分发-Action" class="headerlink" title="dispatch 分发 Action"></a>dispatch 分发 Action</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'getTravelsList'</span>)</div></pre></td></tr></table></figure>
<h2 id="载荷分发-Action"><a href="#载荷分发-Action" class="headerlink" title="载荷分发 Action"></a>载荷分发 Action</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以载荷形式分发</span></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(<span class="string">'incrementAsync'</span>, &#123;</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 以对象形式分发</span></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'incrementAsync'</span>,</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="mapActions-组件分发"><a href="#mapActions-组件分发" class="headerlink" title="mapActions 组件分发"></a>mapActions 组件分发</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  ...mapActions([</div><div class="line">    <span class="string">'increment'</span> <span class="regexp">//</span> 映射 this.increment() 为 this.<span class="variable">$store</span>.dispatch(<span class="string">'increment'</span>)</div><div class="line">  ]),</div><div class="line">  ...mapActions(&#123;</div><div class="line">    add: <span class="string">'increment'</span> <span class="regexp">//</span> 映射 this.add() 为 this.<span class="variable">$store</span>.dispatch(<span class="string">'increment'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组合-Actions"><a href="#组合-Actions" class="headerlink" title="组合 Actions"></a>组合 Actions</h2><p>一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  actionA (&#123; commit &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        commit(<span class="string">'someMutation'</span>)</div><div class="line">        resolve()</div><div class="line">      &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">store.dispatch(<span class="string">'actionA'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">actions: &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      commit(<span class="string">'someOtherMutation'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，如果我们利用 async / await 这个 JavaScript 即将到来的新特性，我们可以像这样组合 action：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  <span class="function"><span class="keyword">async</span> <span class="title">actionA</span> (<span class="params">&#123; commit &#125;</span>) </span>&#123;</div><div class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">async</span> <span class="title">actionB</span> (<span class="params">&#123; dispatch, commit &#125;</span>) </span>&#123;</div><div class="line">    <span class="comment">// 等待 actionA 完成</span></div><div class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>)</div><div class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。<br>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;,</div><div class="line">  getters: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const moduleB = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    a: moduleA,</div><div class="line">    b: moduleB</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.<span class="keyword">state</span>.a // -&gt; moduleA 的状态</div><div class="line">store.<span class="keyword">state</span>.b // -&gt; moduleB 的状态</div></pre></td></tr></table></figure></p>
<h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; count: <span class="number">0</span> &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;</div><div class="line">      // <span class="keyword">state</span> 模块的局部状态</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doubleCount (<span class="keyword">state</span>) &#123;</div><div class="line">      return <span class="keyword">state</span>.count * <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  actions: &#123;</div><div class="line">    incrementIfOddOnRootSum (&#123; <span class="keyword">state</span>, commit, rootState &#125;) &#123;</div><div class="line">      if ((<span class="keyword">state</span>.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</div><div class="line">        commit('increment')</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于模块内部的 getter，根节点状态会作为第三个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  getters: &#123;</div><div class="line">    sumWithRootCount (<span class="keyword">state</span>, getters, rootState) &#123;</div><div class="line">      return <span class="keyword">state</span>.count + rootState.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>模块内部的 action、mutation、和 getter 现在仍然注册在全局命名空间——这样保证了多个模块能够响应同一 mutation 或 action。你可以通过添加前缀或后缀的方式隔离各模块，以避免名称冲突。你也可能希望写出一个可复用的模块，其使用环境不可控。例如，我们想创建一个 todos 模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// types.js</span></div><div class="line"></div><div class="line"><span class="comment">// 定义 getter、action、和 mutation 的名称为常量，以模块名 `todos` 为前缀</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DONE_COUNT = <span class="string">'todos/DONE_COUNT'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_ALL = <span class="string">'todos/FETCH_ALL'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOGGLE_DONE = <span class="string">'todos/TOGGLE_DONE'</span></div><div class="line"><span class="comment">// modules/todos.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../types'</span></div><div class="line"></div><div class="line"><span class="comment">// 使用添加了前缀的名称定义 getter、action 和 mutation</span></div><div class="line"><span class="keyword">const</span> todosModule = &#123;</div><div class="line">  <span class="attr">state</span>: &#123; <span class="attr">todos</span>: [] &#125;,</div><div class="line">  <span class="attr">getters</span>: &#123;</div><div class="line">    [types.DONE_COUNT] (state) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">actions</span>: &#123;</div><div class="line">    [types.FETCH_ALL] (context, payload) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mutations</span>: &#123;</div><div class="line">    [types.TOGGLE_DONE] (state, payload) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="模块动态注册"><a href="#模块动态注册" class="headerlink" title="模块动态注册"></a>模块动态注册</h2><p>在 store 创建之后，你可以使用 store.registerModule 方法注册模块<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.registerModule</span>(<span class="string">'myModule'</span>, &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="模块化-1"><a href="#模块化-1" class="headerlink" title="模块化"></a>模块化</h1><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li>问题：loading加载<br>最近浏览到篇文章，普通loading只能通过控制单一的显示，而且多次条用很容易报错。<a href="https://github.com/deboyblog/vue-vuex-loading" title="结合Vuex制作一个完美的Loading组件" target="_blank" rel="external">vue-vuex-loading</a></li>
</ol>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ul>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart" target="_blank" rel="external">shopping-cart</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/counter" target="_blank" rel="external">Counter</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/counter-hot" target="_blank" rel="external">Counter with Hot Reload</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/todomvc" target="_blank" rel="external">TodoMVC</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/chat" target="_blank" rel="external">Flux Chat</a></li>
<li><a href="https://github.com/1657413883/blog-notes/issues/8" target="_blank" rel="external">浅谈Vuex</a></li>
<li><a href="https://segmentfault.com/a/1190000007667542" title="模块拆分多余零碎" target="_blank" rel="external">Vuex下Store的模块化拆分实践</a></li>
<li><a href="http://www.jianshu.com/p/caff7b8ab2cf" target="_blank" rel="external">Vuex 通俗版教程</a></li>
<li><a href="https://tech.meituan.com/vuex-code-analysis.html" target="_blank" rel="external">Vuex框架原理与源码分析</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;Vuex&lt;/strong&gt;是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;
&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;&lt;p&gt;[ ] 严格模式&lt;br&gt;[ ] 测试&lt;br&gt;[ ] 插件&lt;br&gt;[ ] 热重载&lt;br&gt;[ ]&lt;br&gt;[x]&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>移动端真机调试实战经验</title>
    <link href="http://luuman.github.io/2017/04/19/Tool/FEDebug/"/>
    <id>http://luuman.github.io/2017/04/19/Tool/FEDebug/</id>
    <published>2017-04-19T06:11:20.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> Git的使用技巧:</strong><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq内置浏览器中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。本文介绍的调试方法有一下几种：<br>iphone+safari<br>android手机+pc<br>微信开发者工具<br>weinre<br>使用webstorm<br>使用Fiddle抓包</p>
<p>这几种方法基本说涵盖了我们平时开发中所遇到的各种情况，各种主流设备都可以覆盖。其中最方便快捷的是使用webstorm自带的服务器，只需要一键就可以~，但是这样只能预览，不能调试。我个人比较推荐的方法是iphone+safari或者安卓手机+pc的这种方式，比较简单方便快捷，然后根据具体的环境再选择更为合适的调试方法。目前我认为使用weinre+fiddle是万能的，没有什么调试不了了~但是需要学习的成本也是最高的~希望大家都能够写出漂亮的页面，不需要为调试发愁哈~</p>
<h2 id="iphone-safari"><a href="#iphone-safari" class="headerlink" title="iphone+safari"></a>iphone+safari</h2><p>之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合<br>iphone上设置<br>设置 → Safari → 高级 → Web 检查器 → 开。<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/5634b9929be3e77d61b361d03efab6ea" alt="">这里写图片描述</p>
<p>pc端safari设置<br>Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/e8b0fccddf44a6d53ebe0170d4626b2b.jpg" alt="">这里写图片描述</p>
<p>设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/4/10/dd21015037825ccfb74c99eff58eaa17.jpg" alt=""></p>
<h2 id="android手机-pc"><a href="#android手机-pc" class="headerlink" title="android手机+pc"></a>android手机+pc</h2><p>安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭<br>首先需要装chrom浏览器<br>打开手机的开发者模式，一般是：设置-&gt;关于手机-&gt;版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开<img src="https://user-gold-cdn.xitu.io/2017/4/10/b03e8ca7e78f13c3c394147694a23c18.png!web" alt=""></p>
<p>将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定<img src="https://user-gold-cdn.xitu.io/2017/4/10/abd4ed097439a996e609bd44578216d6.png!web" alt=""></p>
<p>在手机chrom上打开要调试的页面<br>在电脑上打开chrom，新开一地址栏为chrome://inspect/<br>的页面,然后就可以调试了<img src="https://user-gold-cdn.xitu.io/2017/4/10/59da83f5822c8761cb397b1bdd152808.png!web" alt=""></p>
<p>点击inspect弹出chrom调试工具</p>
<p>微信开发者工具<br>由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享<br>前期准备<br>这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。<br>官方文档&amp;下载地址<br><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fwiki%3Ft%3Dresource%2Fres_main%26amp%3Bid%3Dmp1455784140%26amp%3Btoken%3D%26amp%3Blang%3Dzh_CN" target="_blank" rel="external">官方文档</a>其中有下载地址</p>
<h2 id="模拟微信环境调试"><a href="#模拟微信环境调试" class="headerlink" title="模拟微信环境调试"></a>模拟微信环境调试</h2><p>直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求<br>真机调试<br>在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥…<br>—————3.29更———————我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/ea5c1485010b540f5c5746dcb11885ed" alt=""></p>
<p>然后根据提示一步一步安装就可以了。安装完证书就可以打开网页了<br>weinre<br>跟着我念三遍weinre大法好，weinre大法好，weinre大法好~之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！缺点就是配置起来有削微的麻烦~<br>什么是weinre<br>weinre是web inspector remote（远程web检查器）的缩写<br>安装weinre<br>目前安装weinre我了解到有两种方式：node和java两种方式<br>node方式安装weinre<br>首先确保你的电脑上有node环境，然后使用npm来安装windows下npm install weinre -g –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a><br>mac下sudo npm install weinre -g –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
<p>java环境下安装weinre<br>首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: <a href="https://link.juejin.im/?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F1slRiOl3" target="_blank" rel="external">https://pan.baidu.com/s/1slRiOl3</a> 密码: dsmp</p>
<h2 id="运行weinre"><a href="#运行weinre" class="headerlink" title="运行weinre"></a>运行weinre</h2><p>node环境下<br>weinre –httpPort 8081 –boundHost -all-<br>8081<br>是调试服务器运行的端口号，boundHost<br>是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具<br>java环境下<br>在weinre所在文件夹的地址栏输入代码：java -jar weinre.jar –httpPort 8081 –boundHost -all-</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/4/10/f12671df3da397d2d2d4b90352866ef4" alt=""></p>
<p>开始调试<br>设置好端口之后我们在本地打开<a href="http://192.168.0.126:8081" target="_blank" rel="external">http://192.168.0.126:8081</a><br>然后就可以看见weinre的基本信息<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/0c71a5a5cddaffb1a31a1a9d2daefa8c.gif" alt=""></p>
<p>之后我们需要在需要调试的页面上加上一段script标签<script src="http://192.168.0.126:8081/target/target-script-min.js#anonymous"></script><br>需要改为你自己的ip地址<br>ip的查询方式<br>在cmd输入ipconfig<br>，然后ipv4中后面跟的就是本机的ip地址<br>手机打开需要调试的链接<br>在staticWebDir目录下<br>本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：C:\Users\supfn\AppData\Roaming\npm\node_modules\weinre\web<br>，然后手机访问:<a href="http://192.168.0.126/contact_page/index.html" target="_blank" rel="external">http://192.168.0.126/contact_page/index.html</a><br>，然后在电脑上打开刚刚的页面<a href="http://196.168.0.126:8081" target="_blank" rel="external">http://196.168.0.126:8081</a></p>
<p><img src="https://user-gold-cdn.xitu.io/2017/4/10/a38f38a25e5c5d424bc79007984843bc.png" alt=""></p>
<p>点击debug client user interface<br>之后出现<img src="https://user-gold-cdn.xitu.io/2017/4/10/686360e5676fa97b2e172043704298c7.png" alt=""></p>
<p>，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的elements<br>和其他的tag就可以进行调试<br>在xampp下<br>因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。项目存放的地址是xampp\htdocs\app<br>修改配置：C:\Windows\System32\drivers\etc\hosts<br>文件下最后一行127.0.0.1 localhost ltrip.com fzc.com m.fzc.com m.ltrip.com<br>然后在C:\xampp\apache\conf\extra<br>文件里面修改</p>
<virtualhost *:80=""> DocumentRoot “C:\xampp\htdocs\ltrip” ServerName ltrip.com ServerAlias <directory "c:\xampp\htdocs\ltrip"=""> Options FollowSymLinks ExecCGI AllowOverride All Order allow,deny Allow from all Require all granted </directory></virtualhost>

<p>其中的ServerName ltrip.com<br>中的ltrip.com<br>就代替了”C:\xampp\htdocs\ltrip”<br>这个路径，所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:<a href="http://192.168.0.168/ltrip.com" target="_blank" rel="external">http://192.168.0.168/ltrip.com</a></p>
<p>使用webstorm<br>在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如file:///C:/Users/supfn/Desktop/contact_page/index.html<br>这样子的，在手机肯定访问不到我的电脑上的路径。这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。webstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器<br>使用Fiddle抓包<br>如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~fiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了<br>下载fiddler<br>Fiddler 下载地址 ：<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.telerik.com%2Fdownload%2Ffiddler" target="_blank" rel="external">https://www.telerik.com/download/fiddler</a>Fiddler 离线下载地址：<a href="https://link.juejin.im/?target=http%3A%2F%2Fpan.baidu.com%2Fs%2F1i3NvE8P" target="_blank" rel="external">http://pan.baidu.com/s/1i3NvE8P</a> 密码：ozem<br>使用fiddler抓取数据包<br>在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888在fiddler上，点击菜单栏中的 [Tools] –&gt; [Fiddler Options]<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/dbef5c27072d4ed9caa86d73bbab8e7e" alt=""></p>
<p>点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK<img src="https://user-gold-cdn.xitu.io/2017/4/10/44b4e15c76a89426f9a3651874af2981" alt=""></p>
<p>使用weinre与fiddler组合<br>我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签在完成配置之后打开要调试的链接，然后在fiddler中设置断点我们在fiddler中打下页面断点,bpafter + 想要打断点的网址<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/ab4655c2c3014124a5ba321377c1832f.png!web" alt=""></p>
<p>再次访问该网站，发现本条请求被block住了<img src="https://user-gold-cdn.xitu.io/2017/4/10/c4d25cadaa92486846378762dd773d42" alt="">这里写图片描述</p>
<p>然后在右边加上weinre需要的script标签<script src="http://192.168.0.126:8081/target/target-script-min.js#anonymous"></script><br>然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fqq_21445563%2Farticle%2Fdetails%2F51017605" target="_blank" rel="external">Fiddler 抓包工具总结</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fjhyxk2007%2Fp%2F5089997.html" target="_blank" rel="external">移动端调试工具weinre安装教程（java版）</a><br><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.tuicool.com%2Farticles%2FMbYz6fA" target="_blank" rel="external">聊一聊移动调试那些事儿</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; Git的使用技巧:&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="http://luuman.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Video</title>
    <link href="http://luuman.github.io/2017/03/25/Induce/HTML/Video/"/>
    <id>http://luuman.github.io/2017/03/25/Induce/HTML/Video/</id>
    <published>2017-03-25T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>今天我们就来说一说，移动端视频Video的使用兼容问题。略测试了一下，移动端是个重灾区。<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoplay</td>
<td>自动开始播放，不会停下来等着数据载入结束。</td>
</tr>
<tr>
<td>preload</td>
<td>视频预加载</td>
</tr>
<tr>
<td>controls</td>
<td>出现控制条</td>
</tr>
<tr>
<td>loop</td>
<td>循环播放</td>
</tr>
<tr>
<td>src</td>
<td>视频URL</td>
</tr>
<tr>
<td>poster</td>
<td>用于在用户播放或者跳帧之前展示</td>
</tr>
<tr>
<td>width</td>
<td>指定视频宽度（通常在css中指定）</td>
</tr>
<tr>
<td>height</td>
<td>指定视频高度（通常在css中指定）</td>
</tr>
<tr>
<td>buffered</td>
<td>读取到哪段时间范围内的媒体被缓存了</td>
</tr>
<tr>
<td>height</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>play</td>
<td>视频开始播放触发的事件（触发此事件，但是视频不一定可以播放）</td>
</tr>
<tr>
<td>playing</td>
<td>视频可以播放触发的事件</td>
</tr>
<tr>
<td>timeupdate</td>
<td>音频/视频（audio/video）的播放位置发生改变时触发</td>
</tr>
<tr>
<td>pause</td>
<td>视频停止播放触发的事件</td>
</tr>
<tr>
<td>ended</td>
<td>视频播放结束或中断触发的事件</td>
</tr>
</tbody>
</table>
<p>durationchange<br>progress</p>
<h1 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h1><h2 id="ended"><a href="#ended" class="headerlink" title="ended"></a>ended</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$refs.video.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ended'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h1><h2 id="视频截图"><a href="#视频截图" class="headerlink" title="视频截图"></a>视频截图</h2><p>没有设置poster时，由于移动端设备多样，部分浏览器不支持</p>
<h2 id="是否显示播放按钮"><a href="#是否显示播放按钮" class="headerlink" title="是否显示播放按钮"></a>是否显示播放按钮</h2><p>移动端</p>
<h2 id="Android微信端使用的是微信自带的播放器插件"><a href="#Android微信端使用的是微信自带的播放器插件" class="headerlink" title="Android微信端使用的是微信自带的播放器插件"></a>Android微信端使用的是微信自带的播放器插件</h2><p>x5-video-player-type=”h5”，播放时不适用微信的播放器。</p>
<h2 id="iOS全屏播放"><a href="#iOS全屏播放" class="headerlink" title="iOS全屏播放"></a>iOS全屏播放</h2><p>没有添加playsinline【webkit-playsinline】，点击播放会弹出iphone自带的播放器，全屏播放。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="external">mozilla <video></video></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats" target="_blank" rel="external">HTML的媒体支持:audio和video元素</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="https://segmentfault.com/a/1190000006857675#articleHeader7" target="_blank" rel="external">html5–移动端视频video的android兼容，去除播放控件、全屏等</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;今天我们就来说一说，移动端视频Video的使用兼容问题。略测试了一下，移动端是个重灾区。&lt;br&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://luuman.github.io/categories/HTML/"/>
    
    
      <category term="Video" scheme="http://luuman.github.io/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="http://luuman.github.io/2017/03/25/FrontFrame/Vue/VueRouter/"/>
    <id>http://luuman.github.io/2017/03/25/FrontFrame/Vue/VueRouter/</id>
    <published>2017-03-25T10:29:00.000Z</published>
    <updated>2017-08-09T05:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>Vue.js通过简洁的API提供高效的数据绑定和灵活的组件系统。最近在Github上看到了不少Vue的项目，很好奇，决定尝试尝试。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>[ ] history的后退配置<br>[ ] 路由懒加载<br>[ ] 滚动行为<br>[ ] router.beforeEach<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Active <span class="keyword">from</span> <span class="string">'VIEW/active/active'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="comment">// 通过这个这个属性（是个函数），可以让应用像浏览器的原生表现那样，在按下 后退/前进 按钮时，简单地让页面滚动到顶部或原来的位置。</span></div><div class="line"><span class="keyword">const</span> scrollBehavior = <span class="function">(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (savedPosition) &#123;</div><div class="line">    <span class="keyword">return</span> savedPosition</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">	<span class="attr">mode</span>: <span class="string">'history'</span>,</div><div class="line">	<span class="comment">// history: 依赖 HTML5 History API 和服务器配置。</span></div><div class="line">  base: __dirname,</div><div class="line">  <span class="comment">// 默认值: “/”，应用的基路径，一般就是项目的根目录，webpack中有配置好。</span></div><div class="line">  linkActiveClass:<span class="string">'link-active'</span>,</div><div class="line">  scrollBehavior,</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'Active'</span>,</div><div class="line">      <span class="attr">component</span>: Active</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">  <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  <span class="attribute">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attribute">components</span>: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>在 vue-router 的路由路径中使用『动态路径参数』（dynamic segment）来达到这个效果：</p>
<h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">path:</span> <span class="string">'/user/:username'</span>, <span class="string">component:</span> User &#125;</div><div class="line"><span class="regexp">/user/</span>evan</div><div class="line">&#123; <span class="string">path:</span> <span class="string">'/user/:username'</span>, <span class="string">component:</span> User &#125;</div><div class="line"><span class="regexp">/user/</span>evan<span class="regexp">/post/</span><span class="number">123</span></div><div class="line"></div><div class="line">参数不能不传</div></pre></td></tr></table></figure>
<h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><p>例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  <span class="string">'$route'</span> (to, form) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h3 id="高级匹配模式"><a href="#高级匹配模式" class="headerlink" title="高级匹配模式"></a>高级匹配模式</h3><p>vue-router 使用 <a href="https://github.com/pillarjs/path-to-regexp#parameters" target="_blank" rel="external">path-to-regexp</a> 作为路径匹配引擎，所以支持很多高级的匹配模式，例如：可选的动态路径参数、匹配零个或多个、一个或多个，甚至是自定义正则匹配。查看它的 文档 学习高阶的路径匹配，还有 这个例子 展示 vue-router 怎么使用这类匹配<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;,</div><div class="line"><span class="comment">// 参数前面使用“：”表示</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/params/:foo/:bar'</span> &#125;,</div><div class="line"><span class="comment">// 添加“？”使参数作为可选择</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/optional-params/:foo?'</span> &#125;,</div><div class="line"><span class="comment">// 匹配id为数字的链接</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/params-with-regex/:id(\\d+)'</span> &#125;,</div><div class="line"><span class="comment">// * 可以匹配任何东西</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/asterisk/*'</span> &#125;,</div><div class="line"><span class="comment">// 使用括号包裹，用？让其可选择</span></div><div class="line">make part <span class="keyword">of</span> th path optional by wrapping <span class="keyword">with</span> parens and add <span class="string">"?"</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/optional-group/(foo/)?bar'</span> &#125;</div><div class="line"></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params/foo/bar"</span>&gt;</span>/params/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-params"</span>&gt;</span>/optional-params<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-params/foo"</span>&gt;</span>/optional-params/foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params-with-regex/123"</span>&gt;</span>/params-with-regex/123<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params-with-regex/abc"</span>&gt;</span>/params-with-regex/abc<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/asterisk/foo"</span>&gt;</span>/asterisk/foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/asterisk/foo/bar"</span>&gt;</span>/asterisk/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-group/bar"</span>&gt;</span>/optional-group/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-group/foo/bar"</span>&gt;</span>/optional-group/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="匹配优先级"><a href="#匹配优先级" class="headerlink" title="匹配优先级"></a>匹配优先级</h3><p>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a><a href="http://jsfiddle.net/yyx990803/L7hscd8h/" target="_blank" rel="external">嵌套路由</a></h2><p>这里的 <router-view> 是最顶层的出口，渲染最高级路由匹配到的组件。同样地，一个被渲染组件同样可以包含自己的嵌套 <router-view>。例如，在 User 组件的模板添加一个 <router-view>：<br>children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/user/:id'</span>, <span class="attribute">component</span>: User,</div><div class="line">  <span class="attribute">children</span>: [</div><div class="line">  	<span class="comment">// 空的 子路由</span></div><div class="line">  	&#123; <span class="attribute">path</span>: <span class="string">''</span>, <span class="attribute">component</span>: UserHome &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 当 /user/:id/profile 匹配成功，</span></div><div class="line">      <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></div><div class="line">      <span class="attribute">path</span>: <span class="string">'profile'</span>,</div><div class="line">      <span class="attribute">component</span>: UserProfile</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 当 /user/:id/posts 匹配成功</span></div><div class="line">      <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></div><div class="line">      <span class="attribute">path</span>: <span class="string">'posts'</span>,</div><div class="line">      <span class="attribute">component</span>: UserPosts</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></router-view></router-view></router-view></p>
<p>注意：以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。</p>
<h2 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h2><h3 id="router-push-location"><a href="#router-push-location" class="headerlink" title="router.push(location)"></a>router.push(location)</h3><blockquote>
<p>router.push(location, onComplete?, onAbort?)</p>
</blockquote>
<p>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>
<table>
<thead>
<tr>
<th style="text-align:center">声明式</th>
<th style="text-align:center">编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td style="text-align:center">router.push(…)</td>
</tr>
</tbody>
</table>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串</span></div><div class="line"><span class="keyword">this</span>.$router.push(<span class="string">'home'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 对象</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">path:</span> <span class="string">'home'</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 命名的路由</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">name:</span> <span class="string">'user'</span>, <span class="string">params:</span> &#123; <span class="string">userId:</span> <span class="number">123</span> &#125;&#125;)</div><div class="line"><span class="keyword">this</span>.$route.params.userId</div><div class="line"></div><div class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">path:</span> <span class="string">'register'</span>, <span class="string">query:</span> &#123; <span class="string">plan:</span> <span class="string">'private'</span> &#125;&#125;)</div><div class="line"><span class="keyword">this</span>.$route.query.plan</div></pre></td></tr></table></figure>
<h3 id="router-replace-location"><a href="#router-replace-location" class="headerlink" title="router.replace(location)"></a>router.replace(location)</h3><blockquote>
<p>router.replace(location, onComplete?, onAbort?)</p>
</blockquote>
<p>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p>
<table>
<thead>
<tr>
<th style="text-align:center">声明式</th>
<th style="text-align:center">编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td>
<td style="text-align:center">router.replace(…)</td>
</tr>
</tbody>
</table>
<h3 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h3><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 前进 3 步记录</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">-100</span>)</div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">100</span>)</div></pre></td></tr></table></figure>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>通过一个名称来标识一个路由显得更方便一些<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/user/<span class="number">123</span></div><div class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;/router-link&gt;</span></div><div class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;/router-link&gt;</span></div><div class="line">this.<span class="variable">$router</span>.push(&#123; <span class="symbol">name:</span> <span class="string">'user'</span>, <span class="symbol">params:</span> &#123; <span class="symbol">userId:</span> <span class="number">123</span> &#125;&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a><a href="https://jsfiddle.net/posva/6du90epg/" target="_blank" rel="external">命名视图</a></h2><p>有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view one"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view two"</span> name=<span class="string">"a"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view three"</span> name=<span class="string">"b"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line"></div><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  route<span class="variable">s:</span> [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      component<span class="variable">s:</span> &#123;</div><div class="line">        defaul<span class="variable">t:</span> Foo,</div><div class="line">        <span class="variable">a:</span> Bar,</div><div class="line">        <span class="variable">b:</span> Baz</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="重定向-和-别名"><a href="#重定向-和-别名" class="headerlink" title="重定向 和 别名"></a>重定向 和 别名</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: <span class="string">'/b'</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: &#123; name: <span class="string">'foo'</span> &#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="动态返回重定向"><a href="#动态返回重定向" class="headerlink" title="动态返回重定向"></a>动态返回重定向</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: to =&gt; &#123;</div><div class="line">  // 方法接收 目标路由 作为参数</div><div class="line">  // return 重定向的 字符串路径/路径对象</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>别名：的功能让你可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, component: A, alias: <span class="string">'/b'</span> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h2><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br><a href="http://localhost:8680/#/Tap/btn/Github" target="_blank" rel="external">http://localhost:8680/#/Tap/btn/Github</a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="keyword">mode</span>: <span class="string">'history'</span>,</div><div class="line">  route<span class="variable">s:</span> [...]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>/user/:id<br>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="external">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>正如其名，vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p>
<h2 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h2><h3 id="router-beforeEach"><a href="#router-beforeEach" class="headerlink" title="router.beforeEach"></a>router.beforeEach</h3><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">to</span>: Route, from: Route, <span class="keyword">next</span>: <span class="function"><span class="keyword">Function</span></span></div><div class="line">router.beforeEach((<span class="keyword">to</span>, from, <span class="keyword">next</span>) =&gt; &#123;</div><div class="line">  // <span class="keyword">to</span> 和 from 都是 路由信息对象</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="to-Route"><a href="#to-Route" class="headerlink" title="to: Route:"></a>to: Route:</h4><p>即将要进入的目标 路由对象</p>
<h4 id="from-Route"><a href="#from-Route" class="headerlink" title="from: Route:"></a>from: Route:</h4><p>当前导航正要离开的路由</p>
<h4 id="next-Function"><a href="#next-Function" class="headerlink" title="next: Function:"></a>next: Function:</h4><p>一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p>
<p>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</p>
<p>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。</p>
<p>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p>
<h3 id="router-afterEach"><a href="#router-afterEach" class="headerlink" title="router.afterEach"></a>router.afterEach</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">after</span> 钩子没有 next 方法，不能改变导航：</div><div class="line">router.<span class="title">afterEach</span>(route =&gt; &#123;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="某个路由独享的钩子"><a href="#某个路由独享的钩子" class="headerlink" title="某个路由独享的钩子"></a>某个路由独享的钩子</h2><p>这些钩子与全局 before 钩子的方法参数是一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/foo'</span>,</div><div class="line">      <span class="attr">component</span>: Foo,</div><div class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="组件内的钩子"><a href="#组件内的钩子" class="headerlink" title="组件内的钩子"></a>组件内的钩子</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const Foo = &#123;</div><div class="line">  template: `...`,</div><div class="line">  beforeRouteEnter (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 在渲染该组件的对应路由被 confirm 前调用</div><div class="line">    <span class="regexp">//</span> 不！能！获取组件实例 `this`</div><div class="line">    <span class="regexp">//</span> 因为当钩子执行前，组件实例还没被创建</div><div class="line">  &#125;,</div><div class="line">  beforeRouteUpdate (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 在当前路由改变，但是该组件被复用时调用</div><div class="line">    <span class="regexp">//</span> 举例来说，对于一个带有动态参数的路径 <span class="regexp">/foo/</span>:id，在 <span class="regexp">/foo/</span><span class="number">1</span> 和 <span class="regexp">/foo/</span><span class="number">2</span> 之间跳转的时候，</div><div class="line">    <span class="regexp">//</span> 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</div><div class="line">    <span class="regexp">//</span> 可以访问组件实例 `this`</div><div class="line">  &#125;,</div><div class="line">  beforeRouteLeave (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 导航离开该组件的对应路由时调用</div><div class="line">    <span class="regexp">//</span> 可以访问组件实例 `this`</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><blockquote>
<p>导航完成之后获取：</p>
</blockquote>
<p>先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示『加载中』之类的指示。</p>
<blockquote>
<p>导航完成之前获取：</p>
</blockquote>
<p>导航完成前，在路由的 enter 钩子中获取数据，在数据获取成功后执行导航。</p>
<h3 id="导航完成后获取数据"><a href="#导航完成后获取数据" class="headerlink" title="导航完成后获取数据"></a>导航完成后获取数据</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">post</span>"&gt;</span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">loading</span>" <span class="title">v</span>-<span class="title">if</span>="<span class="title">loading</span>"&gt;</span></div><div class="line">      Loading...</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"error"</span> <span class="class"><span class="keyword">class</span>="<span class="title">error</span>"&gt;</span></div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"post"</span> <span class="class"><span class="keyword">class</span>="<span class="title">content</span>"&gt;</span></div><div class="line">      &lt;h2&gt;&lt;/h2&gt;</div><div class="line">      &lt;p&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  <span class="keyword">data</span> () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      loading: <span class="literal">false</span>,</div><div class="line">      post: <span class="literal">null</span>,</div><div class="line">      error: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created () &#123;</div><div class="line">    <span class="comment">// 组件创建完后获取数据，</span></div><div class="line">    <span class="comment">// 此时 data 已经被 observed 了</span></div><div class="line">    <span class="keyword">this</span>.fetchData()</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    <span class="comment">// 如果路由有变化，会再次执行该方法</span></div><div class="line">    <span class="string">'$route'</span>: <span class="string">'fetchData'</span></div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    fetchData () &#123;</div><div class="line">      <span class="keyword">this</span>.error = <span class="keyword">this</span>.post = <span class="literal">null</span></div><div class="line">      <span class="keyword">this</span>.loading = <span class="literal">true</span></div><div class="line">      <span class="comment">// replace getPost with your data fetching util / API wrapper</span></div><div class="line">      getPost(<span class="keyword">this</span>.$route.params.id, (err, post) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">this</span>.error = err.toString()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在导航完成前获取数据"><a href="#在导航完成前获取数据" class="headerlink" title="在导航完成前获取数据"></a>在导航完成前获取数据</h3><p>我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 beforeRouteEnter 钩子中获取数据，当数据获取成功后只调用 next 方法。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      post: <span class="literal">null</span>,</div><div class="line">      error: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</div><div class="line">    getPost(to.params.id, <span class="function">(<span class="params">err, post</span>) =&gt;</span> </div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// display some global error message</span></div><div class="line">        next(<span class="literal">false</span>)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">          vm.post = post</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">        vm.votes = response.data.items</div><div class="line">        vm.jsons = <span class="number">1</span></div><div class="line">      &#125;)</div><div class="line">    &#125;, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      next(<span class="literal">false</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 路由改变前，组件就已经渲染完了</span></div><div class="line">  <span class="comment">// 逻辑稍稍不同</span></div><div class="line">  watch: &#123;</div><div class="line">	  $route () &#123;&#125;</div><div class="line">    <span class="string">'$route'</span>: () &#123;</div><div class="line">      <span class="keyword">this</span>.post = <span class="literal">null</span></div><div class="line">      getPost(<span class="keyword">this</span>.$route.params.id, <span class="function">(<span class="params">err, post</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">this</span>.error = err.toString()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><p>注意: 这个功能只在 HTML5 history 模式下可用。<br>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  routes: [...],</div><div class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</div><div class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>为了提高页面首屏加载时间，将相关的路由结合分割，提高页面效率。结合Vue的异步组件和Webpack的code splitting feature,轻松实现路由组件的懒加载。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// require.ensure 是 Webpack 的特殊语法，用来设置 code-split point</span></div><div class="line">  <span class="comment">// （代码分块）</span></div><div class="line">  <span class="built_in">require</span>.ensure([<span class="string">'./Foo.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="built_in">require</span>(<span class="string">'./Foo.vue'</span>))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AMD-风格的-require"><a href="#AMD-风格的-require" class="headerlink" title="AMD 风格的 require"></a>AMD 风格的 require</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./Foo.vue'</span>], resolve)</div></pre></td></tr></table></figure>
<h3 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h3><p>有时候我们想把某个路由下的所有组件都打包在同个异步 chunk 中。只需要 给 chunk 命名，提供 require.ensure 第三个参数作为 chunk 的名称:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Foo.vue'</span>)), <span class="string">'group-foo'</span>)</div><div class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Bar.vue'</span>)), <span class="string">'group-foo'</span>)</div><div class="line"><span class="keyword">const</span> Baz = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Baz.vue'</span>)), <span class="string">'group-foo'</span>)</div></pre></td></tr></table></figure>
<p>Webpack 将相同 chunk 下的所有异步模块打包到一个异步块里面 —— 这也意味着我们无须明确列出 require.ensure 的依赖（传空数组就行）。</p>
<p>webpack.config.js<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var webpackConfig = merge(baseWebpackConfig, &#123;</div><div class="line">  <span class="attribute">module</span>: &#123;</div><div class="line">    rules: utils<span class="variable">.styleLoaders</span>(&#123;</div><div class="line">      sourceMap: config<span class="variable">.build</span><span class="variable">.productionSourceMap</span>,</div><div class="line">      extract: true</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  // devtool: config<span class="variable">.build</span><span class="variable">.productionSourceMap</span> ? '#source-map' : false,</div><div class="line">  output: &#123;</div><div class="line">    path: config<span class="variable">.build</span><span class="variable">.assetsRoot</span>,</div><div class="line">    filename: utils<span class="variable">.assetsPath</span>('js/[name].[chunkhash]<span class="variable">.js</span>'),</div><div class="line">    // chunkFilename: utils<span class="variable">.assetsPath</span>('js/[id].[chunkhash]<span class="variable">.js</span>')</div><div class="line">    chunkFilename: utils<span class="variable">.assetsPath</span>('js/[name].[chunkhash]<span class="variable">.min</span><span class="variable">.js</span>')</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<h1 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h1><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p><code>&lt;router-link&gt;</code> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。<br>也可以使用：<code>&lt;a v-link=&quot;{name: &#39;user&#39;, params: {userId: 1}&quot;&gt;This is a user whose id is 1&lt;/a&gt;</code></p>
<h2 id="Props参数"><a href="#Props参数" class="headerlink" title="Props参数"></a>Props参数</h2><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><p>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</p>
<blockquote>
<p>字符串</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>表达式</p>
</blockquote>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式'home' --&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; path: 'home' &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; name: 'user', params: &#123; userId: 123 &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; path: 'register', query: &#123; plan: 'private' &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: '/abc'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="append-相对路径"><a href="#append-相对路径" class="headerlink" title="append 相对路径"></a>append 相对路径</h3><p>设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'relative/path'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="tag-渲染标签"><a href="#tag-渲染标签" class="headerlink" title="tag 渲染标签"></a>tag 渲染标签</h3><p>有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span> <span class="attr">tag</span>=<span class="string">"li"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></li></router-link></p>
<h3 id="active-class"><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h3><p>设置链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;router-link active-<span class="keyword">class</span> <span class="title">replace</span> <span class="title">to</span>=<span class="string">"/Tap/btn"</span>&gt;proImg&lt;/router-link&gt;</div><div class="line"></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">	mode: <span class="string">'history'</span>,</div><div class="line">	linkActiveClass:<span class="string">'link-active'</span>,</div><div class="line">	routes: []</div><div class="line">&#125;);</div><div class="line"></div><div class="line">.link-active&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h3><p>“是否激活”默认类名的依据是inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 CSS 类名。<br><a href="https://jsfiddle.net/8xrk1n9f/" target="_blank" rel="external">Active Links</a></p>
<h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><p>声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。<br>默认值: ‘click’</p>
<h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p><code>&lt;router-view&gt;</code> 组件是一个 functional 组件，渲染路径匹配到的视图组件。<code>&lt;router-view&gt;</code> 渲染的组件还可以内嵌自己的 <code>&lt;router-view&gt;</code>，根据嵌套路径，渲染嵌套组件。</p>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view one"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view two"</span> name=<span class="string">"a"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view three"</span> name=<span class="string">"b"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>keep-alive</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;transition&gt;</span></div><div class="line">  <span class="section">&lt;keep-alive&gt;</span></div><div class="line">    <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></div><div class="line">  <span class="section">&lt;/keep-alive&gt;</span></div><div class="line"><span class="section">&lt;/transition&gt;</span></div></pre></td></tr></table></figure>
<h2 id="路由信息对象"><a href="#路由信息对象" class="headerlink" title="路由信息对象"></a>路由信息对象</h2><p>一个 <code>route object</code>（路由信息对象） 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的 route records（路由记录）。</p>
<h3 id="route-Watcher"><a href="#route-Watcher" class="headerlink" title="$route Watcher"></a>$route Watcher</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  <span class="string">'$route'</span> (<span class="keyword">to</span>, <span class="keyword">from</span>) &#123;</div><div class="line">    <span class="keyword">const</span> toDepth = <span class="keyword">to</span>.path.split(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">const</span> fromDepth = <span class="keyword">from</span>.path.split(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">if</span> (toDepth.length === fromDepth.length) &#123;</div><div class="line">      <span class="keyword">if</span> (toDepth[toDepth.length - <span class="number">1</span>] === <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'vux-pop-in'</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'vux-pop-out'</span></div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.transitionName = toDepth &lt; fromDepth ? <span class="string">'vux-pop-in'</span> : <span class="string">'vux-pop-out'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function"><span class="params">(to, <span class="keyword">from</span>, <span class="built_in">next</span>)</span> =&gt;</span> &#123;</div><div class="line">  // to 和 <span class="keyword">from</span> 都是 路由信息对象</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="this-route"><a href="#this-route" class="headerlink" title="this.$route"></a>this.$route</h3><h4 id="route-path-绝对路径"><a href="#route-path-绝对路径" class="headerlink" title="$route.path 绝对路径"></a>$route.path 绝对路径</h4><h4 id="route-params-路由参数"><a href="#route-params-路由参数" class="headerlink" title="$route.params 路由参数"></a>$route.params 路由参数</h4><p>关于动态片段（如/user/:username)的键值对信息,如{username: ‘paolino’}</p>
<h4 id="route-query-URL查询参数"><a href="#route-query-URL查询参数" class="headerlink" title="$route.query URL查询参数"></a>$route.query URL查询参数</h4><p>请求参数，如/foo?user=1获取到query.user = 1</p>
<h4 id="route-hash"><a href="#route-hash" class="headerlink" title="$route.hash"></a>$route.hash</h4><p>当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</p>
<h4 id="route-fullPath"><a href="#route-fullPath" class="headerlink" title="$route.fullPath"></a>$route.fullPath</h4><p>完成解析后的 URL，包含查询参数和 hash 的完整路径。</p>
<h4 id="route-matched"><a href="#route-matched" class="headerlink" title="$route.matched"></a>$route.matched</h4><p>数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line"><span class="symbol">  routes:</span> [</div><div class="line">    <span class="comment">// 下面的对象就是 route record</span></div><div class="line">    &#123; <span class="string">path:</span> <span class="string">'/foo'</span>, <span class="string">component:</span> Foo,</div><div class="line"><span class="symbol">      children:</span> [</div><div class="line">        <span class="comment">// 这也是个 route record</span></div><div class="line">        &#123; <span class="string">path:</span> <span class="string">'bar'</span>, <span class="string">component:</span> Bar &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当 URL 为 /foo/bar，$route.matched 将会是一个包含从上到下的所有对象（副本）。</p>
<h4 id="route-name"><a href="#route-name" class="headerlink" title="$route.name"></a>$route.name</h4><p>当前路由的名称，如果有的话<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/user/:userId'</span>,</div><div class="line">  name: <span class="string">'user'</span>,</div><div class="line">  component: User</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Router-构造配置"><a href="#Router-构造配置" class="headerlink" title="Router 构造配置"></a>Router 构造配置</h2><h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="comment">&lt;!-- 路径 --&gt;</span></div><div class="line">  path: string;</div><div class="line">  path: '',</div><div class="line">  <span class="comment">&lt;!-- 组件 --&gt;</span></div><div class="line">  component?: Component,</div><div class="line">  <span class="comment">&lt;!-- 命名路由 --&gt;</span></div><div class="line">  name?: string;</div><div class="line">  name?: '',</div><div class="line">  <span class="comment">&lt;!-- 命名视图组件 --&gt;</span></div><div class="line">  components?: &#123; [name: string]: Component &#125;,</div><div class="line">  redirect?: string | Location | Function,</div><div class="line">  alias?: string | Array<span class="tag">&lt;<span class="name">string</span>&gt;</span>,</div><div class="line">  <span class="comment">&lt;!-- 组件 --&gt;</span></div><div class="line">  children?: Array<span class="tag">&lt;<span class="name">RouteConfig</span>&gt;</span>;</div><div class="line">  children?: [],</div><div class="line">  <span class="comment">&lt;!-- 某个路由独享的钩子 --&gt;</span></div><div class="line">  beforeEnter?: (to: Route, from: Route, next: Function) =&gt; void,</div><div class="line">  beforeEnter: (to, from, next) =&gt; &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  <span class="comment">&lt;!-- 路由元信息 --&gt;</span></div><div class="line">  meta?: any</div><div class="line">  meta: &#123; requiresAuth: true &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">mode:</span> <span class="string">'history'</span>,</div></pre></td></tr></table></figure>
<blockquote>
<p>hash: </p>
</blockquote>
<p>使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器。</p>
<blockquote>
<p>history: </p>
</blockquote>
<p>依赖 HTML5 History API 和服务器配置。查看 HTML5 History 模式.</p>
<blockquote>
<p>abstract: </p>
</blockquote>
<p>支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。</p>
<h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。</p>
<h3 id="linkActiveClass"><a href="#linkActiveClass" class="headerlink" title="linkActiveClass"></a>linkActiveClass</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">linkActiveClass:</span><span class="string">'link-active'</span>,</div></pre></td></tr></table></figure>
<h3 id="scrollBehavior"><a href="#scrollBehavior" class="headerlink" title="scrollBehavior"></a>scrollBehavior</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</div><div class="line">    <span class="comment">// to 和 from 都是 路由信息对象</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">const scrollBehavior = (<span class="keyword">to</span>, <span class="keyword">from</span>, savedPosition) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (savedPosition) &#123;</div><div class="line">    <span class="comment">// savedPosition is only available for popstate navigations.</span></div><div class="line">    return savedPosition</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    const <span class="built_in">position</span> = &#123;&#125;</div><div class="line">    <span class="comment">// new navigation.</span></div><div class="line">    <span class="comment">// scroll to anchor by returning the selector</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">to</span>.hash) &#123;</div><div class="line">      <span class="built_in">position</span>.selector = <span class="keyword">to</span>.hash</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// check if any matched route config has meta that requires scrolling to top</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">to</span>.matched.some(m =&gt; m.meta.scrollToTop)) &#123;</div><div class="line">      <span class="comment">// cords will be used if no selector is provided,</span></div><div class="line">      <span class="comment">// or if the selector didn't match any element.</span></div><div class="line">      <span class="built_in">position</span>.x = <span class="number">0</span></div><div class="line">      <span class="built_in">position</span>.y = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if the returned position is falsy or an empty object,</span></div><div class="line">    <span class="comment">// will retain current scroll position.</span></div><div class="line">    return <span class="built_in">position</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="导航钩子-1"><a href="#导航钩子-1" class="headerlink" title="导航钩子"></a>导航钩子</h3><p>增加全局的导航钩子</p>
<h4 id="router-beforeEach-guard"><a href="#router-beforeEach-guard" class="headerlink" title="router.beforeEach(guard)"></a>router.beforeEach(guard)</h4><h4 id="router-afterEach-hook"><a href="#router-afterEach-hook" class="headerlink" title="router.afterEach(hook)"></a>router.afterEach(hook)</h4><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>动态的导航到一个新 url</p>
<h4 id="router-push-location-1"><a href="#router-push-location-1" class="headerlink" title="router.push(location)"></a>router.push(location)</h4><h4 id="router-replace-location-1"><a href="#router-replace-location-1" class="headerlink" title="router.replace(location)"></a>router.replace(location)</h4><h4 id="router-go-n-到达"><a href="#router-go-n-到达" class="headerlink" title="router.go(n) 到达"></a>router.go(n) 到达</h4><h4 id="router-back-后退"><a href="#router-back-后退" class="headerlink" title="router.back() 后退"></a>router.back() 后退</h4><h4 id="router-forward-前进"><a href="#router-forward-前进" class="headerlink" title="router.forward() 前进"></a>router.forward() 前进</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">router.getMatchedComponents(location?)</div><div class="line"></div><div class="line">返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</div><div class="line"></div><div class="line">router.resolve(location, current?, append?)</div><div class="line"></div><div class="line">2.1.0+</div><div class="line"></div><div class="line">解析目标位置（格式和 &lt;router-link&gt; 的 <span class="keyword">to</span> prop 一样），返回包含如下属性的对象：</div><div class="line"></div><div class="line">&#123;</div><div class="line">  location: Location;</div><div class="line">  route:<span class="built_in"> Route;</span></div><div class="line">  href: string;</div><div class="line">&#125;</div><div class="line">router.addRoutes(routes)</div><div class="line"></div><div class="line">2.2.0+</div><div class="line"></div><div class="line">动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组。</div><div class="line"></div><div class="line">router.onReady(callback)</div><div class="line"></div><div class="line">2.2.0+</div><div class="line"></div><div class="line">添加一个会在第一次路由跳转完成时被调用的回调函数。此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候。</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://router.vuejs.org/en/#" target="_blank" rel="external">router</a></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28156233" target="_blank" rel="external">vue-router总结</a></p>
</li>
<li><p><a href="&quot;&quot;"></a></p>
</li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;Vue.js通过简洁的API提供高效的数据绑定和灵活的组件系统。最近在Github上看到了不少Vue的项目，很好奇，决定尝试尝试。&lt;/p&gt;
&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;&lt;p&gt;[ ] history的后退配置&lt;br&gt;[ ] 路由懒加载&lt;br&gt;[ ] 滚动行为&lt;br&gt;[ ] router.beforeEach&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Mac 快捷键</title>
    <link href="http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/"/>
    <id>http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/</id>
    <published>2017-03-21T10:29:20.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p>⌘：command<br>⌃：control<br>⌥：option<br>⇧：shift<br>↩：enter<br>⌫：delete</p>
<h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><pre><code>⌃ + ⇧ + T：打开文件夹控制台
⌘ + ⌥ + ⌃ + -&gt;：网易云下一曲
⌘ + ⌥ + ⌃ + &lt;-：网易云上一曲
⌘ + ⌥ + P：网易云暂停k
</code></pre><h3 id="通用（General）"><a href="#通用（General）" class="headerlink" title="通用（General）"></a>通用（General）</h3><pre><code>↑↓←→：上下左右移动光标，注意不是不是KJHL！
Alt：调出菜单
</code></pre><h3 id="整理（clear）"><a href="#整理（clear）" class="headerlink" title="整理（clear）"></a>整理（clear）</h3><pre><code>Tab：缩进：自动完成
Shift+Tab：去除缩进
Ctrl+KT：折叠属性
Ctrl+K0：展开所有
</code></pre><h3 id="窗口（Window）"><a href="#窗口（Window）" class="headerlink" title="窗口（Window）"></a>窗口（Window）</h3><pre><code>⌘ + 1、2、3：切换文件
</code></pre><h3 id="移动（Move）"><a href="#移动（Move）" class="headerlink" title="移动（Move）"></a>移动（Move）</h3><pre><code>⌘ + &lt;-：行首
⌘ + -&gt;：行尾
⌘ + ↑：头部
⌘ + ↓：尾部
⌘ + ⇧ + ↑：向上全选
⌘ + ⇧ + ↓：向下全选
⌘ + ⌃ + ↑/↓：移动当前行
Ctrl+←/→：进行逐词移动
</code></pre><!--     Ctrl+Shift+←/→进行逐词选择
    Ctrl+↑/↓移动当前显示区域
    Ctrl+Shift+↑/↓移动当前行
    Ctrl+D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl+D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl+K进行跳过，使用Ctrl+U进行回退，使用Esc退出多重
### 编辑
    Ctrl+Shift+L：将当前选中区域打散
### 文件（File）
    Ctrl+N：在当前窗口创建一个新标签
    Ctrl+O：打开文件
    Ctrl+Shift+T：打开最近关闭的文件
    Ctrl+S：保存
    Ctrl+Shift+S：另存为
    Ctrl+Shift+N：创建新窗口
    Ctrl+Shift+W：关闭窗口
    Ctrl+W：关闭当前标签，当窗口内没有标签时会关闭该窗口
### 编辑（Edit）
    Ctrl+Z：撤销
    Ctrl+Y：恢复
### 取消选择（Undo Selection）
    Ctrl+U：智能撤销
    Ctrl+ Shift+U：智能重做
    Ctrl+ Shift+V：粘贴并缩进
    Ctrl+K，Ctrl+V：
### 行（Line）
    Ctrl +]：缩进
    Ctrl +[：反缩进
    Ctrl + Shift + Up：上移一行 
    Ctrl + Shift + Down：下移一行
    Ctrl + Shift + D：复制行(加倍)
    Ctrl + Shift + K：删除行
    Ctrl + J：连接行
### 文本（Text）
    Ctrl+Shift+Enter：在当前行上面增加一行并跳至该行
    Ctrl+Alt+Enter：替换所有关键字匹配
    Ctrl+Enter：在当前行下面新增一行然后跳至该行
    Ctrl+Delete：删除单词前部
    Ctrl+Backspace：删除单词后部
    Ctrl+K，Ctrl+K：从光标处删除至行尾
    Ctrl+K+Backspace：从光标处删除至行首
    Ctrl+T：前后调转
### 注释（Comment）
    Ctrl+/：注释（如已选择内容，同“Ctrl+Shift+/”效果）
    Ctrl+Shift：/：块注释(注释已选择内容)
    Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的
### 标签（Tag）
    Alt+.：闭合当前标签
    Ctrl+Shift+A：选择标签(可重复)
    Ctrl+Shift+W：选择区域被标签包含
### （Mark）
    Ctrl+K， Alt+Space：设置记号
    Ctrl+K，Alt+A：选择到记号
    Ctrl+K，Alt+W：删除到记号
    Ctrl+K，Alt+S：交换(移动)记号
    Ctrl+K，Alt+G：移除记号
    Ctrl+K，Alt+Y：Yank
    Ctrl+K，Alt+J：取消所有折叠
### 代码折叠（Code Folding）
    Ctrl+Shift+[：折叠代码
    Ctrl+Shift+]：展开代码
    （Convert Case）
    Ctrl+K，Ctrl+U：改为大写
    Ctrl+K，Ctrl+L：改为小写
### （Wrap）
    Alt+Q：
    Ctrl+Space：显示提示
    F9：按行排序
    Ctrl+F9：按行排序(区分大小写)
### 选择（Selection）
    Ctrl+ Shift+L：分割为多光标(选择多行时)
    Ctrl+ Alt +Up：向上一行添加光标
    Ctrl+ Alt +Down：向下一行添加光标
    Escape单光标
### 扩展（Expand）
    Ctrl+A：全选
    Ctrl+L：选择整行（按住-继续选择下行）
    Ctrl+D：选词：（按住-继续选择下个相同的字符串）
    Ctrl+Shift+Space：快速选择当前作用域（Scope）的内容
    Ctrl+Shift+M：快速选择括号间的内容{}
    Ctrl+Shift+J：快速选择同缩进的内容
    Ctrl+Shift+A：选择光标位置父标签对儿
### 查找（Find）
    Ctrl+F：进行标准查找
    F3：跳至当前关键字下一个位置
    Shift+F3：跳到当前关键字上一个位置
    Ctrl +I：
    Ctrl +H：进行标准替换
    Ctrl+Shift+H：替换当前关键字
    Ctrl +F3：快速查询
    Alt +F3：选中当前关键字出现的所有位置
    Ctrl+D：快速查询下一个(多光标)
    Ctrl+K，Ctrl+D：快速查询跳过下一个(多光标)
    Ctrl+E：字
    Ctrl+Shift+E：字
    Ctrl+Shift+F：多文件搜索&替换
### 视图（View）
    Ctrl+K，Ctrl+B：侧边栏开关Side Bar
    Ctrl+`：调出控制台
    F11：切换普通全屏
    Shift+F11：切换无干扰全屏
    Alt+Shift+2：进行左右分屏
    Alt+Shift+5：进行上下左右分屏
    Alt+Shift+8：进行上下分屏。
    分屏，使用Ctrl+数字键跳转到指定屏，使用Ctrl+Shift+数字键将当前屏移动到指定屏
### 组（Group）：
    Ctrl+K，Ctrl+Up：
    Ctrl+K，Ctrl+ Shift+ Up：
    Ctrl+K，Ctrl+Down：
### 焦点小组（Focus Group）：
    Ctrl+K，Ctrl+Right：
    Ctrl+K，Ctrl+ Left：
    Ctrl+1：组间切换焦点
    Ctrl+ Shift +1：移动文件到组
    Syntax语法和文件类型、indentation缩排、Line Endings行尾结束符号
    F6：拼写检查
    Ctrl + F6：下一个错误
    Ctrl+Shift+ F6：上一个错误
### 跳转（Goto）
    Ctrl+P：跳转到指定文件
    Ctrl+R：跳转到指定符号
    Ctrl+Shift+R：
    F12：
    Ctrl+G：跳转到指定行号
    Alt+-：跳转到底部
    Alt+Shift +-：
### 文件开关（Switch File）
    Ctrl+Pagedown：下一个文件
    Ctrl+Pageup：上一个文件
    Ctrl+Tab：下一个文件(stack)
    Ctrl+Shift + Tab：上一个文件(stack)
    Alt+O：
    Alt+1：最近打开文件
### 滚动（Scroll）
    Ctrl+K，Ctrl+C：滚动到光标处
    Ctrl+Up：向上滚动一行(定光标)
    Ctrl+Down：向下滚动一行(定光标)
### 书签（Boolmarks）
    Ctrl+F2：设置书签
    F2：下一个书签
    Shift+F2：上一个书签
    Ctrl+Shift+F2：清除书签
    Alt+F2：全选书签
    Ctrl+M：在起始括号和结尾括号间切换
### 工具（Tools）
    Ctrl+Shift+P：调出命令板（Command Palette）
    Ctrl +B：
    Ctrl+Shift+B：
    Ctrl +Break：
    F4：
    Shift+ F4：
    Ctrl +Q：
    Ctrl+Shift+Q：
### 项目（Project）
    Ctrl+Alt+P：切换项目

#### 首选项（Preferences）
    Ctrl+ Keypad Plus：
    Ctrl+Shift+Keypad Plus：
    Help（帮助）


### Chrome
    ⌘ + ⌥ + J：调试工具
    ⌘ + 1、2、3：切换文件
    ⌘ + ⌥ + L：下载
    ⌘ + R：刷新

#### 标签页和窗口快捷键
    ⌘-N 打开新窗口。
    ⌘-T 打开新标签页。
    ⌘-Shift-N   在隐身模式下打开新窗口。
    按 ⌘-O，然后选择文件。   在 Chrome 浏览器中打开计算机中的文件。
    按住 ⌘ 的同时点击链接。或用鼠标中键（或鼠标滚轮）点击链接。 从后台在新标签页中打开链接。
    按住 ⌘-Shift 的同时点击链接。或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接。  在新标签页中打开链接并切换到刚打开的标签页。
    按住 Shift 键的同时点击链接。  在新窗口中打开链接。
    ⌘-Shift-T   重新打开上次关闭的标签页。Chrome 浏览器可记住最近关闭的 10 个标签页。
    将标签页拖出标签栏。  在新窗口中打开标签页。
    将标签页从标签栏拖到现有窗口中。    在现有窗口中打开标签页。
    同时按 ⌘-Option 和向右箭头键。    切换到下一个标签页。
    同时按 ⌘-Option 和向左箭头键。    切换到上一个标签页。
    ⌘-W 关闭当前标签页或弹出窗口。
    ⌘-Shift-W   关闭当前窗口。
    点击并按住浏览器工具栏中的后退或前进箭头。   在新标签页中显示浏览历史记录。
    按 Delete 或 ⌘-[  转到当前标签页的上一页浏览历史记录。
    按 Shift-Delete 或 ⌘-]    转到当前标签页的下一页浏览历史记录。
    按住 Shift 键的同时点击窗口左上角的 + 按钮。 最大化窗口。
    ⌘-M 最小化窗口。
    ⌘-H 隐藏 Chrome 浏览器。
    ⌘-Option-H  隐藏其他所有窗口。
    ⌘-Q 关闭 Chrome 浏览器。

#### Chrome 浏览器功能快捷键

    ⌘-Shift-B   打开和关闭书签栏。
    ⌘-Option-B  打开书签管理器。
    ⌘-, 打开“偏好设置”对话框。
    ⌘-Y 打开“历史记录”页。
    ⌘-Shift-J   打开“下载内容”页。
    ⌘-Shift-Delete  打开“清除浏览数据”对话框。

#### 地址栏快捷键

    键入搜索字词，然后按 Enter 键。 使用默认搜索引擎进行搜索。
    键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键。 使用与关键字相关联的搜索引擎进行搜索。
    首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键。   使用与网址相关联的搜索引擎进行搜索。
    键入网址，然后按 ⌘-Enter。   在新后台标签页中打开网址。
    ⌘-L 突出显示网址。
    ⌘-Option-F  在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索。
    同时按 Option 和向左箭头键。  将光标移到地址栏中的前一个关键字词
    同时按 Option 和向右箭头键。  在地址栏中将光标移到下一个关键字词
    同时按 Shift-Option 和向左箭头键。    在地址栏中突出显示上一关键字词
    同时按 Shift-Option 和向右箭头键。    在地址栏中突出显示下一关键字词
    ⌘-Delete    在地址栏中删除光标前的字词
    在地址栏菜单中按 Page Up 或 Page Down。   在菜单中选择上一条目或下一条目。

#### 网页快捷键

    ⌘-P 打印当前网页。
    ⌘-Shift-P   打开“网页设置”对话框。
    ⌘-S 保存当前网页。
    ⌘-Shift-I   通过电子邮件发送当前网页。
    ⌘-R 重新载入当前网页。
    ⌘-, 停止载入当前网页。
    ⌘-F 打开查找栏。
    ⌘-G 在查找栏中查找下一条与输入内容相匹配的内容。
    ⌘-Shift-G 或 Shift-Enter 在查找栏中查找上一条与输入内容相匹配的内容。
    ⌘-E 使用所选内容查找。
    ⌘-J 跳到所选内容。
    ⌘-Option-I  打开“开发人员工具”。
    ⌘-Option-J  打开“JavaScript 控制台”。
    ⌘-Option-U  打开当前网页的源代码。
    按住 Option 键，然后点击链接。 下载链接目标。
    将链接拖到书签栏中。  将链接保存为书签。
    ⌘-D 将当前网页保存为书签。
    ⌘-Shift-D   将所有打开的标签页以书签的形式保存在新文件夹中。
    ⌘-Shift-F   在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式。
    ⌘-+ 放大网页上的所有内容。
    ⌘ 和 -   缩小网页上的所有内容。
    ⌘-0 将网页上的所有内容恢复到正常大小。
    ⌘-Shift-H   在当前标签页中打开主页。
    空格键 向下滚动网页。
    ⌘-Option-F  搜索网页。

#### 文本快捷键

    ⌘-C 将突出显示的内容复制到剪贴板中。
    ⌘-Option-C  将您正在查看的网页的网址复制到剪贴板中。
    ⌘-V 从剪贴板中粘贴内容。
    ⌘-Shift-Option-V    粘贴内容并应用周围文本的格式。
    ⌘-X 或 Shift-Delete  删除突出显示的内容并将其复制到剪贴板中。
    ⌘-Z 撤消最后一步操作。
    ⌘-Shift-Z   重复最后一步操作。
    ⌘-X 删除突出显示的内容并将其保存到剪贴板中（剪切）。
    ⌘-A 选择当前网页上的所有文本。
    ⌘-: 打开“拼写和语法”对话框。
    ⌘-; 检查当前网页上的拼写和语法。 -->]]></content>
    
    <summary type="html">
    
      来到GitHub这么长时间，才开始真真的了解GitHub，这个国外的代码托管平台，充满着大牛的身影。
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Sublime" scheme="http://luuman.github.io/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>React初探</title>
    <link href="http://luuman.github.io/2017/02/14/FrontFrame/React/React/"/>
    <id>http://luuman.github.io/2017/02/14/FrontFrame/React/React/</id>
    <published>2017-02-14T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。<br>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。<br>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。</p>
<h3 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h3><ol>
<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>
<li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活 −React可以与已知的库或框架很好地配合。</li>
<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ol>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">官网地址</a><a id="more"></a>
</li>
</ul>
<h2 id="简单Demo"><a href="#简单Demo" class="headerlink" title="简单Demo"></a>简单Demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">		ReactDOM.render(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">		);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>实例中我们引入了三个库： react.min.js 、react-dom.min.js 和 browser.min.js：<br>react.min.js - React 的核心库<br>react-dom.min.js - 提供与 DOM 相关的功能<br>browser.min.js - 用于将 JSX 语法转为 JavaScript 语法</p>
<h3 id="React代码"><a href="#React代码" class="headerlink" title="React代码"></a>React代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="React-JSX语法"><a href="#React-JSX语法" class="headerlink" title="React JSX语法"></a>React JSX语法</h2><p>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。我们不需要一定使用 JSX，但它有以下优点：</p>
<blockquote>
<p>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br>它是类型安全的，在编译过程中就能发现错误。<br>使用 JSX 编写模板更加简单快速。</p>
</blockquote>
<h3 id="简单嵌套元素"><a href="#简单嵌套元素" class="headerlink" title="简单嵌套元素"></a>简单嵌套元素</h3><p>JSX 看起来类似 HTML ，我们可以看下实例:<br>ReactDOM.render方法接受两个参数：<br>一个虚拟 DOM 节点和一个真实 DOM 节点，作用是将虚拟 DOM 挂载到真实 DOM。</p>
<h4 id="实例：Hello-world"><a href="#实例：Hello-world" class="headerlink" title="实例：Hello, world!"></a>实例：Hello, world!</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(content,element);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</div></pre></td></tr></table></figure>
<p><a href="demo/index1.html">index1</a></p>
<h3 id="复杂嵌套元素"><a href="#复杂嵌套元素" class="headerlink" title="复杂嵌套元素"></a>复杂嵌套元素</h3><p>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。</p>
<h4 id="实例：文字"><a href="#实例：文字" class="headerlink" title="实例：文字"></a>实例：文字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎学习 React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-myattribute</span> = <span class="string">"somevalue"</span>&gt;</span>这是一个很不错的 JavaScript 库!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index2.html">index2</a></p>
<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：</p>
<h4 id="实例：计算"><a href="#实例：计算" class="headerlink" title="实例：计算"></a>实例：计算</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="template-variable">&#123;1+1&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index3.html">index3</a></p>
<blockquote>
<p>判断语句</p>
</blockquote>
<p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.</p>
<h4 id="实例：判断"><a href="#实例：判断" class="headerlink" title="实例：判断"></a>实例：判断</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;i == 1 ? 'True!' : 'False'&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index4.html">index4</a></p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。以下实例演示了为 h1 元素添加 myStyle 内联样式：</p>
<h4 id="实例：CSS样式"><a href="#实例：CSS样式" class="headerlink" title="实例：CSS样式"></a>实例：CSS样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myStyle = &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="string">'30px'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FF0000'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;myStyle&#125;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode</div><div class="line">);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;&#123;fontSize:</span> <span class="attr">100</span>,<span class="attr">lineHeight:</span> '<span class="attr">30px</span>',<span class="attr">color:</span> '#<span class="attr">FF0000</span>'&#125;&#125;&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span> = <span class="string">'class_name'</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div></pre></td></tr></table></figure>
<p><a href="demo/index5.html">index5</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释需要写在花括号中，实例如下：</p>
<h3 id="实例：注释"><a href="#实例：注释" class="headerlink" title="实例：注释"></a>实例：注释</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="template-tag">&#123;/*注释<span class="name">...</span>*/&#125;</span><span class="xml"></span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="React-Component组件"><a href="#React-Component组件" class="headerlink" title="React.Component组件"></a>React.Component组件</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="HTML-标签-vs-React-组件"><a href="#HTML-标签-vs-React-组件" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。<br>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>
<h4 id="实例：创建组件"><a href="#实例：创建组件" class="headerlink" title="实例：创建组件"></a>实例：创建组件</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：组件嵌套"><a href="#实例：组件嵌套" class="headerlink" title="实例：组件嵌套"></a>实例：组件嵌套</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"MyComponent"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;<span class="type">MyComponent</span> /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</p>
<blockquote>
<p>注意:<br>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p>
</blockquote>
<h4 id="实例：组件语法"><a href="#实例：组件语法" class="headerlink" title="实例：组件语法"></a>实例：组件语法</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>React.Component方法用于生成一个组件类 HelloMessage。<hellomessage> 实例组件类并输出信息。</hellomessage></p>
<blockquote>
<p>注意：原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。<br>如果我们需要向组件传递参数，可以使用 this.props 对象,实例如下：</p>
</blockquote>
<h4 id="实例：获取父元素的值"><a href="#实例：获取父元素的值" class="headerlink" title="实例：获取父元素的值"></a>实例：获取父元素的值</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> name=<span class="string">"Runoob"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>以上实例中 name 属性通过 this.props.name 来获取（自身的数字）。<br>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p>
<h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><p>通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。<br>以下实例我们实现了输出网站名字和网址的组件：</p>
<h4 id="实例：链接"><a href="#实例：链接" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> name=<span class="string">"菜鸟教程"</span> site=<span class="string">" http://www.runoob.com"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-State-状态"><a href="#React-State-状态" class="headerlink" title="React State(状态)"></a>React State(状态)</h2><p>把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>
<h3 id="constructor-初始状态"><a href="#constructor-初始状态" class="headerlink" title="constructor()初始状态"></a>constructor()初始状态</h3><h4 id="实例：点击喜欢-amp-不喜欢"><a href="#实例：点击喜欢-amp-不喜欢" class="headerlink" title="实例：点击喜欢&amp;不喜欢"></a>实例：点击喜欢&amp;不喜欢</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    handleClick() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'喜欢'</span> : <span class="string">'不喜欢'</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>你<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>我。点我切换状态。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleClick = ()=&gt;&#123;</div><div class="line">    this.<span class="built_in">set</span>State(&#123;</div><div class="line">        liked: !this.<span class="keyword">state</span>.liked</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>constructor是组件的构造函数，会在创建实例时自动调用。<br>…args表示组件参数，super(…args)是 ES6 规定的写法。<br>this.state对象用来存放内部状态，这里是定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br>onClick={this.handleClick.bind(this)}绑定事件，返回参数。<br>e.target.value绑定事件后的返回值。</p>
<h4 id="实例：输入文字实时显示"><a href="#实例：输入文字实时显示" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    constructor() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;name: <span class="symbol">'can</span> you speek <span class="type">English</span>!'&#125;;</div><div class="line">    &#125;</div><div class="line">    handleChange(e) &#123;</div><div class="line">        let name = e.target.value;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            name: name</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">                &lt;p&gt;luuman,&#123;<span class="keyword">this</span>.state.name&#125;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyTitle</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-Props"><a href="#React-Props" class="headerlink" title="React Props"></a>React Props</h2><p>props通过组件获取数据</p>
<h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：数据传递"><a href="#实例：数据传递" class="headerlink" title="实例：数据传递"></a>实例：数据传递</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(</div><div class="line">	&lt;<span class="type">HelloMessage</span> name=<span class="string">"Runoob"</span> /&gt;,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p>实例中 name 属性通过 this.props.name 来获取。</p>
<h3 id="defaultProps默认值"><a href="#defaultProps默认值" class="headerlink" title="defaultProps默认值"></a>defaultProps默认值</h3><p>默认Props：你可以通过defaultProps()方法为props设置默认值，实例如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.defaultProps = &#123;</div><div class="line">    name: <span class="symbol">'Runoo</span>b'</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">WebSite</span>.defaultProps =&#123;</div><div class="line">	name: <span class="string">"菜鸟教程"</span>,</div><div class="line">	site: <span class="string">"http://www.runoob.com"</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><h4 id="实例：点击次数"><a href="#实例：点击次数" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;</span></div><div class="line">                React.Children.map(this.props.children,function(child)&#123;</div><div class="line">                    console.log(child);</div><div class="line">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#125;)</div><div class="line">            &#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="PropTypes验证"><a href="#PropTypes验证" class="headerlink" title="PropTypes验证"></a>PropTypes验证</h3><p>Props 使用propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。</p>
<h4 id="实例：判断组件属性title是否为字符串："><a href="#实例：判断组件属性title是否为字符串：" class="headerlink" title="实例：判断组件属性title是否为字符串："></a>实例：判断组件属性title是否为字符串：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const name = <span class="number">123</span>;</div><div class="line">console.log(name);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.title&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.propTypes = &#123;</div><div class="line">    title: <span class="type">React</span>.<span class="type">PropTypes</span>.string</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> title=&#123;name&#125; /&gt;,mountNode);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果 title 使用数字变量，控制台会出现以下错误信息：</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Failed prop type: Invalid prop `title` of<span class="built_in"> type </span>`number` supplied <span class="keyword">to</span> `HelloMessage`, expected `string`.</div></pre></td></tr></table></figure>
<h3 id="PropTypes属性值"><a href="#PropTypes属性值" class="headerlink" title="PropTypes属性值"></a>PropTypes属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">.propTypes = &#123;</div><div class="line">	<span class="comment">// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span></div><div class="line">	optionalArray: React.PropTypes.array,</div><div class="line">	<span class="attr">optionalBool</span>: React.PropTypes.bool,</div><div class="line">	<span class="attr">optionalFunc</span>: React.PropTypes.func,</div><div class="line">	<span class="attr">optionalNumber</span>: React.PropTypes.number,</div><div class="line">	<span class="attr">optionalObject</span>: React.PropTypes.object,</div><div class="line">	<span class="attr">optionalString</span>: React.PropTypes.string,</div><div class="line">	<span class="attr">optionalSymbol</span>: React.PropTypes.symbol,</div><div class="line"></div><div class="line">	<span class="comment">// 可以被渲染的对象 numbers, strings, elements 或 array</span></div><div class="line">	optionalNode: React.PropTypes.node,</div><div class="line"></div><div class="line">	<span class="comment">//  React 元素</span></div><div class="line">	optionalElement: React.PropTypes.element,</div><div class="line"></div><div class="line">	<span class="comment">// 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span></div><div class="line">	optionalMessage: React.PropTypes.instanceOf(Message),</div><div class="line"></div><div class="line">	<span class="comment">// 用 enum 来限制 prop 只接受指定的值。</span></div><div class="line">	optionalEnum: React.PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</div><div class="line"></div><div class="line">	<span class="comment">// 可以是多个对象类型中的一个</span></div><div class="line">	optionalUnion: React.PropTypes.oneOfType([</div><div class="line">		React.PropTypes.string,</div><div class="line">		React.PropTypes.number,</div><div class="line">		React.PropTypes.instanceOf(Message)</div><div class="line">	]),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型组成的数组</span></div><div class="line">	optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型的属性构成的对象</span></div><div class="line">	optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 特定 shape 参数的对象</span></div><div class="line">	optionalObjectWithShape: React.PropTypes.shape(&#123;</div><div class="line">		<span class="attr">color</span>: React.PropTypes.string,</div><div class="line">		<span class="attr">fontSize</span>: React.PropTypes.number</div><div class="line">	&#125;),</div><div class="line"></div><div class="line">	<span class="comment">// 任意类型加上 `isRequired` 来使 prop 不可空。</span></div><div class="line">	requiredFunc: React.PropTypes.func.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 不可空的任意类型</span></div><div class="line">	requiredAny: React.PropTypes.any.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span></div><div class="line">	customProp(props, propName, componentName) &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</div><div class="line">		    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">				<span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</div><div class="line">				<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">		    );</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">customArrayProp</span>: React.PropTypes.arrayOf(</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</div><div class="line">			    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">					<span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</div><div class="line">					<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">			    );</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="state和props区别"><a href="#state和props区别" class="headerlink" title="state和props区别"></a>state和props区别</h3><p>在于props是不可变的，而子组件只能通过props来获取数据。<br>而state可以根据与用户交互来改变。这就是为什么有些容器组件需要定义state来更新和修改数据。</p>
<p>以下实例演示了如何在应用中组合使用state和props。我们可以在父组件中设置state，并通过在子组件上使用props将其传递到子组件上。在render函数中,我们设置name和site来获取父组件传递过来的数据。</p>
<h4 id="实例：链接-1"><a href="#实例：链接-1" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		<span class="keyword">super</span>(props);</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			name: <span class="string">"菜鸟教程"</span>,</div><div class="line">			site: <span class="string">"http://www.runoob.com"</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.state.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.state.site&#125; /&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-组件-API"><a href="#React-组件-API" class="headerlink" title="React 组件 API"></a>React 组件 API</h2><p>在本章节中我们将讨论 React 组件 API。</p>
<h3 id="基础语法-2"><a href="#基础语法-2" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="mixins去重"><a href="#mixins去重" class="headerlink" title="mixins去重"></a>mixins去重</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const <span class="type">ExampleMixin</span> = &#123;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="comment">// bind some event listeners here</span></div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        <span class="comment">// unbind those events here!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- 设置状态:setState
setState(object nextState[, function callback])
参数说明
nextState，将要设置的新状态，该状态会和当前的state合并
callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。
合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。
关于setState
不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。
setState()并不会立即改变this.state，而是创建一个即将处理的state。setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。
setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。 -->
<h4 id="实例：点击次数-1"><a href="#实例：点击次数-1" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			clickCount: <span class="number">0</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			clickCount: <span class="keyword">this</span>.state.clickCount +<span class="number">1</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h2 onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;点我！点击次数为: &#123;<span class="keyword">this</span>.state.clickCount&#125;&lt;/h2&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Counter</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<!-- 
实例中通过点击 h2 标签来使得点击计数器加 1。
替换状态：replaceState
replaceState(object nextState[, function callback])
nextState，将要设置的新状态，该状态会替换当前的state。
callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。
replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。
设置属性：setProps
setProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该状态会和当前的props合并
callback，可选参数，回调函数。该函数会在setProps设置成功，且组件重新渲染后调用。
设置组件属性，并重新渲染组件。
props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知ReactDOM.render()组件需要重新渲染，可以使用setProps()。
更新组件，我可以在节点上再次调用ReactDOM.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。
替换属性：replaceProps
replaceProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该属性会替换当前的props。
callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。
replaceProps()方法与setProps类似，但它会删除原有
props
强制更新：forceUpdate
forceUpdate([function callback])
参数说明
callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。
forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。
forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render()
一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。
获取DOM节点：findDOMNode
DOMElement findDOMNode()
返回值：DOM元素DOMElement
如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。
判断组件挂载状态：isMounted
bool isMounted()
返回值：true或false，表示组件是否已挂载到DOM中
isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。
本文参考：http://itbilu.com/javascript/react/EkACBdqKe.html -->
<h2 id="React-组件生命周期"><a href="#React-组件生命周期" class="headerlink" title="React 组件生命周期"></a>React 组件生命周期</h2><blockquote>
<p>组件的生命周期可分成三个状态：Mounting、Updating、Unmounting</p>
<h3 id="Mounting：已插入真实-DOM"><a href="#Mounting：已插入真实-DOM" class="headerlink" title="Mounting：已插入真实 DOM"></a>Mounting：已插入真实 DOM</h3></blockquote>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><p>在渲染前调用,在客户端也在服务端。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p>在渲染时调用</p>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。<br>如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
<h3 id="Updating：正在被重新渲染"><a href="#Updating：正在被重新渲染" class="headerlink" title="Updating：正在被重新渲染"></a>Updating：正在被重新渲染</h3><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><p>在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</p>
<h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><p>返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。<br>可以在你确认不需要更新组件时使用。</p>
<h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</p>
<h4 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>在组件完成更新后立即调用。在初始化时不会被调用。</p>
<h3 id="Unmounting：已移出真实-DOM"><a href="#Unmounting：已移出真实-DOM" class="headerlink" title="Unmounting：已移出真实 DOM"></a>Unmounting：已移出真实 DOM</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>在组件从 DOM 中移除的时候立刻被调用。</p>
<h4 id="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"><a href="#实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染" class="headerlink" title="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"></a>实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">opacity</span>: <span class="number">1.0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> opacity = <span class="keyword">this</span>.state.opacity;</div><div class="line">			opacity -= <span class="number">.05</span>;</div><div class="line">			<span class="keyword">if</span>(opacity &lt; <span class="number">.1</span>)&#123;</div><div class="line">				opacity = <span class="number">1.0</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">opacity</span>: opacity</div><div class="line">			&#125;)</div><div class="line"></div><div class="line">		&#125;.bind(<span class="keyword">this</span>),<span class="number">100</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></span></div><div class="line">				Hello &#123;this.props.name&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：点击效果"><a href="#实例：点击效果" class="headerlink" title="实例：点击效果"></a>实例：点击效果</h4><p>以下实例初始化 state ， setNewnumber 用于更新 state。所有生命周期在 Content 组件中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">data</span>:<span class="number">0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	setNewNumber()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">data</span>: <span class="keyword">this</span>.state.data + <span class="number">1</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setNewNumber.bind(this)&#125;</span>&gt;</span>INCREMENT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Content</span> <span class="attr">myNumber</span>=<span class="string">&#123;this.state.data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	componentWillMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillReceiveProps(newProps) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL RECEIVE PROPS!'</span>)</div><div class="line">	&#125;</div><div class="line">	shouldComponentUpdate(newProps, newState) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	componentWillUpdate(nextProps, nextState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UPDATE!'</span>);</div><div class="line">	&#125;</div><div class="line">	componentDidUpdate(prevProps, prevState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID UPDATE!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UNMOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.myNumber&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure></p>
<h4 id="实例：统计时间"><a href="#实例：统计时间" class="headerlink" title="实例：统计时间"></a>实例：统计时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">secondsElapsed</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  tick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</div><div class="line">      <span class="attr">secondsElapsed</span>: prevState.secondsElapsed + <span class="number">1</span></div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount()&#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.interval);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Lists-and-Keys列表遍历"><a href="#Lists-and-Keys列表遍历" class="headerlink" title="Lists and Keys列表遍历"></a>Lists and Keys列表遍历</h2><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml">const arr = [</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index6.html">index6</a></p>
<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map"></a>Array.map</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> * <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(doubled);</div></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">const listItems = numbers.<span class="built_in">map</span>((number,<span class="built_in">key</span>) =&gt;</div><div class="line">	&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;<span class="built_in">key</span>&#125;&gt;&#123;number&#125;&lt;/<span class="built_in">li</span>&gt;</div><div class="line">);</div><div class="line">console.<span class="built_in">log</span>(listItems);</div><div class="line">ReactDOM.render(&lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;,mountNode);</div><div class="line"></div><div class="line">const listItems = numbers.<span class="built_in">map</span>(function(number,keys)&#123;</div><div class="line">	<span class="built_in">return</span>(</div><div class="line">		&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;keys&#125;&gt;</div><div class="line">			&#123;number&#125;</div><div class="line">		&lt;/<span class="built_in">li</span>&gt;</div><div class="line">	)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-forEach-遍历"><a href="#Array-forEach-遍历" class="headerlink" title="Array.forEach 遍历"></a>Array.forEach 遍历</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>((e) =&gt; &#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = [];</div><div class="line">repos.forEach(<span class="function">(<span class="params">p,keys</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> item = <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;keys&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;p.html_url&#125;</span>&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;p.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&#123;p.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">	repoList.push(item);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">            &#123;repo.description&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-splice-删除"><a href="#Array-splice-删除" class="headerlink" title="Array.splice 删除"></a>Array.splice 删除</h3><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter"></a>Array.filter</h3><p>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every"></a>Array.every</h3><h3 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push"></a>Array.push</h3><h2 id="Handling-Events绑定事件"><a href="#Handling-Events绑定事件" class="headerlink" title="Handling Events绑定事件"></a>Handling Events绑定事件</h2><h2 id="Forms表单"><a href="#Forms表单" class="headerlink" title="Forms表单"></a>Forms表单</h2><h3 id="基础语法-3"><a href="#基础语法-3" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：输入文字实时显示-1"><a href="#实例：输入文字实时显示-1" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;value&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：输入文字实时显示-2"><a href="#实例：输入文字实时显示-2" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><p>你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;<span class="keyword">this</span>.props.myDataProp&#125; onChange=&#123;<span class="keyword">this</span>.props.updataStateProp&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updataStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我"><a href="#实例：点我" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state=&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'Hello World!'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'luuman is good man!'</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">let</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleChange.bind(this)&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<p>当你需要从子组件中更新父组件的 state 时，你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。实例如下：</p>
<h4 id="实例：点我-1"><a href="#实例：点我-1" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.props.updateStateProp&#125;&gt;点我&lt;/button&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: <span class="symbol">'luuman</span> is good man!'</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updateStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;&gt;&lt;/<span class="type">Content</span>&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="Refs-and-the-DOM"><a href="#Refs-and-the-DOM" class="headerlink" title="Refs and the DOM"></a>Refs and the DOM</h2><h3 id="React-Refs"><a href="#React-Refs" class="headerlink" title="React Refs"></a>React Refs</h3><p>React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。<br>这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。</p>
<blockquote>
<p>使用方法：<br>绑定一个 ref 属性到 render 的返回值上：</p>
</blockquote>
<p>在其它代码中，通过 this.refs 获取支撑实例:<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">ref</span>=<span class="string">"myInput"</span> /&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">input</span> = <span class="keyword">this</span><span class="variable">.refs</span><span class="variable">.myInput</span>;</div><div class="line"><span class="keyword">var</span> inputValue = <span class="keyword">input</span><span class="variable">.value</span>;</div><div class="line"><span class="keyword">var</span> inputRect = <span class="keyword">input</span><span class="variable">.getBoundingClientRect</span>();</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我输入框获取焦点"><a href="#实例：点我输入框获取焦点" class="headerlink" title="实例：点我输入框获取焦点"></a>实例：点我输入框获取焦点</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.refs.myInput.focus();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' ref=<span class="symbol">'myInpu</span>t' /&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'butto</span>n' value='点我输入框获取焦点' onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyComponent</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<p>当组件插入到 DOM 后，ref属性添加一个组件的引用于到this.refs.name获取。</p>
<p>实例中，我们获取了输入框的支撑实例的引用，子点击按钮后输入框获取焦点。<br>我们也可以使用 getDOMNode()方法获取DOM元素</p>
<h2 id="React-AJAX"><a href="#React-AJAX" class="headerlink" title="React AJAX"></a>React AJAX</h2><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。<br>当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.get(URL,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure>
<h4 id="实例：获取-Github-用户最新-gist-共享描述"><a href="#实例：获取-Github-用户最新-gist-共享描述" class="headerlink" title="实例：获取 Github 用户最新 gist 共享描述:"></a>实例：获取 Github 用户最新 gist 共享描述:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGist</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">			<span class="attr">lastGistUrl</span>: <span class="string">''</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest = $.get(<span class="keyword">this</span>.props.source,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> lastGist = result[<span class="number">0</span>];</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">username</span>: lastGist.owner.login,</div><div class="line">				<span class="attr">lastGistUrl</span>: lastGist.html_url</div><div class="line">			&#125;)</div><div class="line">		&#125;.bind(<span class="keyword">this</span>))</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest.abort();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				&#123;this.state.username&#125;</div><div class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>&#123;this.state.lastGistUrl&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：拉取数据"><a href="#实例：拉取数据" class="headerlink" title="实例：拉取数据"></a>实例：拉取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">const</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RipoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">loading</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">error</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">data</span>: <span class="literal">null</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="keyword">this</span>.props.promise.then(</div><div class="line">            <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">data</span>: value</div><div class="line">            &#125;),</div><div class="line">            error =&gt; <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">error</span>: error</div><div class="line">            &#125;)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.loading)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.error != <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>  <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line">            <span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span>(</div><div class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">                        &#123;repo.description&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">                );</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span>(</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">RipoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Add-Ons-添加插件"><a href="#Add-Ons-添加插件" class="headerlink" title="Add-Ons 添加插件"></a>Add-Ons 添加插件</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ from <span class="symbol">'jquer</span>y';</div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> <span class="type">ReactDOM</span> from <span class="symbol">'react</span>-dom';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;<span class="type">HelloWorld</span>&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloWorld</span> /&gt;,$('#example')[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h3 id="recharts"><a href="#recharts" class="headerlink" title="recharts"></a>recharts</h3><ul>
<li><a href="http://recharts.org/" target="_blank" rel="external">React图表组件库</a></li>
</ul>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul>
<li><a href="https://react-bootstrap.github.io/" target="_blank" rel="external">React组件库</a></li>
</ul>
<h3 id="MarkdownEditor"><a href="#MarkdownEditor" class="headerlink" title="MarkdownEditor"></a>MarkdownEditor</h3><ul>
<li><a href="https://github.com/jonschlinkert/remarkable" title="Markdown解析器" target="_blank" rel="external">MarkDown</a></li>
</ul>
<h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2><h3 id="render-2"><a href="#render-2" class="headerlink" title="render()"></a>render()</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line"><span class="built_in">	element,</span></div><div class="line"><span class="built_in">	container,</span></div><div class="line">	[callback]</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="unmountComponentAtNode"><a href="#unmountComponentAtNode" class="headerlink" title="unmountComponentAtNode()"></a>unmountComponentAtNode()</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReactDOM.unmountComponentAtNode(<span class="keyword">container</span>)</div></pre></td></tr></table></figure>
<h3 id="findDOMNode"><a href="#findDOMNode" class="headerlink" title="findDOMNode()"></a>findDOMNode()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ReactDOM</span><span class="selector-class">.findDOMNode</span>(<span class="selector-tag">component</span>)</div></pre></td></tr></table></figure>
<p>### </p>
<h4 id="onkeypress"><a href="#onkeypress" class="headerlink" title="onkeypress"></a>onkeypress</h4><p>/<em> 在实例中，我们使用了支持多浏览器的方法，因为 keyCode 属性无法再 Firefox 浏览器中工作。但是 which 属性可以。<br>如果浏览器支持 event.which 则使用 event.which，否则使用 event.keyCode </em>/</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>
<blockquote>
<p>for循环的计数器</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(i);</div><div class="line">//ReferenceError: i <span class="built_in">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure>
<blockquote>
<p>下面的代码如果使用var，最后输出的是10</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。&lt;br&gt;React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。&lt;br&gt;React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。&lt;/p&gt;
&lt;h3 id=&quot;React-特点&quot;&gt;&lt;a href=&quot;#React-特点&quot; class=&quot;headerlink&quot; title=&quot;React 特点&quot;&gt;&lt;/a&gt;React 特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;声明式设计 −React采用声明范式，可以轻松描述应用。&lt;/li&gt;
&lt;li&gt;高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。&lt;/li&gt;
&lt;li&gt;灵活 −React可以与已知的库或框架很好地配合。&lt;/li&gt;
&lt;li&gt;JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。&lt;/li&gt;
&lt;li&gt;组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。&lt;/li&gt;
&lt;li&gt;单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网地址&lt;/a&gt;
    
    </summary>
    
      <category term="React" scheme="http://luuman.github.io/categories/React/"/>
    
    
      <category term="React" scheme="http://luuman.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>用CSS实现元素垂直居中方案</title>
    <link href="http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/"/>
    <id>http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/</id>
    <published>2017-01-02T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="固定高度绝对定位"><a href="#固定高度绝对定位" class="headerlink" title="固定高度绝对定位"></a>固定高度绝对定位</h3><blockquote>
<p>使用position:absolute,设置left、top、margin-left、margin-top的属性<br>这种方法基本浏览器都能够兼容，不足之处就是需要固定宽高。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- <div class="one">one</div> -->
<style type="text/css">
    .one{
        position:absolute;
        width:200px;
        height:200px;
        top:50%;
        left:50%;
        margin-top:-100px;
        margin-left:-100px;
        background:red; 
    }
</style>

<h3 id="使用position-fixed-同样设置left、top、margin-left、margin-top的属性"><a href="#使用position-fixed-同样设置left、top、margin-left、margin-top的属性" class="headerlink" title="使用position:fixed,同样设置left、top、margin-left、margin-top的属性"></a>使用position:fixed,同样设置left、top、margin-left、margin-top的属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.two</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">background</span>:orange;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家都知道的position:fixed,IE是不支持这个属性的</p>
<!-- <div class="two">two</div> -->
<style type="text/css">
    .two{
        position:fixed;
        width:180px;
        height:180px;
        top:50%;
        left:50%;
        margin-top:-90px;
        margin-left:-90px;
        background:orange;
    }
</style>
### 利用position:fixed属性，margin:auto这个必须不要忘记了。
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.three</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="three">three</div> -->
<style type="text/css">
    .three{
        position:fixed;
        width:160px;
        height:160px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:pink;
    }
</style>
### 利用position:absolute属性，设置top/bottom/right/left
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.four</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="four">four</div> -->
<style type="text/css">
    .four{
        position:absolute;
        width:140px;
        height:140px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:black;
    }
</style>
### 文字垂直水平居中
>利用display:table-cell属性使内容垂直居中

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.five</span>&#123;</div><div class="line">	<span class="attribute">display</span>:table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">width</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">background</span>:purple;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="five">five</div> -->
<style type="text/css">
    .five{
        display:table-cell;
        vertical-align:middle;
        text-align:center;
        width:120px;
        height:120px;
        background:purple;
    }
</style>
### 文字垂直水平居中
>最简单的一种使行内元素居中的方法，使用line-height属性
这种方法也很实用，比如使文字垂直居中对齐

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.six</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="six">six</div> -->
<style type="text/css">
    .six{
        width:100px;
        height:100px;
        line-height:100px;
        text-align:center;
        background:gray;
    }
</style>
### 文字垂直水平居中
>使用css3的display:-webkit-box属性，再设置-webkit-box-pack:center/-webkit-box-align:center

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.seven</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">display</span>:-webkit-box;</div><div class="line">	<span class="attribute">-webkit-box-pack</span>:center;</div><div class="line">	<span class="attribute">-webkit-box-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">	<span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="seven">seven</div> -->
<style type="text/css">
    .seven{
        width:90px;
        height:90px;
        display:-webkit-box;
        -webkit-box-pack:center;
        -webkit-box-align:center;
        background:yellow;
        color:black;
    }
</style>
### CSS translate偏移
>使用css3的新属性transform:translate(x,y)属性
这个方法可以不需要设定固定的宽高，在移动端用的会比较多，在移动端css3兼容的比较好

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.eight</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-webkit-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-moz-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-ms-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">background</span>:green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="eight">eight</div> -->
<style type="text/css">
    .eight{
        position:absolute;
        width:80px;
        height:80px;
        top:50%;
        left:50%;
        transform:translate(-50%,-50%);
        -webkit-transform:translate(-50%,-50%);
        -moz-transform:translate(-50%,-50%);
        -ms-transform:translate(-50%,-50%);
        background:green;
    }
</style>
### before元素
>最高大上的一种，使用:before元素

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nine</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">display</span>:block;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:<span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span> <span class="selector-class">.content</span>&#123;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">width</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="nine"><div class="content">nine</div></div> -->
<style type="text/css">
    .nine{
        position:fixed;
        display:block;
        top:0;
        right:0;
        bottom:0;
        left:0;
        text-align:center;
        background:rgba(0,0,0,.1);
    }
    .nine:before{
        content:'';
        display:inline-block;
        vertical-align:middle;
        height:100%;
    }
    .nine .content{
        display:inline-block;
        vertical-align:middle;
        width:60px;
        height:60px;
        line-height:60px;
        color:red;
        background:yellow;
    }
</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML前端代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normhtml/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normhtml/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="HTML基础设施"><a href="#HTML基础设施" class="headerlink" title="HTML基础设施"></a>HTML基础设施</h3><p>文件应以“&lt;!DOCTYPE ……&gt;”首行顶格开始，推荐使用“&lt;!DOCTYPE html&gt;”。<br>必须申明文档的编码charset，且与文件本身编码保持一致，推荐使用UTF-8编码<meta charset="utf-8">。<br>根据页面内容和需求填写适当的keywords和description。<br>页面title是极为重要的不可缺少的一项。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>NEC：更好的CSS方案<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"img/favicon.ico"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"img/touchicon.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="结构顺序和视觉顺序基本保持一致"><a href="#结构顺序和视觉顺序基本保持一致" class="headerlink" title="结构顺序和视觉顺序基本保持一致"></a>结构顺序和视觉顺序基本保持一致</h3><p>按照从上至下、从左到右的视觉顺序书写HTML结构。<br>有时候为了便于搜索引擎抓取，我们也会将重要内容在HTML结构顺序上提前。<br>用div代替table布局，可以使HTML更具灵活性，也方便利用CSS控制。<br>table不建议用于布局，但表现具有明显表格形式的数据，table还是首选。<br>结构、表现、行为三者分离，避免内联<br>使用link将css文件引入，并置于head中。<br>使用script将js文件引入，并置于body底部。<br>保持良好的简洁的树形结构<br>每一个块级元素都另起一行，每一行都使用Tab缩进对齐（head和body的子元素不需要缩进）。删除冗余的行尾的空格。<br>使用4个空格代替1个Tab（大多数编辑器中可设置）。<br>对于内容较为简单的表格，建议将tr写成单行。<br>你也可以在大的模块之间用空行隔开，使模块更清晰。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-side"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidein"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 热门标签 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>热门标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 最热TOP5 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>最热TOP5<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"s-fc02 f-fr"</span>&gt;</span>更多»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="另外，请做到以下几点"><a href="#另外，请做到以下几点" class="headerlink" title="另外，请做到以下几点"></a>另外，请做到以下几点</h3><ol>
<li>结构上如果可以并列书写，就不要嵌套。如果可以写成<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code>那么就不要写成<code>&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>如果结构已经可以满足视觉和语义的要求，那么就不要有额外的冗余的结构。比如<code>&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;</code>已经能满足要求，那么就不要再写成<code>&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>一个标签上引用的className不要过多，越少越好。比如不要出现这种情况：<code>&lt;div class=&quot;class1 class2 class3 class4&quot;&gt;&lt;/div&gt;</code></li>
<li>对于一个语义化的内部标签，应尽量避免使用className。比如在这样一个列表中，li标签中的itm应去除：<code>&lt;ul class=&quot;m-help&quot;&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;/ul&gt;</code></li>
</ol>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><h3 id="说明文案的注释方法"><a href="#说明文案的注释方法" class="headerlink" title="说明文案的注释方法"></a>说明文案的注释方法</h3><p>采用类似标签闭合的写法，与HTML统一格式；注释文案两头空格，与CSS注释统一格式。</p>
<p>开始注释：<!-- 注释文案 -->（文案两头空格）。<br>结束注释：<!-- /注释文案 -->（文案前加“/”符号，类似标签的闭合）。<br>允许只有开始注释！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-hd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- LOGO --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"m-logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /LOGO --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 导航 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"m-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 更多导航项 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /导航 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /头部 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码本身的注释方法"><a href="#代码本身的注释方法" class="headerlink" title="代码本身的注释方法"></a>代码本身的注释方法</h3><p>单行代码的注释也保持同行，两端空格；多行代码的注释起始和结尾都另起一行并左缩进对齐。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;h1 class="m-logo"&gt;&lt;a href="#"&gt;LOGO&lt;/a&gt;&lt;/h1&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;ul class="m-nav"&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV1&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV2&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
<h3 id="HTML注释在IE6中的BUG"><a href="#HTML注释在IE6中的BUG" class="headerlink" title="HTML注释在IE6中的BUG"></a>HTML注释在IE6中的BUG</h3><p>如果两个浮动元素之间存在注释，那么可能导致布局错位或文字的BUG。<br>所以，这种情况下，我们通常将注释去掉，或者索性采用模板语言（ftl、vm）的注释。</p>
<h3 id="严格的嵌套"><a href="#严格的嵌套" class="headerlink" title="严格的嵌套"></a>严格的嵌套</h3><p>尽可能以最严格的xhtml strict标准来嵌套，比如内联元素不能包含块级元素等等。<br>正确闭合标签且必须闭合。</p>
<h3 id="严格的属性"><a href="#严格的属性" class="headerlink" title="严格的属性"></a>严格的属性</h3><p>属性和值全部小写，每个属性都必须有一个值，每个值必须加双引号。<br>没有值的属性必须使用自己的名称做为值（checked、disabled、readonly、selected等等）。<br>可以省略style标签和script标签的type属性。</p>
<h3 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h3><table>
<thead>
<tr>
<th>标签</th>
<th>语义</th>
<th style="text-align:center">嵌套常见错误</th>
<th>常用属性（加粗的为不可缺少的或建议的）</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>超链接/锚</td>
<td style="text-align:center">a不可嵌套a</td>
<td>href,name,title,rel,target</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>button</td>
<td>按钮</td>
<td style="text-align:center">不可嵌套表单元素</td>
<td>type,disabled</td>
</tr>
<tr>
<td>dd</td>
<td>定义列表中的定义（描述内容）</td>
<td style="text-align:center">只能以dl为父容器，对应一个dt</td>
<td></td>
</tr>
<tr>
<td>del</td>
<td>文本删除</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>div</td>
<td>块级容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>dl</td>
<td>定义列表</td>
<td style="text-align:center">只能嵌套dt和dd</td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td>定义列表中的定义术语</td>
<td style="text-align:center">只能以dl为父容器，对应多个dd</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>form</td>
<td>表单</td>
<td style="text-align:center">action</td>
<td>,target,method,name</td>
</tr>
<tr>
<td>h1</td>
<td>标题</td>
<td style="text-align:center">从h1到h6，不可嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>iframe</td>
<td>内嵌一个网页</td>
<td style="text-align:center">frameborder</td>
<td>,width,height,src,scrolling,name</td>
</tr>
<tr>
<td>img</td>
<td>图像</td>
<td style="text-align:center">alt</td>
<td>,src,width,height</td>
</tr>
<tr>
<td>input</td>
<td>各种表单控件</td>
<td style="text-align:center">type</td>
<td>,name,value,checked,disabled,maxlength,readonly,accesskey</td>
</tr>
<tr>
<td>label</td>
<td>标签为input元素定义标注</td>
<td style="text-align:center">for</td>
<td></td>
</tr>
<tr>
<td>li</td>
<td>列表项</td>
<td style="text-align:center">只能以ul或ol为父容器</td>
<td></td>
</tr>
<tr>
<td>link</td>
<td>引用样式或icon</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,rel,href</td>
</tr>
<tr>
<td>meta</td>
<td>文档信息</td>
<td style="text-align:center">只用于head</td>
<td>content,http-equiv,name</td>
</tr>
<tr>
<td>ol</td>
<td>有序列表</td>
<td style="text-align:center">只能嵌套li</td>
<td></td>
</tr>
<tr>
<td>option</td>
<td>select中的一个选项</td>
<td style="text-align:center">仅用于select</td>
<td>value,selected,disabled</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
<td style="text-align:center">不能嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>script</td>
<td>引用脚本</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,src</td>
</tr>
<tr>
<td>select</td>
<td>列表框或下拉框</td>
<td style="text-align:center">只能嵌套option或optgroup</td>
<td>name,disabled,multiple</td>
</tr>
<tr>
<td>span</td>
<td>内联容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>strong</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>style</td>
<td>引用样式</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,media</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>sup</td>
<td>上标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
<td style="text-align:center">只可嵌套表格元素</td>
<td>width,align,background,cellpadding,cellspacing,summary,border</td>
</tr>
<tr>
<td>tbody</td>
<td>表格主体</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>td</td>
<td>表格中的单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>textarea</td>
<td>多行文本输入控件</td>
<td style="text-align:center">name</td>
<td>,accesskey,disabled,readonly,rows,cols</td>
</tr>
<tr>
<td>tfoot</td>
<td>表格表尾</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>th</td>
<td>表格中的标题单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>thead</td>
<td>表格表头</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>文档标题</td>
<td style="text-align:center">只用于head</td>
<td></td>
</tr>
<tr>
<td>tr</td>
<td>表格行</td>
<td style="text-align:center">嵌套于table或thead、tbody、tfoot</td>
<td></td>
</tr>
<tr>
<td>ul</td>
<td>无序列表</td>
<td style="text-align:center">只能嵌套li</td>
</tr>
</tbody>
</table>
<h2 id="内容语义"><a href="#内容语义" class="headerlink" title="内容语义"></a>内容语义</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><h3 id="内容类型决定使用的语义标签"><a href="#内容类型决定使用的语义标签" class="headerlink" title="内容类型决定使用的语义标签"></a>内容类型决定使用的语义标签</h3><p>在网页中某种类型的内容必定需要某种特定的HTML标签来承载，也就是我们常常提到的根据你的内容语义化HTML结构。</p>
<h3 id="加强“资源型”内容的可访问性和可用性"><a href="#加强“资源型”内容的可访问性和可用性" class="headerlink" title="加强“资源型”内容的可访问性和可用性"></a>加强“资源型”内容的可访问性和可用性</h3><p>在资源型的内容上加入描述文案，比如给img添加alt属性，在audio内加入文案和链接等等。</p>
<h3 id="加强“不可见”内容的可访问性"><a href="#加强“不可见”内容的可访问性" class="headerlink" title="加强“不可见”内容的可访问性"></a>加强“不可见”内容的可访问性</h3><p>背景图上的文字应该同时写在html中，并使用css使其不可见，有利于搜索引擎抓取你的内容，也可以在css失效的情况下看到内容。</p>
<h3 id="适当使用实体"><a href="#适当使用实体" class="headerlink" title="适当使用实体"></a>适当使用实体</h3><p>以实体代替与HTML语法相同的字符，避免浏览解析错误。</p>
<h3 id="常用HTML字符实体（建议使用实体）："><a href="#常用HTML字符实体（建议使用实体）：" class="headerlink" title="常用HTML字符实体（建议使用实体）："></a>常用HTML字符实体（建议使用实体）：</h3><table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>“</td>
<td style="text-align:center">双引号</td>
<td>&quot;</td>
<td style="text-align:center">&#34;</td>
</tr>
<tr>
<td>&amp;</td>
<td style="text-align:center">&amp;符</td>
<td>&amp;</td>
<td style="text-align:center">&#38;</td>
</tr>
<tr>
<td>&lt;</td>
<td style="text-align:center">左尖括号（小于号）</td>
<td>&lt;</td>
<td style="text-align:center">&#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td style="text-align:center">右尖括号（大于号）</td>
<td>&gt;</td>
<td style="text-align:center">&#62;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">空格</td>
<td>&nbsp;</td>
<td style="text-align:center">&#160;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中文全角空格</td>
<td></td>
<td style="text-align:center">&#12288;</td>
</tr>
</tbody>
</table>
<p>常用特殊字符实体（不建议使用实体）：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>¥</td>
<td style="text-align:center">元</td>
<td>&yen;</td>
<td style="text-align:center">&#165;</td>
</tr>
<tr>
<td>¦</td>
<td style="text-align:center">断竖线</td>
<td>&brvbar;</td>
<td style="text-align:center">&#166;</td>
</tr>
<tr>
<td>©</td>
<td style="text-align:center">版权</td>
<td>&copy;</td>
<td style="text-align:center">&#169;</td>
</tr>
<tr>
<td>®</td>
<td style="text-align:center">注册商标R</td>
<td>&reg;</td>
<td style="text-align:center">&#174;</td>
</tr>
<tr>
<td>™</td>
<td style="text-align:center">商标TM</td>
<td>&trade;</td>
<td style="text-align:center">&#8482;</td>
</tr>
<tr>
<td>·</td>
<td style="text-align:center">间隔符</td>
<td>&middot;</td>
<td style="text-align:center">&#183;</td>
</tr>
<tr>
<td>«</td>
<td style="text-align:center">左双尖括号</td>
<td>&laquo;</td>
<td style="text-align:center">&#171;</td>
</tr>
<tr>
<td>»</td>
<td style="text-align:center">右双尖括号</td>
<td>&raquo;</td>
<td style="text-align:center">&#187;</td>
</tr>
<tr>
<td>°</td>
<td style="text-align:center">度</td>
<td>&deg;</td>
<td style="text-align:center">&#176;</td>
</tr>
<tr>
<td>×</td>
<td style="text-align:center">乘</td>
<td>&times;</td>
<td style="text-align:center">&#215;</td>
</tr>
<tr>
<td>÷</td>
<td style="text-align:center">除</td>
<td>&divide;</td>
<td style="text-align:center">&#247;</td>
</tr>
<tr>
<td>‰</td>
<td style="text-align:center">千分比</td>
<td>&permil;</td>
<td style="text-align:center">&#8240;</td>
</tr>
</tbody>
</table>
<h2 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h2><h3 id="邮件环境"><a href="#邮件环境" class="headerlink" title="邮件环境"></a>邮件环境</h3><p>邮件内容所在上下文或者说所在外部容器（以下简称环境）都是由邮箱服务商决定的，这就要求邮件内容需要在任何一种情况下都要正确显示。<br>这些环境可能是以下某几种情况：</p>
<ol>
<li>可能是个iframe，你的内容是被放在body里面的；可能只是个div，你的内容就被放在这个div里面。</li>
<li>可能邮箱自身设置了些css，他可能对你产生未知的影响。</li>
<li>可能根本没有申明doctype，即使申明了，也不是你想要的doctype。</li>
</ol>
<h3 id="避免被嵌套在不正确的容器里"><a href="#避免被嵌套在不正确的容器里" class="headerlink" title="避免被嵌套在不正确的容器里"></a>避免被嵌套在不正确的容器里</h3><p>惑：因为容器可能是body或div，所以，我们邮件内容不应该是一个完整的html。<br>解：所以邮件内容应该是以div为根节点的html片段。</p>
<h3 id="避免css冲突或被覆盖"><a href="#避免css冲突或被覆盖" class="headerlink" title="避免css冲突或被覆盖"></a>避免css冲突或被覆盖</h3><p>惑：因为环境中可能已经设置了css，比如一些reset、一些.class。<br>解：所以我们只能使用行内style来确保我们的效果，并且在内容根节点上设置基础style，并且尽量使用div、span等无语义标签。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">    内容区域</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点-邮件内容居中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;margin:0 auto;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">        内容区域</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果使用语义化标签，那么需要多写一些style，以避免被环境中的css覆盖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;margin:0;padding:0;fong-weight:normal;font-size:12px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 而使用无语义标签，就可以省下很多style --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="避免盒模型错误"><a href="#避免盒模型错误" class="headerlink" title="避免盒模型错误"></a>避免盒模型错误</h3><p>惑：因为doctype的不确定性，我们在写style的时候，应该考虑无论doctype是什么情况，都可以正常显示，doctype影响最大的就是盒模型的解析。<br>解：所以我们要将盒模型拆分开来写，比如我们将原本要定义在某个div上的height和padding分别写到这个div和他的父元素或子元素上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;padding:20px 0;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 上面的写法应该改成以下写法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:20px 0;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>因为只能使用行内style，所以清除浮动需要使用额外标签。<br>避免使用绝对定位，可能会被过滤。<br>避免使用js，可能会被过滤。<br>避免使用table布局，不易于修改维护。<br>背景图片或内容图片上的文字信息，必须在代码中可见。<br>如果没有特殊要求，所有a链接都要从新窗口打开，即target=”_blank”，且a标签内容不能为空。<br>所有链接必须设置使用颜色、是否下划线，即style=”text-decoration:;color:;”。<br>重点检查ie！！！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:268px;background:url(images/bg1.jpg) no-repeat;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:228px;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:21px 0 0 21px;"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://yuedu.163.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"display:block;width:111px;height:28px;overflow:hidden;text-indent:-2000px;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"网易阅读-随时随地品质阅读"</span>&gt;</span>网易阅读-随时随地品质阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"margin:0;padding:0;width:0;height:0;overflow:hidden;text-indent:-2000px;"</span>&gt;</span>你的iPad够有料吗？iPad不等于愤怒的小鸟！不等于切水果！下载网易阅读，给你的iPad添点料，打造你独一无二的iPad！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:0 0 0 35px;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://itunes.apple.com/cn/app/id421092396?mt=8"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"color:#f00;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"下载网易阅读"</span>&gt;</span>下载网易阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="发现的问题及解决方案"><a href="#发现的问题及解决方案" class="headerlink" title="发现的问题及解决方案"></a>发现的问题及解决方案</h3><p>问题：部分智能手机的邮件客户端可能会有只显示部分的bug（宽度被截）。<br>解决：在外面套一个同宽的table即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;table width=<span class="string">"600"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> border=<span class="string">"0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h3><p>推荐使用 email框架 来创建邮件内容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 水平居左的邮件 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"margin:0 auto;"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 水平居中的邮件 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/8d291d823cc0#" title="web前端规范" target="_blank" rel="external">web前端规范</a><br><a href="https://github.com/mishe/blog/issues/125" title="前端开发 @ 资邦集团（上海）" target="_blank" rel="external">新公司的前端开发规范（初稿） #125</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
